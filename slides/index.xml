<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Slides on 👨‍💻 Baptiste Pesquet</title><link>https://www.bpesquet.fr/slides/</link><description>👨‍💻 Baptiste Pesquet (Slides)</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 11 Nov 2021 12:25:14 +0100</lastBuildDate><atom:link href="https://www.bpesquet.fr/slides/index.xml" rel="self" type="application/rss+xml"/><item><title>Python best practices</title><link>https://www.bpesquet.fr/slides/python-best-practices/</link><pubDate>Thu, 11 Nov 2021 12:25:14 +0100</pubDate><guid>https://www.bpesquet.fr/slides/python-best-practices/</guid><description>&lt;h2 id="table-of-contents">Table of contents&lt;/h2>
&lt;ul>
&lt;li>Writing pythonic code&lt;/li>
&lt;li>Packaging and dependency management&lt;/li>
&lt;li>Working with notebooks&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="writing-pythonic-code">Writing pythonic code&lt;/h2>
&lt;hr>
&lt;h3 id="the-zen-of-python-by-tim-peters">The Zen of Python, by Tim Peters&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> this
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">Beautiful is better than ugly.
Explicit is better than implicit.
Simple is better than complex.
Complex is better than complicated.
Flat is better than nested.
Sparse is better than dense.
Readability counts.
Special cases aren&amp;#39;t special enough to break the rules.
Although practicality beats purity.
Errors should never pass silently.
Unless explicitly silenced.
In the face of ambiguity, refuse the temptation to guess.
There should be one-- and preferably only one --obvious way to do it.
Although that way may not be obvious at first unless you&amp;#39;re Dutch.
Now is better than never.
Although never is often better than *right* now.
If the implementation is hard to explain, it&amp;#39;s a bad idea.
If the implementation is easy to explain, it may be a good idea.
Namespaces are one honking great idea -- let&amp;#39;s do more of those!
&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="what-does-pythonic-mean">What does &amp;ldquo;pythonic&amp;rdquo; mean?&lt;/h3>
&lt;ul>
&lt;li>Python code is considered &lt;em>pythonic&lt;/em> if it:
&lt;ul>
&lt;li>conforms to the Python philosophy;&lt;/li>
&lt;li>takes advantage of the language&amp;rsquo;s specific features.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Pythonic code is &lt;strong>idiomatic Python code&lt;/strong> that strives to be clean, concise and readable.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="example-swapping-two-variables">Example: swapping two variables&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#080;background-color:#0f140f;font-style:italic"># Non-pythonic&lt;/span>
tmp = a
a = b
b = tmp
&lt;span style="color:#080;background-color:#0f140f;font-style:italic"># Pythonic&lt;/span>
a, b = b, a
&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="example-iterating-on-a-list">Example: iterating on a list&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">my_list = [&lt;span style="color:#0086d2">&amp;#34;a&amp;#34;&lt;/span>, &lt;span style="color:#0086d2">&amp;#34;b&amp;#34;&lt;/span>, &lt;span style="color:#0086d2">&amp;#34;c&amp;#34;&lt;/span>]
&lt;span style="color:#080;background-color:#0f140f;font-style:italic"># Non-pythonic&lt;/span>
i = &lt;span style="color:#0086f7;font-weight:bold">0&lt;/span>
&lt;span style="color:#fb660a;font-weight:bold">while&lt;/span> i &amp;lt; len(my_list):
do_something(my_list[i])
i += &lt;span style="color:#0086f7;font-weight:bold">1&lt;/span>
&lt;span style="color:#080;background-color:#0f140f;font-style:italic"># Still non-pythonic&lt;/span>
&lt;span style="color:#fb660a;font-weight:bold">for&lt;/span> i in range(len(my_list)):
do_something(my_list[i])
&lt;span style="color:#080;background-color:#0f140f;font-style:italic"># Pythonic&lt;/span>
&lt;span style="color:#fb660a;font-weight:bold">for&lt;/span> item in my_list:
do_something(item)
&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="example-indexed-traversal">Example: indexed traversal&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#080;background-color:#0f140f;font-style:italic"># Non-pythonic&lt;/span>
&lt;span style="color:#fb660a;font-weight:bold">for&lt;/span> i in range(len(my_list)):
&lt;span style="color:#fb660a;font-weight:bold">print&lt;/span>(i, &lt;span style="color:#0086d2">&amp;#34;-&amp;gt;&amp;#34;&lt;/span>, my_list[i])
&lt;span style="color:#080;background-color:#0f140f;font-style:italic"># Pythonic&lt;/span>
&lt;span style="color:#fb660a;font-weight:bold">for&lt;/span> i, item in enumerate(my_list):
&lt;span style="color:#fb660a;font-weight:bold">print&lt;/span>(i, &lt;span style="color:#0086d2">&amp;#34;-&amp;gt;&amp;#34;&lt;/span>, item)
&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="example-searching-in-a-list">Example: searching in a list&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">fruits = [&lt;span style="color:#0086d2">&amp;#34;apples&amp;#34;&lt;/span>, &lt;span style="color:#0086d2">&amp;#34;oranges&amp;#34;&lt;/span>, &lt;span style="color:#0086d2">&amp;#34;bananas&amp;#34;&lt;/span>, &lt;span style="color:#0086d2">&amp;#34;grapes&amp;#34;&lt;/span>]
fruit = &lt;span style="color:#0086d2">&amp;#34;cherries&amp;#34;&lt;/span>
&lt;span style="color:#080;background-color:#0f140f;font-style:italic"># Non-pythonic&lt;/span>
found = False
size = len(fruits)
&lt;span style="color:#fb660a;font-weight:bold">for&lt;/span> i in range(&lt;span style="color:#0086f7;font-weight:bold">0&lt;/span>, size):
&lt;span style="color:#fb660a;font-weight:bold">if&lt;/span> fruits[i] == fruit:
found = True
&lt;span style="color:#080;background-color:#0f140f;font-style:italic"># Pythonic&lt;/span>
found = fruit in fruits
&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="example-generating-a-list">Example: generating a list&lt;/h3>
&lt;p>This feature is called &lt;a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions">list comprehension&lt;/a>.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">numbers = [&lt;span style="color:#0086f7;font-weight:bold">1&lt;/span>, &lt;span style="color:#0086f7;font-weight:bold">2&lt;/span>, &lt;span style="color:#0086f7;font-weight:bold">3&lt;/span>, &lt;span style="color:#0086f7;font-weight:bold">4&lt;/span>, &lt;span style="color:#0086f7;font-weight:bold">5&lt;/span>, &lt;span style="color:#0086f7;font-weight:bold">6&lt;/span>]
&lt;span style="color:#080;background-color:#0f140f;font-style:italic"># Non-pythonic&lt;/span>
squares = []
&lt;span style="color:#fb660a;font-weight:bold">for&lt;/span> i in range(len(numbers)):
&lt;span style="color:#fb660a;font-weight:bold">if&lt;/span> numbers[i] % &lt;span style="color:#0086f7;font-weight:bold">2&lt;/span> == &lt;span style="color:#0086f7;font-weight:bold">0&lt;/span>:
squares.append(numbers[i] * &lt;span style="color:#0086f7;font-weight:bold">2&lt;/span>)
&lt;span style="color:#fb660a;font-weight:bold">else&lt;/span>:
squares.append(numbers[i])
&lt;span style="color:#080;background-color:#0f140f;font-style:italic"># Pythonic&lt;/span>
squares = [x * &lt;span style="color:#0086f7;font-weight:bold">2&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">if&lt;/span> x % &lt;span style="color:#0086f7;font-weight:bold">2&lt;/span> == &lt;span style="color:#0086f7;font-weight:bold">0&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">else&lt;/span> x &lt;span style="color:#fb660a;font-weight:bold">for&lt;/span> x in numbers]
&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="code-style">Code style&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="https://www.python.org/dev/peps/pep-0008/">PEP8&lt;/a> is the official style guide for Python:
&lt;ul>
&lt;li>use 4 spaces for indetation;&lt;/li>
&lt;li>define a maximum value for line length (around 80 characters);&lt;/li>
&lt;li>organize imports at beginning of file;&lt;/li>
&lt;li>surround binary operators with a single space on each side;&lt;/li>
&lt;li>&amp;hellip;&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Code style should be enforced upon creation by a tool like &lt;a href="https://github.com/psf/black">black&lt;/a>.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="beyond-pep8">Beyond PEP8&lt;/h3>
&lt;p>Focusing on style and PEP8-compliance might make you miss more fundamental code imperfections.&lt;/p>
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
&lt;iframe src="https://www.youtube.com/embed/wf-BqAjZb8M" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video">&lt;/iframe>
&lt;/div>
&lt;hr>
&lt;h3 id="code-linting">Code linting&lt;/h3>
&lt;ul>
&lt;li>&lt;em>Linting&lt;/em> is the process of checking code for syntactical and stylistic problems before execution.&lt;/li>
&lt;li>It is useful to catch errors and improve code quality in dynamically typed, interpreted languages, where there is no compiler.&lt;/li>
&lt;li>Several linters exist in the Python ecosystem. The most commonly used is &lt;a href="https://pylint.org/">pylint&lt;/a>.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="type-annotations">Type annotations&lt;/h3>
&lt;ul>
&lt;li>Added in Python 3.5, &lt;a href="https://www.python.org/dev/peps/pep-0484/">type annotations&lt;/a> allow to add type hints to code entities like variables or functions, bringing a statically typed flavour to the language.&lt;/li>
&lt;li>&lt;a href="http://mypy-lang.org/">mypy&lt;/a> can automatically check the code for annotation correctness.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#fb660a;font-weight:bold">def&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">greeting&lt;/span>(name: str) -&amp;gt; str:
&lt;span style="color:#fb660a;font-weight:bold">return&lt;/span> &lt;span style="color:#0086d2">&amp;#39;Hello &amp;#39;&lt;/span> + name
greeting(&lt;span style="color:#0086d2">&amp;#39;Alice&amp;#39;&lt;/span>) &lt;span style="color:#080;background-color:#0f140f;font-style:italic"># OK&lt;/span>
greeting(&lt;span style="color:#0086f7;font-weight:bold">3&lt;/span>) &lt;span style="color:#080;background-color:#0f140f;font-style:italic"># mypy error: incompatible type &amp;#34;int&amp;#34;; expected &amp;#34;str&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h2 id="packaging-and-dependency-management">Packaging and dependency management&lt;/h2>
&lt;hr>
&lt;h3 id="managing-dependencies-in-python">Managing dependencies in Python&lt;/h3>
&lt;ul>
&lt;li>Most Python apps depend on third-party libraries and frameworks (NumPy, Flask, Requests&amp;hellip;).&lt;/li>
&lt;li>These tools may also have external dependencies, and so on.&lt;/li>
&lt;li>&lt;strong>Dependency management&lt;/strong> is necessary to prevent version conflicts and incompatibilities. it involves two things:
&lt;ul>
&lt;li>a way for the app to declare its dependencies;&lt;/li>
&lt;li>a tool to resolve these dependencies and install compatible versions.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="semantic-versioning">Semantic versioning&lt;/h3>
&lt;ul>
&lt;li>Software versioning convention used in many ecosystems.&lt;/li>
&lt;li>A version number comes as a suite of three digits &lt;code>X.Y.Z&lt;/code>.
&lt;ul>
&lt;li>X = major version (potentially including breaking changes).&lt;/li>
&lt;li>Y = minor version (only non-breaking changes).&lt;/li>
&lt;li>Z = patch.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Digits are incremented as new versions are shipped.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="pip-and-requirementstxt">pip and requirements.txt&lt;/h3>
&lt;p>A &lt;code>requirements.txt&lt;/code> file is the most basic way of declaring dependencies in Python.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-txt" data-lang="txt">certifi&amp;gt;=2020.11.0
chardet==4.0.0
click&amp;gt;=6.5.0, &amp;lt;7.1
download==0.3.5
Flask&amp;gt;=1.1.0
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The &lt;a href="https://pypi.org/project/pip/">pip&lt;/a> package installer can read this file and act accordingly, downloading dependencies from &lt;a href="https://pypi.org/">PyPI&lt;/a>.&lt;/p>
&lt;p>&lt;code>&amp;gt; pip install -r requirements.txt&lt;/code>&lt;/p>
&lt;hr>
&lt;h3 id="virtual-environments">Virtual environments&lt;/h3>
&lt;ul>
&lt;li>A &lt;strong>virtual environment&lt;/strong> is an isolated Python environment where a project&amp;rsquo;s dependencies are installed.&lt;/li>
&lt;li>Using them prevents the risk of mixing dependencies required by different projects on the same machine.&lt;/li>
&lt;li>Several tools exist to manage virtual environments in Python, for example &lt;a href="https://virtualenv.pypa.io">virtualenv&lt;/a> and &lt;a href="https://docs.conda.io">conda&lt;/a>.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="conda-and-environmentyml">conda and environment.yml&lt;/h3>
&lt;p>Installed as part of the &lt;a href="https://www.anaconda.com/">Anaconda&lt;/a> distribution, the &lt;a href="https://docs.conda.io">conda&lt;/a> package manager reads an &lt;code>environment.yml&lt;/code> file to install the dependencies associated to a specific virtual environment.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#fb660a;font-weight:bold">name&lt;/span>:&lt;span style="color:#888"> &lt;/span>example-env&lt;span style="color:#888">
&lt;/span>&lt;span style="color:#888">
&lt;/span>&lt;span style="color:#888">&lt;/span>&lt;span style="color:#fb660a;font-weight:bold">channels&lt;/span>:&lt;span style="color:#888">
&lt;/span>&lt;span style="color:#888"> &lt;/span>- conda-forge&lt;span style="color:#888">
&lt;/span>&lt;span style="color:#888"> &lt;/span>- defaults&lt;span style="color:#888">
&lt;/span>&lt;span style="color:#888">
&lt;/span>&lt;span style="color:#888">&lt;/span>&lt;span style="color:#fb660a;font-weight:bold">dependencies&lt;/span>:&lt;span style="color:#888">
&lt;/span>&lt;span style="color:#888"> &lt;/span>- python=3.7&lt;span style="color:#888">
&lt;/span>&lt;span style="color:#888"> &lt;/span>- matplotlib&lt;span style="color:#888">
&lt;/span>&lt;span style="color:#888"> &lt;/span>- numpy&lt;span style="color:#888">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="poetry">Poetry&lt;/h3>
&lt;p>Based on a &lt;code>pyproject.toml&lt;/code> file, &lt;a href="https://python-poetry.org">Poetry&lt;/a> is a recent virtual environment, packaging and dependency management tool for Python.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#080;background-color:#0f140f;font-style:italic"># Create a new poetry-compliant project&lt;/span>
poetry new &amp;lt;project name&amp;gt;
&lt;span style="color:#080;background-color:#0f140f;font-style:italic"># Initialize an already existing project&lt;/span>
poetry init
&lt;span style="color:#080;background-color:#0f140f;font-style:italic"># Install defined dependencies&lt;/span>
poetry install
&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="the-pyprojecttoml-file">The pyproject.toml file&lt;/h3>
&lt;p>Soon-to-be standard for configuring Python projects.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-toml" data-lang="toml">[tool.poetry]
name = &lt;span style="color:#0086d2">&amp;#34;propetry example&amp;#34;&lt;/span>
version = &lt;span style="color:#0086d2">&amp;#34;0.1.0&amp;#34;&lt;/span>
description = &lt;span style="color:#0086d2">&amp;#34;&amp;#34;&lt;/span>
[tool.poetry.dependencies]
python = &lt;span style="color:#0086d2">&amp;#34;^3.7&amp;#34;&lt;/span>
jupyter = &lt;span style="color:#0086d2">&amp;#34;^1.0.0&amp;#34;&lt;/span>
matplotlib = &lt;span style="color:#0086d2">&amp;#34;^3.3.2&amp;#34;&lt;/span>
sklearn = &lt;span style="color:#0086d2">&amp;#34;^0.0&amp;#34;&lt;/span>
pandas = &lt;span style="color:#0086d2">&amp;#34;^1.1.3&amp;#34;&lt;/span>
ipython = &lt;span style="color:#0086d2">&amp;#34;^7.0.0&amp;#34;&lt;/span>
[tool.poetry.dev-dependencies]
pytest = &lt;span style="color:#0086d2">&amp;#34;^6.1.1&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="caret-requirements">Caret requirements&lt;/h3>
&lt;p>Offers a way to precisely define dependency versions.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Requirement&lt;/th>
&lt;th style="text-align:center">Versions allowed&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">^1.2.3&lt;/td>
&lt;td style="text-align:center">&amp;gt;=1.2.3 &amp;lt;2.0.0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">^1.2&lt;/td>
&lt;td style="text-align:center">&amp;gt;=1.2.0 &amp;lt;2.0.0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">~1.2.3&lt;/td>
&lt;td style="text-align:center">&amp;gt;=1.2.3 &amp;lt;1.3.0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">~1.2&lt;/td>
&lt;td style="text-align:center">&amp;gt;=1.2.0 &amp;lt;1.3.0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">1.2.3&lt;/td>
&lt;td style="text-align:center">1.2.3 only&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;hr>
&lt;h3 id="the-poetrylock-file">The poetry.lock file&lt;/h3>
&lt;ul>
&lt;li>The first time Poetry install dependencies, it creates a &lt;code>poetry.lock&lt;/code> file that contains the exact versions of all installed packages.&lt;/li>
&lt;li>Subsequent installs will use these exact versions to ensure consistency.&lt;/li>
&lt;li>Removing this file and running another Poetry install will fetch the latest matching versions.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="working-with-notebooks">Working with notebooks&lt;/h2>
&lt;hr>
&lt;p>TODO&lt;/p></description></item><item><title>React Native</title><link>https://www.bpesquet.fr/slides/react-native/</link><pubDate>Wed, 27 Oct 2021 13:48:28 +0200</pubDate><guid>https://www.bpesquet.fr/slides/react-native/</guid><description>&lt;h2 id="sommaire">Sommaire&lt;/h2>
&lt;ul>
&lt;li>Introduction&lt;/li>
&lt;li>Gestion de l&amp;rsquo;UI&lt;/li>
&lt;li>Gestion de l&amp;rsquo;état&lt;/li>
&lt;li>Utilisation d&amp;rsquo;API web&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;hr>
&lt;h3 id="lécosystème-mobile">L&amp;rsquo;écosystème mobile&lt;/h3>
&lt;ul>
&lt;li>Absence de monopole.&lt;/li>
&lt;li>Deux poids lourds : Android et iOS.&lt;/li>
&lt;li>Parts de marché stables depuis plusieurs années.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;p>&lt;img src="images/smartphone_market_share_2016.jpg" alt="Smartphone platform market share">&lt;/p>
&lt;hr>
&lt;p>&lt;img src="images/market-share-2015_2019.png" alt="Market share evolution 2015-2019">&lt;/p>
&lt;hr>
&lt;p>&lt;img src="images/os-fragmentation_2018.jpg" alt="Mobile OS Fragmentation">&lt;/p>
&lt;hr>
&lt;section data-shortcode-section>
&lt;h3 id="développement-mobile-natif">Développement mobile natif&lt;/h3>
&lt;p>Création d&amp;rsquo;applications en utilisant la technologie prévue par le concepteur de l&amp;rsquo;OS.&lt;/p>
&lt;ul>
&lt;li>Android : Java&lt;/li>
&lt;li>IOS : Objective-C ou Swift&lt;/li>
&lt;/ul>
&lt;p class='fragment '
>
Ces technologies sont &lt;strong>incompatibles&lt;/strong>.
&lt;/p>
&lt;hr>
&lt;h3 id="avantages">Avantages&lt;/h3>
&lt;ul>
&lt;li>Accès à l&amp;rsquo;intégralité des fonctionnalités matérielles et logicielles du terminal mobile.&lt;/li>
&lt;li>Performances optimales.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="inconvénient-majeur-">Inconvénient (majeur !)&lt;/h3>
&lt;p>Nécessité de créer puis de faire évoluer une application pour chaque environnement.&lt;/p>
&lt;/section>
&lt;hr>
&lt;section data-shortcode-section>
&lt;h3 id="solutions-hybrides">Solutions hybrides&lt;/h3>
&lt;p>Création d&amp;rsquo;applications mobiles compatibles avec plusieurs OS mobiles grâce à un framework dédié.&lt;/p>
&lt;p>Une application hybride est une application web qui s&amp;rsquo;exécute à l&amp;rsquo;intérieur d&amp;rsquo;un navigateur.&lt;/p>
&lt;p>Exemples : &lt;a href="https://cordova.apache.org">Apache Cordova&lt;/a>, &lt;a href="https://ionicframework.com">Ionic&lt;/a>&lt;/p>
&lt;hr>
&lt;h3 id="avantages">Avantages&lt;/h3>
&lt;ul>
&lt;li>Fonctionnalités et performances proches de celles d&amp;rsquo;une application native.&lt;/li>
&lt;li>Economies de ressources pour créer l&amp;rsquo;application.&lt;/li>
&lt;li>Une seule base de code : maintenance et évolution facilitées.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="inconvénients">Inconvénients&lt;/h3>
&lt;ul>
&lt;li>Impossible d&amp;rsquo;accéder à certaines fonctionnalités matérielles ou logicielles spécifiques.&lt;/li>
&lt;li>&lt;em>Look&amp;rsquo;n&amp;rsquo;feel&lt;/em> non natif.&lt;/li>
&lt;li>Mauvaises performances dans certains scenarii.&lt;/li>
&lt;/ul>
&lt;/section>
&lt;hr>
&lt;section data-shortcode-section>
&lt;h3 id="développement-natif-multi-plateformes">Développement natif multi-plateformes&lt;/h3>
&lt;p>Création d&amp;rsquo;applications mobiles compatibles avec plusieurs OS mobiles grâce à un framework dédié.&lt;/p>
&lt;p>Le framework encapsule les véritables composants natifs de l&amp;rsquo;OS.&lt;/p>
&lt;p>Exemples : &lt;a href="https://facebook.github.io/react-native/">React Native&lt;/a>, &lt;a href="https://weex.apache.org/">Weex&lt;/a>, &lt;a href="https://www.visualstudio.com/fr/xamarin/">Xamarin&lt;/a>&lt;/p>
&lt;hr>
&lt;h3 id="le-meilleur-des-deux-mondes-">Le meilleur des deux mondes ?&lt;/h3>
&lt;p>Combine les avantages du natif (&lt;em>look&amp;rsquo;n&amp;rsquo;feel&lt;/em>, performances) et de l&amp;rsquo;hybride (une seule base de code).&lt;/p>
&lt;p>Limite potentielle : le support de l&amp;rsquo;OS dépend entièrement du framework.&lt;/p>
&lt;/section>
&lt;hr>
&lt;h3 id="react-native">React Native&lt;/h3>
&lt;p>Framework créé par Facebook, open source depuis 2015.&lt;/p>
&lt;p>Déclinaison mobile du framework JavaScript &lt;a href="https://reactjs.org/">React&lt;/a>.&lt;/p>
&lt;p>&lt;img src="images/reactjs.png" alt="React logo">&lt;/p>
&lt;hr>
&lt;h3 id="expo">Expo&lt;/h3>
&lt;p>Framework pour faciliter la création et le déploiement d&amp;rsquo;applications React Native.&lt;/p>
&lt;p>&lt;img src="images/expo_logo.png" alt="Expo logo">&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/expo/expo-cli">Expo CLI&lt;/a> : outil en ligne de commande pour le développement local.&lt;/li>
&lt;li>&lt;a href="https://expo.io">Expo client&lt;/a> : application mobile à installer sur le terminal cible pour le déploiement.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="création-dune-application">Création d&amp;rsquo;une application&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#080;background-color:#0f140f;font-style:italic"># Install expo-cli globally&lt;/span>
&lt;span style="color:#080;background-color:#0f140f;font-style:italic"># (Node.js and Git are prerequisites)&lt;/span>
npm install -g expo-cli
&lt;span style="color:#080;background-color:#0f140f;font-style:italic"># Create a new app in the my-new-project subfolder&lt;/span>
&lt;span style="color:#080;background-color:#0f140f;font-style:italic"># Use managed TypeScript template&lt;/span>
expo init my-new-project -t expo-template-blank-typescript
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>
&lt;p>Workflow &lt;em>managé&lt;/em> : projet entièrement géré par Expo (plus simple).&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Workflow &lt;em>bare&lt;/em> : plus proche d&amp;rsquo;un projet React Native pur.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="contenu-du-répertoire-créé">Contenu du répertoire créé&lt;/h3>
&lt;p>&lt;img src="images/rn-app-structure.png" alt="Arborescence React Native">&lt;/p>
&lt;hr>
&lt;h3 id="déploiement-de-lapplication">Déploiement de l&amp;rsquo;application&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">cd my-new-project &lt;span style="color:#080;background-color:#0f140f;font-style:italic"># move into project directory&lt;/span>
npm start &lt;span style="color:#080;background-color:#0f140f;font-style:italic"># Or &amp;#39;expo start&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Ensuite, scan du QR Code depuis l&amp;rsquo;application Expo (Android) ou l&amp;rsquo;appareil photo du smartphone (iOS).&lt;/p>
&lt;p>&lt;img src="images/expo_qrcode.png" alt="Expo QR Code">&lt;/p>
&lt;hr>
&lt;h3 id="détails-sur-le-déploiement">Détails sur le déploiement&lt;/h3>
&lt;ul>
&lt;li>L&amp;rsquo;application est hébergée sur un serveur web local.&lt;/li>
&lt;li>Expo s&amp;rsquo;y connecte pour la récupérer puis la lancer.&lt;/li>
&lt;li>Une interface web de gestion s&amp;rsquo;affiche.&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="images/expo_management.png" alt="Expo Management">&lt;/p>
&lt;hr>
&lt;h3 id="rechargement-dynamique">Rechargement dynamique&lt;/h3>
&lt;p>&lt;a href="https://openclassrooms.com/fr/courses/4902061-developpez-une-application-mobile-react-native/">&lt;img src="images/expo_reload.jpeg" alt="Live Reload">&lt;/a>&lt;/p>
&lt;hr>
&lt;h3 id="connexion-au-serveur-expo">Connexion au serveur Expo&lt;/h3>
&lt;p>L&amp;rsquo;application mobile Expo client doit accéder au serveur web de la machine de développement pour pouvoir lancer l&amp;rsquo;application RN.&lt;/p>
&lt;p>Il existe plusieurs modes de connexion :&lt;/p>
&lt;ul>
&lt;li>&lt;strong>LAN&lt;/strong> : utilisation du réseau Wifi local. Peut poser problème dans certains environnements Wifi sécurisés.&lt;/li>
&lt;li>&lt;strong>Tunnel&lt;/strong> : création d&amp;rsquo;un tunnel avec &lt;a href="https://ngrok.com/">ngrok&lt;/a> pour accéder au serveur local via le web. Nécessite que le terminal mobile dispose d&amp;rsquo;un accès internet.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="utilisation-dun-émulateur">Utilisation d&amp;rsquo;un émulateur&lt;/h3>
&lt;ul>
&lt;li>Alternative à l&amp;rsquo;emploi d&amp;rsquo;un terminal mobile pour tester l&amp;rsquo;application RN.&lt;/li>
&lt;li>Nécessite l&amp;rsquo;installation de &lt;a href="https://developer.apple.com/xcode/">XCode (iOS)&lt;/a> ou &lt;a href="https://developer.android.com/studio">Android Studio&lt;/a> sur le machine de développement.&lt;/li>
&lt;li>Documentation : &lt;a href="https://docs.expo.io/workflow/ios-simulator/">iOS&lt;/a> | &lt;a href="https://docs.expo.io/workflow/android-studio-emulator/">Android&lt;/a>.&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="images/expo-emulator.png" alt="Expo emulator">&lt;/p>
&lt;hr>
&lt;h3 id="le-fichier-de-configuration-appjson">Le fichier de configuration app.json&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-json" data-lang="json">{
&lt;span style="color:#fb660a;font-weight:bold">&amp;#34;expo&amp;#34;&lt;/span>: {
&lt;span style="color:#fb660a;font-weight:bold">&amp;#34;name&amp;#34;&lt;/span>: &lt;span style="color:#0086d2">&amp;#34;My New Project&amp;#34;&lt;/span>,
&lt;span style="color:#fb660a;font-weight:bold">&amp;#34;slug&amp;#34;&lt;/span>: &lt;span style="color:#0086d2">&amp;#34;my-new-project&amp;#34;&lt;/span>,
&lt;span style="color:#fb660a;font-weight:bold">&amp;#34;version&amp;#34;&lt;/span>: &lt;span style="color:#0086d2">&amp;#34;1.0.0&amp;#34;&lt;/span>,
&lt;span style="color:#fb660a;font-weight:bold">&amp;#34;orientation&amp;#34;&lt;/span>: &lt;span style="color:#0086d2">&amp;#34;portrait&amp;#34;&lt;/span>,
&lt;span style="color:#fb660a;font-weight:bold">&amp;#34;icon&amp;#34;&lt;/span>: &lt;span style="color:#0086d2">&amp;#34;./assets/icon.png&amp;#34;&lt;/span>,
&lt;span style="color:#fb660a;font-weight:bold">&amp;#34;splash&amp;#34;&lt;/span>: {
&lt;span style="color:#fb660a;font-weight:bold">&amp;#34;image&amp;#34;&lt;/span>: &lt;span style="color:#0086d2">&amp;#34;./assets/splash.png&amp;#34;&lt;/span>,
&lt;span style="color:#fb660a;font-weight:bold">&amp;#34;resizeMode&amp;#34;&lt;/span>: &lt;span style="color:#0086d2">&amp;#34;contain&amp;#34;&lt;/span>,
&lt;span style="color:#fb660a;font-weight:bold">&amp;#34;backgroundColor&amp;#34;&lt;/span>: &lt;span style="color:#0086d2">&amp;#34;#ffffff&amp;#34;&lt;/span>
},
&lt;span style="color:#fb660a;font-weight:bold">&amp;#34;updates&amp;#34;&lt;/span>: {
&lt;span style="color:#fb660a;font-weight:bold">&amp;#34;fallbackToCacheTimeout&amp;#34;&lt;/span>: &lt;span style="color:#0086f7;font-weight:bold">0&lt;/span>
},
&lt;span style="color:#fb660a;font-weight:bold">&amp;#34;assetBundlePatterns&amp;#34;&lt;/span>: [&lt;span style="color:#0086d2">&amp;#34;**/*&amp;#34;&lt;/span>],
&lt;span style="color:#fb660a;font-weight:bold">&amp;#34;ios&amp;#34;&lt;/span>: {
&lt;span style="color:#fb660a;font-weight:bold">&amp;#34;supportsTablet&amp;#34;&lt;/span>: &lt;span style="color:#fb660a;font-weight:bold">true&lt;/span>
},
&lt;span style="color:#fb660a;font-weight:bold">&amp;#34;android&amp;#34;&lt;/span>: {
&lt;span style="color:#fb660a;font-weight:bold">&amp;#34;adaptiveIcon&amp;#34;&lt;/span>: {
&lt;span style="color:#fb660a;font-weight:bold">&amp;#34;foregroundImage&amp;#34;&lt;/span>: &lt;span style="color:#0086d2">&amp;#34;./assets/adaptive-icon.png&amp;#34;&lt;/span>,
&lt;span style="color:#fb660a;font-weight:bold">&amp;#34;backgroundColor&amp;#34;&lt;/span>: &lt;span style="color:#0086d2">&amp;#34;#FFFFFF&amp;#34;&lt;/span>
}
},
&lt;span style="color:#fb660a;font-weight:bold">&amp;#34;web&amp;#34;&lt;/span>: {
&lt;span style="color:#fb660a;font-weight:bold">&amp;#34;favicon&amp;#34;&lt;/span>: &lt;span style="color:#0086d2">&amp;#34;./assets/favicon.png&amp;#34;&lt;/span>
}
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="le-fichier-packagejson">Le fichier package.json&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-json" data-lang="json">{
&lt;span style="color:#fb660a;font-weight:bold">&amp;#34;main&amp;#34;&lt;/span>: &lt;span style="color:#0086d2">&amp;#34;node_modules/expo/AppEntry.js&amp;#34;&lt;/span>,
&lt;span style="color:#fb660a;font-weight:bold">&amp;#34;scripts&amp;#34;&lt;/span>: {
&lt;span style="color:#fb660a;font-weight:bold">&amp;#34;start&amp;#34;&lt;/span>: &lt;span style="color:#0086d2">&amp;#34;expo start&amp;#34;&lt;/span>,
&lt;span style="color:#fb660a;font-weight:bold">&amp;#34;android&amp;#34;&lt;/span>: &lt;span style="color:#0086d2">&amp;#34;expo start --android&amp;#34;&lt;/span>,
&lt;span style="color:#fb660a;font-weight:bold">&amp;#34;ios&amp;#34;&lt;/span>: &lt;span style="color:#0086d2">&amp;#34;expo start --ios&amp;#34;&lt;/span>,
&lt;span style="color:#fb660a;font-weight:bold">&amp;#34;web&amp;#34;&lt;/span>: &lt;span style="color:#0086d2">&amp;#34;expo start --web&amp;#34;&lt;/span>,
&lt;span style="color:#fb660a;font-weight:bold">&amp;#34;eject&amp;#34;&lt;/span>: &lt;span style="color:#0086d2">&amp;#34;expo eject&amp;#34;&lt;/span>
},
&lt;span style="color:#fb660a;font-weight:bold">&amp;#34;dependencies&amp;#34;&lt;/span>: {
&lt;span style="color:#fb660a;font-weight:bold">&amp;#34;expo&amp;#34;&lt;/span>: &lt;span style="color:#0086d2">&amp;#34;~40.0.0&amp;#34;&lt;/span>,
&lt;span style="color:#fb660a;font-weight:bold">&amp;#34;expo-status-bar&amp;#34;&lt;/span>: &lt;span style="color:#0086d2">&amp;#34;~1.0.3&amp;#34;&lt;/span>,
&lt;span style="color:#fb660a;font-weight:bold">&amp;#34;react&amp;#34;&lt;/span>: &lt;span style="color:#0086d2">&amp;#34;16.13.1&amp;#34;&lt;/span>,
&lt;span style="color:#fb660a;font-weight:bold">&amp;#34;react-dom&amp;#34;&lt;/span>: &lt;span style="color:#0086d2">&amp;#34;16.13.1&amp;#34;&lt;/span>,
&lt;span style="color:#fb660a;font-weight:bold">&amp;#34;react-native&amp;#34;&lt;/span>: &lt;span style="color:#0086d2">&amp;#34;https://github.com/expo/react-native/archive/sdk-40.0.1.tar.gz&amp;#34;&lt;/span>,
&lt;span style="color:#fb660a;font-weight:bold">&amp;#34;react-native-web&amp;#34;&lt;/span>: &lt;span style="color:#0086d2">&amp;#34;~0.13.12&amp;#34;&lt;/span>
},
&lt;span style="color:#fb660a;font-weight:bold">&amp;#34;devDependencies&amp;#34;&lt;/span>: {
&lt;span style="color:#fb660a;font-weight:bold">&amp;#34;@babel/core&amp;#34;&lt;/span>: &lt;span style="color:#0086d2">&amp;#34;~7.9.0&amp;#34;&lt;/span>,
&lt;span style="color:#fb660a;font-weight:bold">&amp;#34;@types/react&amp;#34;&lt;/span>: &lt;span style="color:#0086d2">&amp;#34;~16.9.35&amp;#34;&lt;/span>,
&lt;span style="color:#fb660a;font-weight:bold">&amp;#34;@types/react-dom&amp;#34;&lt;/span>: &lt;span style="color:#0086d2">&amp;#34;~16.9.8&amp;#34;&lt;/span>,
&lt;span style="color:#fb660a;font-weight:bold">&amp;#34;@types/react-native&amp;#34;&lt;/span>: &lt;span style="color:#0086d2">&amp;#34;~0.63.2&amp;#34;&lt;/span>,
&lt;span style="color:#fb660a;font-weight:bold">&amp;#34;typescript&amp;#34;&lt;/span>: &lt;span style="color:#0086d2">&amp;#34;~4.0.0&amp;#34;&lt;/span>
},
&lt;span style="color:#fb660a;font-weight:bold">&amp;#34;private&amp;#34;&lt;/span>: &lt;span style="color:#fb660a;font-weight:bold">true&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="le-fichier-principal-apptsx">Le fichier principal App.tsx&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-tsx" data-lang="tsx">&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> { StatusBar } &lt;span style="color:#fb660a;font-weight:bold">from&lt;/span> &lt;span style="color:#0086d2">&amp;#34;expo-status-bar&amp;#34;&lt;/span>;
&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> React &lt;span style="color:#fb660a;font-weight:bold">from&lt;/span> &lt;span style="color:#0086d2">&amp;#34;react&amp;#34;&lt;/span>;
&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> { StyleSheet, Text, View } &lt;span style="color:#fb660a;font-weight:bold">from&lt;/span> &lt;span style="color:#0086d2">&amp;#34;react-native&amp;#34;&lt;/span>;
&lt;span style="color:#fb660a;font-weight:bold">export&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">default&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">function&lt;/span> App() {
&lt;span style="color:#fb660a;font-weight:bold">return&lt;/span> (
&amp;lt;&lt;span style="color:#fb660a;font-weight:bold">View&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">style&lt;/span>={styles.container}&amp;gt;
&amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Text&lt;/span>&amp;gt;Open up App.tsx to start working on your app!&amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">Text&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#fb660a;font-weight:bold">StatusBar&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">style&lt;/span>=&lt;span style="color:#0086d2">&amp;#34;auto&amp;#34;&lt;/span> /&amp;gt;
&amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">View&lt;/span>&amp;gt;
);
}
&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> styles = StyleSheet.create({
container: {
flex: &lt;span style="color:#cdcaa9;font-weight:bold">1&lt;/span>,
backgroundColor: &lt;span style="color:#0086d2">&amp;#34;#fff&amp;#34;&lt;/span>,
alignItems: &lt;span style="color:#0086d2">&amp;#34;center&amp;#34;&lt;/span>,
justifyContent: &lt;span style="color:#0086d2">&amp;#34;center&amp;#34;&lt;/span>,
},
});
&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="les-formats-jsx-et-tsx">Les formats JSX et TSX&lt;/h3>
&lt;ul>
&lt;li>Syntaxe introduite pour le framework web &lt;a href="https://reactjs.org/">React&lt;/a>.&lt;/li>
&lt;li>Permet de décrire une UI en intégrant balisage et logique applicative.&lt;/li>
&lt;li>TSX : équivalent de JSX avec support de TypeScript.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-jsx" data-lang="jsx">&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// JSX for React (web)
&lt;/span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> name = &lt;span style="color:#0086d2">&amp;#34;Clarisse Agbegnenou&amp;#34;&lt;/span>;
&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> element = &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">h1&lt;/span>&amp;gt;Hello, {name}&amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">h1&lt;/span>&amp;gt;;
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-jsx" data-lang="jsx">&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// JSX for React Native (mobile)
&lt;/span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> a = &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">View&lt;/span> /&amp;gt;;
&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> b = (
&amp;lt;&lt;span style="color:#fb660a;font-weight:bold">View&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">foo&lt;/span>=&lt;span style="color:#0086d2">&amp;#34;hello&amp;#34;&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">bar&lt;/span>={baz}&amp;gt;
&amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Text&lt;/span>&amp;gt;&lt;span style="color:#0086f7;font-weight:bold">42&lt;/span>&amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">Text&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">View&lt;/span>&amp;gt;
);
&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="la-notion-de-composant">La notion de composant&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>Les &lt;strong>composants&lt;/strong> sont les blocs de base d&amp;rsquo;une application React (Native).&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Ils permettent de créer une UI sous forme &lt;strong>déclarative&lt;/strong> par assemblage de composants.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Ils doivent comporter une fonction qui définit leur rendu visuel.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="composants-fonctions">Composants fonctions&lt;/h3>
&lt;ul>
&lt;li>La valeur de retour de la fonction définit le rendu.&lt;/li>
&lt;li>Syntaxe la plus concise, pratique pour les composants simples.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-tsx" data-lang="tsx">&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> React &lt;span style="color:#fb660a;font-weight:bold">from&lt;/span> &lt;span style="color:#0086d2">&amp;#34;react&amp;#34;&lt;/span>;
&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> { Text } &lt;span style="color:#fb660a;font-weight:bold">from&lt;/span> &lt;span style="color:#0086d2">&amp;#34;react-native&amp;#34;&lt;/span>;
&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> Cat = () =&amp;gt; {
&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> name = &lt;span style="color:#0086d2">&amp;#34;Maru&amp;#34;&lt;/span>;
&lt;span style="color:#fb660a;font-weight:bold">return&lt;/span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Text&lt;/span>&amp;gt;Hello, I am {name}!&amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">Text&lt;/span>&amp;gt;;
};
&lt;span style="color:#fb660a;font-weight:bold">export&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">default&lt;/span> Cat;
&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="composants-classes">Composants classes&lt;/h3>
&lt;ul>
&lt;li>La méthode &lt;code>render()&lt;/code> définit le rendu.&lt;/li>
&lt;li>Syntaxe à privilégier pour les composants complexes.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-tsx" data-lang="tsx">&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> React &lt;span style="color:#fb660a;font-weight:bold">from&lt;/span> &lt;span style="color:#0086d2">&amp;#34;react&amp;#34;&lt;/span>;
&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> { Text } &lt;span style="color:#fb660a;font-weight:bold">from&lt;/span> &lt;span style="color:#0086d2">&amp;#34;react-native&amp;#34;&lt;/span>;
&lt;span style="color:#fb660a;font-weight:bold">class&lt;/span> Cat &lt;span style="color:#fb660a;font-weight:bold">extends&lt;/span> React.Component {
render() {
&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> name = &lt;span style="color:#0086d2">&amp;#34;Maru&amp;#34;&lt;/span>;
&lt;span style="color:#fb660a;font-weight:bold">return&lt;/span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Text&lt;/span>&amp;gt;Hello, I am {name}!&amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">Text&lt;/span>&amp;gt;;
}
}
&lt;span style="color:#fb660a;font-weight:bold">export&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">default&lt;/span> Cat;
&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="propriétés-_props_-dun-composant">Propriétés (&lt;em>props&lt;/em>) d&amp;rsquo;un composant&lt;/h3>
&lt;p>Caractéristiques définies au moment de la création, modifiables uniquement par le composant parent (&lt;a href="https://snack.expo.io/@bpesquet/greeting">démo&lt;/a>).&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-tsx" data-lang="tsx">&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> React, { Component } &lt;span style="color:#fb660a;font-weight:bold">from&lt;/span> &lt;span style="color:#0086d2">&amp;#34;react&amp;#34;&lt;/span>;
&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> { Text, View } &lt;span style="color:#fb660a;font-weight:bold">from&lt;/span> &lt;span style="color:#0086d2">&amp;#34;react-native&amp;#34;&lt;/span>;
&lt;span style="color:#fb660a;font-weight:bold">class&lt;/span> Greeting &lt;span style="color:#fb660a;font-weight:bold">extends&lt;/span> Component {
&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Component has a name property which is of type string
&lt;/span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">constructor&lt;/span>(&lt;span style="color:#fb660a;font-weight:bold">public&lt;/span> props: { name: &lt;span style="color:#cdcaa9;font-weight:bold">string&lt;/span> }) {
&lt;span style="color:#fb660a;font-weight:bold">super&lt;/span>(props);
}
render() {
&lt;span style="color:#fb660a;font-weight:bold">return&lt;/span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Text&lt;/span>&amp;gt;Hello {&lt;span style="color:#fb660a;font-weight:bold">this&lt;/span>.props.name}!&amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">Text&lt;/span>&amp;gt;;
}
}
&lt;span style="color:#fb660a;font-weight:bold">export&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">default&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">class&lt;/span> LotsOfGreetings &lt;span style="color:#fb660a;font-weight:bold">extends&lt;/span> Component {
render() {
&lt;span style="color:#fb660a;font-weight:bold">return&lt;/span> (
&amp;lt;&lt;span style="color:#fb660a;font-weight:bold">View&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">style&lt;/span>={{ alignItems: &lt;span style="color:#0086d2">&amp;#34;center&amp;#34;&lt;/span> }}&amp;gt;
&amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Greeting&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">name&lt;/span>=&lt;span style="color:#0086d2">&amp;#34;John&amp;#34;&lt;/span> /&amp;gt;
&amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Greeting&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">name&lt;/span>=&lt;span style="color:#0086d2">&amp;#34;Paul&amp;#34;&lt;/span> /&amp;gt;
&amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Greeting&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">name&lt;/span>=&lt;span style="color:#0086d2">&amp;#34;Jones&amp;#34;&lt;/span> /&amp;gt;
&amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">View&lt;/span>&amp;gt;
);
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="etat-_state_-dun-composant">Etat (&lt;em>state&lt;/em>) d&amp;rsquo;un composant&lt;/h3>
&lt;p>Etat interne (données) d&amp;rsquo;un composant, susceptible de changer au cours du temps (mutable). Modifié uniquement via &lt;code>setState()&lt;/code> (&lt;a href="https://snack.expo.io/@bpesquet/counter">démo&lt;/a>).&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-tsx" data-lang="tsx">&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> React, { Component } &lt;span style="color:#fb660a;font-weight:bold">from&lt;/span> &lt;span style="color:#0086d2">&amp;#34;react&amp;#34;&lt;/span>;
&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> { StyleSheet, Text, View } &lt;span style="color:#fb660a;font-weight:bold">from&lt;/span> &lt;span style="color:#0086d2">&amp;#34;react-native&amp;#34;&lt;/span>;
&lt;span style="color:#fb660a;font-weight:bold">interface&lt;/span> CoounterState {
count: &lt;span style="color:#cdcaa9;font-weight:bold">number&lt;/span>;
}
&lt;span style="color:#fb660a;font-weight:bold">class&lt;/span> Counter &lt;span style="color:#fb660a;font-weight:bold">extends&lt;/span> Component&amp;lt;{}, CoounterState&amp;gt; {
&lt;span style="color:#fb660a;font-weight:bold">constructor&lt;/span>(&lt;span style="color:#fb660a;font-weight:bold">public&lt;/span> props: { color: &lt;span style="color:#cdcaa9;font-weight:bold">string&lt;/span>; size: &lt;span style="color:#cdcaa9;font-weight:bold">number&lt;/span> }) {
&lt;span style="color:#fb660a;font-weight:bold">super&lt;/span>(props);
&lt;span style="color:#fb660a;font-weight:bold">this&lt;/span>.state = { count: &lt;span style="color:#cdcaa9;font-weight:bold">0&lt;/span> };
setInterval(() =&amp;gt; {
&lt;span style="color:#fb660a;font-weight:bold">this&lt;/span>.setState({ count: &lt;span style="color:#cdcaa9;font-weight:bold">this.state.count&lt;/span> + &lt;span style="color:#0086f7;font-weight:bold">1&lt;/span> });
}, &lt;span style="color:#0086f7;font-weight:bold">1000&lt;/span>);
}
render() {
&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> { count } = &lt;span style="color:#fb660a;font-weight:bold">this&lt;/span>.state;
&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> { color, size } = &lt;span style="color:#fb660a;font-weight:bold">this&lt;/span>.props;
&lt;span style="color:#fb660a;font-weight:bold">return&lt;/span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Text&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">style&lt;/span>={{ color, fontSize: &lt;span style="color:#cdcaa9;font-weight:bold">size&lt;/span> }}&amp;gt;{count}&amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">Text&lt;/span>&amp;gt;;
}
}
&lt;span style="color:#fb660a;font-weight:bold">export&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">default&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">class&lt;/span> CounterApp &lt;span style="color:#fb660a;font-weight:bold">extends&lt;/span> Component {
render() {
&lt;span style="color:#fb660a;font-weight:bold">return&lt;/span> (
&amp;lt;&lt;span style="color:#fb660a;font-weight:bold">View&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">style&lt;/span>={styles.container}&amp;gt;
&amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Counter&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">color&lt;/span>=&lt;span style="color:#0086d2">&amp;#34;red&amp;#34;&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">size&lt;/span>={&lt;span style="color:#0086f7;font-weight:bold">50&lt;/span>} /&amp;gt;
&amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">View&lt;/span>&amp;gt;
);
}
}
&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> styles = StyleSheet.create({
container: {
flex: &lt;span style="color:#cdcaa9;font-weight:bold">1&lt;/span>,
backgroundColor: &lt;span style="color:#0086d2">&amp;#34;#fff&amp;#34;&lt;/span>,
alignItems: &lt;span style="color:#0086d2">&amp;#34;center&amp;#34;&lt;/span>,
justifyContent: &lt;span style="color:#0086d2">&amp;#34;center&amp;#34;&lt;/span>,
},
});
&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="composants-de-base">Composants de base&lt;/h3>
&lt;p>&lt;img src="images/basic_components.png" alt="React Native core components">&lt;/p>
&lt;hr>
&lt;h3 id="composants-dinterface-utilisateur">Composants d&amp;rsquo;interface utilisateur&lt;/h3>
&lt;p>&lt;img src="images/ui_components.png" alt="React native UI components">&lt;/p>
&lt;hr>
&lt;h2 id="gestion-de-lui">Gestion de l&amp;rsquo;UI&lt;/h2>
&lt;hr>
&lt;h3 id="cycle-de-vie-dun-composant">Cycle de vie d&amp;rsquo;un composant&lt;/h3>
&lt;p>Les composants RN suivent un cycle de vie bien défini composé d&amp;rsquo;étapes : &lt;strong>montage&lt;/strong>, &lt;strong>rendu&lt;/strong>, &lt;strong>mise à jour&lt;/strong>, &lt;strong>démontage&lt;/strong> et &lt;strong>suppression&lt;/strong>.&lt;/p>
&lt;p>&lt;a href="http://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/">&lt;img src="images/react-lifecycle.png" alt="React lifecycle">&lt;/a>&lt;/p>
&lt;hr>
&lt;h3 id="méthodes-liées-au-cycle-de-vie">Méthodes liées au cycle de vie&lt;/h3>
&lt;p>Les redéfinir permet d&amp;rsquo;exécuter du code spécifique.&lt;/p>
&lt;ol>
&lt;li>&lt;code>constructor(props)&lt;/code> : initialisation des propriétés et de l&amp;rsquo;état.&lt;/li>
&lt;li>&lt;code>render()&lt;/code> : renvoi d&amp;rsquo;un élément React Native.&lt;/li>
&lt;li>&lt;code>componentDidMount()&lt;/code> : appels asynchrones.&lt;/li>
&lt;li>&lt;code>shouldComponentUpdate()&lt;/code> : renvoi d&amp;rsquo;un booléen pour annuler la mise à jour.&lt;/li>
&lt;li>&lt;code>componentDidUpdate()&lt;/code> : actions après la mise à jour du rendu.&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h3 id="gestion-du-style">Gestion du style&lt;/h3>
&lt;p>Propriété &lt;code>style&lt;/code> pour les composants de base.&lt;/p>
&lt;p>Semblable à CSS avec nommage &lt;em>camelCase&lt;/em>.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-jsx" data-lang="jsx">&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> React, { Component } from &lt;span style="color:#0086d2">&amp;#34;react&amp;#34;&lt;/span>;
&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> { StyleSheet, Text, View } from &lt;span style="color:#0086d2">&amp;#34;react-native&amp;#34;&lt;/span>;
&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> styles = StyleSheet.create({
bigblue: {
color: &lt;span style="color:#0086d2">&amp;#34;blue&amp;#34;&lt;/span>,
fontWeight: &lt;span style="color:#0086d2">&amp;#34;bold&amp;#34;&lt;/span>,
fontSize: &lt;span style="color:#0086f7;font-weight:bold">30&lt;/span>,
},
red: {
color: &lt;span style="color:#0086d2">&amp;#34;red&amp;#34;&lt;/span>,
},
});
&lt;span style="color:#fb660a;font-weight:bold">export&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">default&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">class&lt;/span> LotsOfStyles &lt;span style="color:#fb660a;font-weight:bold">extends&lt;/span> Component {
render() {
&lt;span style="color:#fb660a;font-weight:bold">return&lt;/span> (
&amp;lt;&lt;span style="color:#fb660a;font-weight:bold">View&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Text&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">style&lt;/span>={styles.red}&amp;gt;just red&amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">Text&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Text&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">style&lt;/span>={styles.bigblue}&amp;gt;just bigblue&amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">Text&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Text&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">style&lt;/span>={[styles.bigblue, styles.red]}&amp;gt;bigblue, then red&amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">Text&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Text&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">style&lt;/span>={[styles.red, styles.bigblue]}&amp;gt;red, then bigblue&amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">Text&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">View&lt;/span>&amp;gt;
);
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="gestion-des-dimensions">Gestion des dimensions&lt;/h3>
&lt;p>Deux possibilités :&lt;/p>
&lt;ul>
&lt;li>Dimensions fixes&lt;/li>
&lt;li>Dimensions flexibles&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="dimensions-fixes">Dimensions fixes&lt;/h3>
&lt;p>Utile pour les composants qui doivent toujours être affichés à la même taille.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-jsx" data-lang="jsx">&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> React, { Component } from &lt;span style="color:#0086d2">&amp;#34;react&amp;#34;&lt;/span>;
&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> { View } from &lt;span style="color:#0086d2">&amp;#34;react-native&amp;#34;&lt;/span>;
&lt;span style="color:#fb660a;font-weight:bold">export&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">default&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">class&lt;/span> FixedDimensionsBasics &lt;span style="color:#fb660a;font-weight:bold">extends&lt;/span> Component {
render() {
&lt;span style="color:#fb660a;font-weight:bold">return&lt;/span> (
&amp;lt;&lt;span style="color:#fb660a;font-weight:bold">View&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#fb660a;font-weight:bold">View&lt;/span>
&lt;span style="color:#ff0086;font-weight:bold">style&lt;/span>={{ width: &lt;span style="color:#0086f7;font-weight:bold">50&lt;/span>, height: &lt;span style="color:#0086f7;font-weight:bold">50&lt;/span>, backgroundColor: &lt;span style="color:#0086d2">&amp;#34;powderblue&amp;#34;&lt;/span> }}
/&amp;gt;
&amp;lt;&lt;span style="color:#fb660a;font-weight:bold">View&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">style&lt;/span>={{ width: &lt;span style="color:#0086f7;font-weight:bold">100&lt;/span>, height: &lt;span style="color:#0086f7;font-weight:bold">100&lt;/span>, backgroundColor: &lt;span style="color:#0086d2">&amp;#34;skyblue&amp;#34;&lt;/span> }} /&amp;gt;
&amp;lt;&lt;span style="color:#fb660a;font-weight:bold">View&lt;/span>
&lt;span style="color:#ff0086;font-weight:bold">style&lt;/span>={{ width: &lt;span style="color:#0086f7;font-weight:bold">150&lt;/span>, height: &lt;span style="color:#0086f7;font-weight:bold">150&lt;/span>, backgroundColor: &lt;span style="color:#0086d2">&amp;#34;steelblue&amp;#34;&lt;/span> }}
/&amp;gt;
&amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">View&lt;/span>&amp;gt;
);
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="dimensions-flexibles">Dimensions flexibles&lt;/h3>
&lt;p>Les dimensions s&amp;rsquo;adaptent à l&amp;rsquo;espace disponible.&lt;/p>
&lt;p>&lt;code>flex:1&lt;/code> =&amp;gt; espace partagé équitablement entre tous les composants d&amp;rsquo;un même parent (&lt;a href="https://snack.expo.io/@bpesquet/dimensions">démo&lt;/a>).&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-jsx" data-lang="jsx">&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> React, { Component } from &lt;span style="color:#0086d2">&amp;#34;react&amp;#34;&lt;/span>;
&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> { View } from &lt;span style="color:#0086d2">&amp;#34;react-native&amp;#34;&lt;/span>;
&lt;span style="color:#fb660a;font-weight:bold">export&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">default&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">class&lt;/span> FlexDimensionsBasics &lt;span style="color:#fb660a;font-weight:bold">extends&lt;/span> Component {
render() {
&lt;span style="color:#fb660a;font-weight:bold">return&lt;/span> (
&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Try removing the `flex: 1` on the parent View.
&lt;/span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// The parent will not have dimensions, so the children can&amp;#39;t expand.
&lt;/span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// What if you add `height: 300` instead of `flex: 1`?
&lt;/span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">View&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">style&lt;/span>={{ flex: &lt;span style="color:#0086f7;font-weight:bold">1&lt;/span> }}&amp;gt;
&amp;lt;&lt;span style="color:#fb660a;font-weight:bold">View&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">style&lt;/span>={{ flex: &lt;span style="color:#0086f7;font-weight:bold">1&lt;/span>, backgroundColor: &lt;span style="color:#0086d2">&amp;#34;powderblue&amp;#34;&lt;/span> }} /&amp;gt;
&amp;lt;&lt;span style="color:#fb660a;font-weight:bold">View&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">style&lt;/span>={{ flex: &lt;span style="color:#0086f7;font-weight:bold">2&lt;/span>, backgroundColor: &lt;span style="color:#0086d2">&amp;#34;skyblue&amp;#34;&lt;/span> }} /&amp;gt;
&amp;lt;&lt;span style="color:#fb660a;font-weight:bold">View&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">style&lt;/span>={{ flex: &lt;span style="color:#0086f7;font-weight:bold">3&lt;/span>, backgroundColor: &lt;span style="color:#0086d2">&amp;#34;steelblue&amp;#34;&lt;/span> }} /&amp;gt;
&amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">View&lt;/span>&amp;gt;
);
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="flexbox">Flexbox&lt;/h3>
&lt;ul>
&lt;li>Mode de mise en page pour les éléments situés à l&amp;rsquo;intérieur d&amp;rsquo;un conteneur.&lt;/li>
&lt;li>Objectif : répartir au mieux l&amp;rsquo;espace disponible.&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="images/flexbox_terminology.png" alt="Flexbox terminology">&lt;/p>
&lt;hr>
&lt;h3 id="flexdirection--flux-des-éléments">&lt;code>flexDirection&lt;/code> : flux des éléments&lt;/h3>
&lt;p>&lt;code>column&lt;/code> (par défaut), &lt;code>row&lt;/code>, &lt;code>column-reverse&lt;/code>, &lt;code>row-reverse&lt;/code>.&lt;/p>
&lt;p>&lt;a href="https://css-tricks.com/snippets/css/a-guide-to-flexbox/">&lt;img src="images/flexbox_flex_direction.png" alt="Flex direction">&lt;/a>&lt;/p>
&lt;hr>
&lt;h3 id="justifycontent--axe-principal">&lt;code>justifyContent&lt;/code> : axe principal&lt;/h3>
&lt;p>&lt;a href="https://css-tricks.com/snippets/css/a-guide-to-flexbox/">&lt;img src="images/flexbox_justify_content.png" alt="Flexbox: justify content">&lt;/a>&lt;/p>
&lt;hr>
&lt;h3 id="alignitems--axe-secondaire">&lt;code>alignItems&lt;/code> : axe secondaire&lt;/h3>
&lt;p>&lt;a href="https://css-tricks.com/snippets/css/a-guide-to-flexbox/">&lt;img src="images/flexbox_align_items.png" alt="Flexbox: align Items">&lt;/a>&lt;/p>
&lt;hr>
&lt;h3 id="gestion-de-la-navigation-avec-react-navigation">Gestion de la navigation avec React Navigation&lt;/h3>
&lt;ul>
&lt;li>Composant issu de la communauté des développeurs React Native.&lt;/li>
&lt;li>Devenu le standard pour les applications multi-vues.&lt;/li>
&lt;/ul>
&lt;p>&lt;a href="https://reactnavigation.org">&lt;img src="images/react_navigation_logo.png" alt="React Navigation logo">&lt;/a>&lt;/p>
&lt;hr>
&lt;h3 id="installation-de-react-navigation">Installation de react-navigation&lt;/h3>
&lt;p>Utiliser &lt;code>expo install&lt;/code> au lieu de &lt;code>npm install&lt;/code> assure l&amp;rsquo;installation de versions compatibles avec celle d&amp;rsquo;Expo.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#080;background-color:#0f140f;font-style:italic"># Core components and dependencies&lt;/span>
expo install @react-navigation/native react-native-gesture-handler react-native-reanimated react-native-screens react-native-safe-area-context @react-native-community/masked-view
&lt;span style="color:#080;background-color:#0f140f;font-style:italic"># StackNavigator dependencies&lt;/span>
expo install @react-navigation/stack
&lt;span style="color:#080;background-color:#0f140f;font-style:italic"># BottomTabNavigator dependencies&lt;/span>
expo install @react-navigation/bottom-tabs
&lt;span style="color:#080;background-color:#0f140f;font-style:italic"># DrawerNavigator dependencies&lt;/span>
expo install @react-navigation/drawer
&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="stacknavigator">StackNavigator&lt;/h3>
&lt;p>Principe similaire au web : gestion d&amp;rsquo;une pile de vues.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-tsx" data-lang="tsx">&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> Stack = createStackNavigator();
&lt;span style="color:#fb660a;font-weight:bold">export&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">default&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">function&lt;/span> App() {
&lt;span style="color:#fb660a;font-weight:bold">return&lt;/span> (
&amp;lt;&lt;span style="color:#fb660a;font-weight:bold">NavigationContainer&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Stack.Navigator&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Stack.Screen&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">name&lt;/span>=&lt;span style="color:#0086d2">&amp;#34;Home&amp;#34;&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">component&lt;/span>={HomeScreen} /&amp;gt;
&amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">Stack.Navigator&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">NavigationContainer&lt;/span>&amp;gt;
);
}
&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="navigation-entre-vues">Navigation entre vues&lt;/h3>
&lt;ul>
&lt;li>Un objet &lt;code>navigation&lt;/code> est automatiquement ajouté aux &lt;em>props&lt;/em> des vues gérées par React Navigation.&lt;/li>
&lt;li>Son API permet de naviguer entre les vues.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-ts" data-lang="ts">&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Navigue vers une vue
&lt;/span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>&lt;span style="color:#fb660a;font-weight:bold">this&lt;/span>.props.navigation.navigate(&lt;span style="color:#0086d2">&amp;#34;RouteName&amp;#34;&lt;/span>);
&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Permet d&amp;#39;aller plusieurs fois vers la même vue
&lt;/span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>&lt;span style="color:#fb660a;font-weight:bold">this&lt;/span>.props.navigation.push(&lt;span style="color:#0086d2">&amp;#34;RouteName&amp;#34;&lt;/span>);
&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Revient à la vue précédente
&lt;/span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>&lt;span style="color:#fb660a;font-weight:bold">this&lt;/span>.props.navigation.goBack();
&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="passage-de-paramètres-entre-vues">Passage de paramètres entre vues&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-ts" data-lang="ts">&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Côté vue appelante
&lt;/span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>&lt;span style="color:#fb660a;font-weight:bold">this&lt;/span>.props.navigation.navigate(&lt;span style="color:#0086d2">&amp;#34;RouteName&amp;#34;&lt;/span>, {
&lt;span style="color:#080;background-color:#0f140f;font-style:italic">/* Objet dont les propriétés constituent les arguments */&lt;/span>
param1: &lt;span style="color:#0086d2">&amp;#34;value1&amp;#34;&lt;/span>,
&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// ...
&lt;/span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>});
&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Côté vue appelée
&lt;/span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// La propriété route.params permet de récupérer les paramètres passés à la vue
&lt;/span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> { param1 } = &lt;span style="color:#fb660a;font-weight:bold">this&lt;/span>.props.route.params;
&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="en-tête-des-vues">En-tête des vues&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-tsx" data-lang="tsx">&amp;lt;&lt;span style="color:#fb660a;font-weight:bold">MainStack.Navigator&lt;/span>
&lt;span style="color:#ff0086;font-weight:bold">screenOptions&lt;/span>={{
headerStyle: {
backgroundColor: &lt;span style="color:#0086d2">&amp;#34;#f4511e&amp;#34;&lt;/span>,
},
headerTintColor: &lt;span style="color:#0086d2">&amp;#34;#fff&amp;#34;&lt;/span>,
headerTitleStyle: {
fontWeight: &lt;span style="color:#0086d2">&amp;#34;bold&amp;#34;&lt;/span>,
},
}}
&amp;gt;
&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// ...
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="vue-modale">Vue modale&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-tsx" data-lang="tsx">&amp;lt;&lt;span style="color:#fb660a;font-weight:bold">RootStack.Navigator&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">mode&lt;/span>=&lt;span style="color:#0086d2">&amp;#34;modal&amp;#34;&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">headerMode&lt;/span>=&lt;span style="color:#0086d2">&amp;#34;none&amp;#34;&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#fb660a;font-weight:bold">RootStack.Screen&lt;/span>
&lt;span style="color:#ff0086;font-weight:bold">name&lt;/span>=&lt;span style="color:#0086d2">&amp;#34;Main&amp;#34;&lt;/span>
&lt;span style="color:#ff0086;font-weight:bold">component&lt;/span>={MainStackScreen}
&lt;span style="color:#ff0086;font-weight:bold">options&lt;/span>={{ headerShown: &lt;span style="color:#cdcaa9;font-weight:bold">false&lt;/span> }}
/&amp;gt;
&amp;lt;&lt;span style="color:#fb660a;font-weight:bold">RootStack.Screen&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">name&lt;/span>=&lt;span style="color:#0086d2">&amp;#34;MyModal&amp;#34;&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">component&lt;/span>={ModalScreen} /&amp;gt;
&amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">RootStack.Navigator&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="exemple-récapitulatif">Exemple récapitulatif&lt;/h3>
&lt;p>&lt;a href="https://github.com/ensc-mobi/StackNavigatorDemo">https://github.com/ensc-mobi/StackNavigatorDemo&lt;/a>&lt;/p>
&lt;p>&lt;img src="images/stack-navigator-demo.png" alt="StackNavigator demo">&lt;/p>
&lt;hr>
&lt;h3 id="tabnavigator">TabNavigator&lt;/h3>
&lt;p>Affichage d&amp;rsquo;onglets en bas de l&amp;rsquo;écran.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-tsx" data-lang="tsx">&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> Tab = createBottomTabNavigator();
&lt;span style="color:#fb660a;font-weight:bold">export&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">default&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">function&lt;/span> App() {
&lt;span style="color:#fb660a;font-weight:bold">return&lt;/span> (
&amp;lt;&lt;span style="color:#fb660a;font-weight:bold">NavigationContainer&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Tab.Navigator&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Tab.Screen&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">name&lt;/span>=&lt;span style="color:#0086d2">&amp;#34;Home&amp;#34;&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">component&lt;/span>={HomeScreen} /&amp;gt;
&amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Tab.Screen&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">name&lt;/span>=&lt;span style="color:#0086d2">&amp;#34;Settings&amp;#34;&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">component&lt;/span>={SettingsScreen} /&amp;gt;
&amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">Tab.Navigator&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">NavigationContainer&lt;/span>&amp;gt;
);
}
&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="navigation-entre-onglets">Navigation entre onglets&lt;/h3>
&lt;p>Fonctionnement identique à celui de la navigation entre les vues d&amp;rsquo;un &lt;code>StackNavigator&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-tsx" data-lang="tsx">&amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Button&lt;/span>
&lt;span style="color:#ff0086;font-weight:bold">title&lt;/span>=&lt;span style="color:#0086d2">&amp;#34;Go to Settings&amp;#34;&lt;/span>
&lt;span style="color:#ff0086;font-weight:bold">onPress&lt;/span>={() =&amp;gt; navigation.navigate(&lt;span style="color:#0086d2">&amp;#34;Settings&amp;#34;&lt;/span>)}
/&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="affichage-de-piles-_stacks_-dans-les-onglets">Affichage de piles (&lt;em>stacks&lt;/em>) dans les onglets&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-tsx" data-lang="tsx">&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> HomeStack = createStackNavigator();
&lt;span style="color:#fb660a;font-weight:bold">function&lt;/span> HomeStackScreen() {
&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Define home stack
&lt;/span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>}
&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> SettingsStack = createStackNavigator();
&lt;span style="color:#fb660a;font-weight:bold">function&lt;/span> SettingsStackScreen() {
&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Define settings stack
&lt;/span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>}
&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> Tab = createBottomTabNavigator();
&lt;span style="color:#fb660a;font-weight:bold">function&lt;/span> TabScreen() {
&lt;span style="color:#fb660a;font-weight:bold">return&lt;/span> (
&amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Tab.Navigator&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Tab.Screen&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">name&lt;/span>=&lt;span style="color:#0086d2">&amp;#34;Home&amp;#34;&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">component&lt;/span>={HomeStackScreen} /&amp;gt;
&amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Tab.Screen&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">name&lt;/span>=&lt;span style="color:#0086d2">&amp;#34;Settings&amp;#34;&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">component&lt;/span>={SettingsStackScreen} /&amp;gt;
&amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">Tab.Navigator&lt;/span>&amp;gt;
);
}
&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="exemple-récapitulatif-1">Exemple récapitulatif&lt;/h3>
&lt;p>&lt;a href="https://github.com/ensc-mobi/TabNavigatorDemo">https://github.com/ensc-mobi/TabNavigatorDemo&lt;/a>&lt;/p>
&lt;p>&lt;img src="images/tab-navigator-demo.png" alt="BottomTabNavigator demo">&lt;/p>
&lt;hr>
&lt;h3 id="autres-possibilités-de-react-navigation">Autres possibilités de react-navigation&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="https://reactnavigation.org/docs/drawer-based-navigation">Navigation par menu accordéon&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://reactnavigation.org/docs/auth-flow">Gestion de l&amp;rsquo;authentification&lt;/a>&lt;/li>
&lt;li>&amp;hellip;&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="gestion-de-létat">Gestion de l&amp;rsquo;état&lt;/h2>
&lt;hr>
&lt;h3 id="rappels-sur-les-propriétés">Rappels sur les propriétés&lt;/h3>
&lt;p>&lt;strong>Propriétés (&lt;em>props&lt;/em>)&lt;/strong> = caractéristiques définies au moment de la création du composant.&lt;/p>
&lt;p>Les propriétés sont modifiables uniquement par le composant parent.&lt;/p>
&lt;hr>
&lt;h3 id="rappels-sur-létat">Rappels sur l&amp;rsquo;état&lt;/h3>
&lt;p>&lt;strong>Etat (&lt;em>state&lt;/em>)&lt;/strong> = ensemble des données susceptibles d&amp;rsquo;être modifiées pendant l&amp;rsquo;exécution de l&amp;rsquo;application.&lt;/p>
&lt;p>Chaque composant React Native possède un état interne, géré avec &lt;code>this.state&lt;/code> et &lt;code>this.setState()&lt;/code>.&lt;/p>
&lt;p>Toute modification de l&amp;rsquo;état déclenche un nouveau rendu du composant.&lt;/p>
&lt;hr>
&lt;h3 id="problématique">Problématique&lt;/h3>
&lt;p>La gestion locale de l&amp;rsquo;état devient insuffisante lorsqu&amp;rsquo;un composant doit &lt;strong>accéder à&lt;/strong> ou &lt;strong>modifier&lt;/strong> l&amp;rsquo;état d&amp;rsquo;un autre composant.&lt;/p>
&lt;p>Nécessité de partager un état commun entre certains composants.&lt;/p>
&lt;hr>
&lt;h3 id="solution--_lifting-state-up_">Solution : &lt;em>&amp;ldquo;lifting state up&amp;rdquo;&lt;/em>&lt;/h3>
&lt;ul>
&lt;li>Remonter l&amp;rsquo;état au niveau du plus proche composant parent commun.&lt;/li>
&lt;li>Définir les actions de modification dans ce composant parent.&lt;/li>
&lt;li>Dans les composants enfants :
&lt;ul>
&lt;li>Remplacer l&amp;rsquo;état local par des propriétés définies par le parent.&lt;/li>
&lt;li>Remplacer les actions locales par des appels aux actions définies dans le parent.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;a href="https://reactjs.org/docs/lifting-state-up.html">Lifting State Up (React)&lt;/a>&lt;/p>
&lt;hr>
&lt;h3 id="application">Application&lt;/h3>
&lt;p>&lt;a href="https://github.com/ensc-mobi/TempConverter">https://github.com/ensc-mobi/TempConverter&lt;/a>&lt;/p>
&lt;p>&lt;img src="images/temp-converter.png" alt="TempConverter demo">&lt;/p>
&lt;hr>
&lt;h3 id="utilisation-de-props-dans-les-composants-enfants">Utilisation de props dans les composants enfants&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-jsx" data-lang="jsx">&lt;span style="color:#fb660a;font-weight:bold">class&lt;/span> TemperatureInput &lt;span style="color:#fb660a;font-weight:bold">extends&lt;/span> React.Component {
_onChangeText = (text) =&amp;gt; {
&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Callback passed as component prop is called
&lt;/span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">this&lt;/span>.props.onTemperatureChange(text);
};
render() {
&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> temperature = &lt;span style="color:#fb660a;font-weight:bold">this&lt;/span>.props.temperature;
&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> scale = &lt;span style="color:#fb660a;font-weight:bold">this&lt;/span>.props.scale;
&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> placeholder = &lt;span style="color:#0086d2">`Enter temperature in &lt;/span>&lt;span style="color:#0086d2">${&lt;/span>scaleNames[scale]&lt;span style="color:#0086d2">}&lt;/span>&lt;span style="color:#0086d2">`&lt;/span>;
&lt;span style="color:#fb660a;font-weight:bold">return&lt;/span> (
&amp;lt;&lt;span style="color:#fb660a;font-weight:bold">TextInput&lt;/span>
&lt;span style="color:#ff0086;font-weight:bold">style&lt;/span>={styles.text}
&lt;span style="color:#ff0086;font-weight:bold">placeholder&lt;/span>={placeholder}
&lt;span style="color:#ff0086;font-weight:bold">value&lt;/span>={temperature}
&lt;span style="color:#ff0086;font-weight:bold">onChangeText&lt;/span>={&lt;span style="color:#fb660a;font-weight:bold">this&lt;/span>._onChangeText}
/&amp;gt;
);
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="remontée-de-létat-dans-le-composant-parent">Remontée de l&amp;rsquo;état dans le composant parent&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-jsx" data-lang="jsx">&lt;span style="color:#fb660a;font-weight:bold">class&lt;/span> Calculator &lt;span style="color:#fb660a;font-weight:bold">extends&lt;/span> React.Component {
constructor(props) {
&lt;span style="color:#fb660a;font-weight:bold">super&lt;/span>(props);
&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Common state is lifted in closest parent of TemperatureInput components
&lt;/span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Temperature can be set either in Celsius or in Fahrenheit
&lt;/span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">this&lt;/span>.state = { temperature: &lt;span style="color:#0086d2">&amp;#34;&amp;#34;&lt;/span>, scale: &lt;span style="color:#0086d2">&amp;#34;c&amp;#34;&lt;/span> };
}
_onCelsiusChange = temperature =&amp;gt; {
&lt;span style="color:#fb660a;font-weight:bold">this&lt;/span>.setState({ scale: &lt;span style="color:#0086d2">&amp;#34;c&amp;#34;&lt;/span>, temperature });
};
_onFahrenheitChange = temperature =&amp;gt; {
&lt;span style="color:#fb660a;font-weight:bold">this&lt;/span>.setState({ scale: &lt;span style="color:#0086d2">&amp;#34;f&amp;#34;&lt;/span>, temperature });
};
&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// ...
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="appel-aux-actions-définies-dans-le-parent">Appel aux actions définies dans le parent&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-jsx" data-lang="jsx"> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// ...
&lt;/span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> render() {
&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> scale = &lt;span style="color:#fb660a;font-weight:bold">this&lt;/span>.state.scale;
&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> temperature = &lt;span style="color:#fb660a;font-weight:bold">this&lt;/span>.state.temperature;
&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> tempCelsius =
scale === &lt;span style="color:#0086d2">&amp;#34;f&amp;#34;&lt;/span> ? tryConvert(temperature, toCelsius) : temperature;
&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> tempFahrenheit =
scale === &lt;span style="color:#0086d2">&amp;#34;c&amp;#34;&lt;/span> ? tryConvert(temperature, toFahrenheit) : temperature;
&lt;span style="color:#fb660a;font-weight:bold">return&lt;/span> (
&amp;lt;&lt;span style="color:#fb660a;font-weight:bold">View&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#fb660a;font-weight:bold">TemperatureInput&lt;/span>
&lt;span style="color:#ff0086;font-weight:bold">scale&lt;/span>=&lt;span style="color:#0086d2">&amp;#34;c&amp;#34;&lt;/span>
&lt;span style="color:#ff0086;font-weight:bold">temperature&lt;/span>={tempCelsius}
&lt;span style="color:#ff0086;font-weight:bold">onTemperatureChange&lt;/span>={&lt;span style="color:#fb660a;font-weight:bold">this&lt;/span>._onCelsiusChange}
/&amp;gt;
&amp;lt;&lt;span style="color:#fb660a;font-weight:bold">TemperatureInput&lt;/span>
&lt;span style="color:#ff0086;font-weight:bold">scale&lt;/span>=&lt;span style="color:#0086d2">&amp;#34;f&amp;#34;&lt;/span>
&lt;span style="color:#ff0086;font-weight:bold">temperature&lt;/span>={tempFahrenheit}
&lt;span style="color:#ff0086;font-weight:bold">onTemperatureChange&lt;/span>={&lt;span style="color:#fb660a;font-weight:bold">this&lt;/span>._onFahrenheitChange}
/&amp;gt;
&amp;lt;&lt;span style="color:#fb660a;font-weight:bold">BoilingResult&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">tempCelsius&lt;/span>={parseFloat(tempCelsius)} /&amp;gt;
&amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">View&lt;/span>&amp;gt;
);
}
&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="centralisation-de-létat">Centralisation de l&amp;rsquo;état&lt;/h3>
&lt;p>Les composants parents peuvent finir par rassembler trop de choses :&lt;/p>
&lt;ul>
&lt;li>Etat commun&lt;/li>
&lt;li>Actions de modification&lt;/li>
&lt;li>Hiérarchie des composants enfants&lt;/li>
&lt;/ul>
&lt;p>Non-respect du principe de &lt;strong>séparation des responsabilités&lt;/strong>.&lt;/p>
&lt;hr>
&lt;h3 id="solution">Solution&lt;/h3>
&lt;ul>
&lt;li>Centraliser l&amp;rsquo;état et les actions de modifications dans des objets dédiés, souvent appelés &lt;strong>stores&lt;/strong>.&lt;/li>
&lt;li>Donner accès à ces objets aux composants via des propriétés.&lt;/li>
&lt;li>Prévoir un mécanisme d'&lt;strong>abonnement&lt;/strong> des composants aux mutations de l&amp;rsquo;état effectués uniquement dans les stores.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="application-1">Application&lt;/h3>
&lt;p>&lt;a href="https://github.com/ensc-mobi/TodoNative">https://github.com/ensc-mobi/TodoNative&lt;/a>&lt;/p>
&lt;p>&lt;img src="images/todonative.png" alt="TodoNative demo">&lt;/p>
&lt;hr>
&lt;h3 id="définition-dun-store">Définition d&amp;rsquo;un store&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-js" data-lang="js">&lt;span style="color:#fb660a;font-weight:bold">export&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">default&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">class&lt;/span> TodoStore &lt;span style="color:#fb660a;font-weight:bold">extends&lt;/span> Store {
constructor() {
&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Call to parent constructor is needed to init observation
&lt;/span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">super&lt;/span>();
&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// The TODO task is used as key (unique identifier)
&lt;/span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Therefore, each TODO must have a different task
&lt;/span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">this&lt;/span>.todos = [];
}
addTodo = (task) =&amp;gt; {
&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Add new TODO at beginning of array
&lt;/span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">this&lt;/span>.todos = [{ task, completed: &lt;span style="color:#fb660a;font-weight:bold">false&lt;/span> }, ...&lt;span style="color:#fb660a;font-weight:bold">this&lt;/span>.todos];
&lt;span style="color:#fb660a;font-weight:bold">this&lt;/span>.notifyObservers();
};
&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// ...
&lt;/span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>
&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Used in parent class when notifying observers
&lt;/span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> getState() {
&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> todos = &lt;span style="color:#fb660a;font-weight:bold">this&lt;/span>.todos;
&lt;span style="color:#fb660a;font-weight:bold">return&lt;/span> { todos };
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="notification-des-changements-détat">Notification des changements d&amp;rsquo;état&lt;/h3>
&lt;p>Basée sur le Design Pattern &lt;a href="https://fr.wikipedia.org/wiki/Observateur_%28patron_de_conception%29">Observateur&lt;/a>.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-js" data-lang="js">&lt;span style="color:#fb660a;font-weight:bold">export&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">default&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">class&lt;/span> Store {
constructor() {
&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Define an empty observer list
&lt;/span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">this&lt;/span>.observers = [];
}
&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Add new observer to list
&lt;/span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> addObserver(observer) {
&lt;span style="color:#fb660a;font-weight:bold">this&lt;/span>.observers.push(observer);
}
&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Notify all observers of a state change in the store
&lt;/span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> notifyObservers() {
&lt;span style="color:#fb660a;font-weight:bold">this&lt;/span>.observers.forEach((observer) =&amp;gt; observer.setState(&lt;span style="color:#fb660a;font-weight:bold">this&lt;/span>.getState()));
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="lien-entre-store-et-composant-principal">Lien entre store et composant principal&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-jsx" data-lang="jsx">&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> App = () =&amp;gt; {
&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> todoStore = &lt;span style="color:#fb660a;font-weight:bold">new&lt;/span> TodoStore();
&lt;span style="color:#fb660a;font-weight:bold">return&lt;/span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">MainView&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">todoStore&lt;/span>={todoStore} /&amp;gt;;
};
&lt;span style="color:#fb660a;font-weight:bold">export&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">default&lt;/span> App;
&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="abonnement-dun-composant">Abonnement d&amp;rsquo;un composant&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-jsx" data-lang="jsx">&lt;span style="color:#fb660a;font-weight:bold">export&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">default&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">class&lt;/span> MainView &lt;span style="color:#fb660a;font-weight:bold">extends&lt;/span> React.Component {
constructor(props) {
&lt;span style="color:#fb660a;font-weight:bold">super&lt;/span>(props);
&lt;span style="color:#fb660a;font-weight:bold">this&lt;/span>.state = &lt;span style="color:#fb660a;font-weight:bold">this&lt;/span>.props.todoStore.getState();
&lt;span style="color:#fb660a;font-weight:bold">this&lt;/span>.props.todoStore.addObserver(&lt;span style="color:#fb660a;font-weight:bold">this&lt;/span>);
}
render() {
&lt;span style="color:#fb660a;font-weight:bold">return&lt;/span> (
&amp;lt;&lt;span style="color:#fb660a;font-weight:bold">View&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">style&lt;/span>={styles.container}&amp;gt;
&amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Header&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">title&lt;/span>=&lt;span style="color:#0086d2">&amp;#34;TodoNative&amp;#34;&lt;/span> /&amp;gt;
&amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Input&lt;/span>
&lt;span style="color:#ff0086;font-weight:bold">placeholder&lt;/span>=&lt;span style="color:#0086d2">&amp;#34;Saisissez une nouvelle tâche&amp;#34;&lt;/span>
&lt;span style="color:#ff0086;font-weight:bold">onSubmitEditing&lt;/span>={&lt;span style="color:#fb660a;font-weight:bold">this&lt;/span>.props.todoStore.addTodo}
/&amp;gt;
&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// ...
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="gestion-de-létat-avec-mobx">Gestion de l&amp;rsquo;état avec MobX&lt;/h3>
&lt;ul>
&lt;li>Quand l&amp;rsquo;application devient complexe, le nombre croissant de composants complique les évolutions de l&amp;rsquo;état.&lt;/li>
&lt;li>Les mutations de l&amp;rsquo;état peuvent déclencher un (trop) grand nombre de rendus des composants.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="solution-1">Solution&lt;/h3>
&lt;ul>
&lt;li>Utiliser une librairie dédiée à la gestion de l&amp;rsquo;état.&lt;/li>
&lt;li>&lt;a href="https://www.robinwieruch.de/redux-mobx-confusion/">Bon choix&lt;/a> pour la plupart des projets de taille intermédiaire : &lt;a href="https://mobx.js.org">MobX&lt;/a>.&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="images/mobx-logo.png" alt="MobX logo">&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#080;background-color:#0f140f;font-style:italic"># Add MobX to a React Native project&lt;/span>
expo install mobx mobx-react
expo install --save-dev babel-preset-mobx
&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;p>&lt;img src="images/mobx-overview.png" alt="MobX overview">&lt;/p>
&lt;hr>
&lt;h3 id="application-2">Application&lt;/h3>
&lt;p>&lt;a href="https://github.com/ensc-mobi/TodoNative-MobX">https://github.com/ensc-mobi/TodoNative-MobX&lt;/a>&lt;/p>
&lt;p>&lt;img src="images/todonative.png" alt="TodoNative-MobX demo">&lt;/p>
&lt;hr>
&lt;h3 id="définition-dune-classe-métier">Définition d&amp;rsquo;une classe métier&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-js" data-lang="js">&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> { observable } from &lt;span style="color:#0086d2">&amp;#34;mobx&amp;#34;&lt;/span>;
&lt;span style="color:#fb660a;font-weight:bold">export&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">default&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">class&lt;/span> Todo {
@observable task;
@observable completed;
constructor(task = &lt;span style="color:#0086d2">&amp;#34;&amp;#34;&lt;/span>, completed = &lt;span style="color:#fb660a;font-weight:bold">false&lt;/span>) {
&lt;span style="color:#fb660a;font-weight:bold">this&lt;/span>.task = task;
&lt;span style="color:#fb660a;font-weight:bold">this&lt;/span>.completed = completed;
}
toggle() {
&lt;span style="color:#fb660a;font-weight:bold">this&lt;/span>.completed = !&lt;span style="color:#fb660a;font-weight:bold">this&lt;/span>.completed;
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="définition-dun-store-1">Définition d&amp;rsquo;un store&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-js" data-lang="js">&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> { observable } from &lt;span style="color:#0086d2">&amp;#34;mobx&amp;#34;&lt;/span>;
&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> Todo from &lt;span style="color:#0086d2">&amp;#34;../domain/Todo&amp;#34;&lt;/span>;
&lt;span style="color:#fb660a;font-weight:bold">export&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">default&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">class&lt;/span> TodoStore {
@observable todos;
@observable isLoading = &lt;span style="color:#fb660a;font-weight:bold">true&lt;/span>;
constructor() {
&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// The TODO task is used as key (unique identifier)
&lt;/span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Therefore, each TODO must have a different task
&lt;/span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">this&lt;/span>.todos = [];
}
addTodo(task) {
&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> todo = &lt;span style="color:#fb660a;font-weight:bold">new&lt;/span> Todo(task);
&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Add new TODO at beginning of array
&lt;/span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">this&lt;/span>.todos = [todo, ...&lt;span style="color:#fb660a;font-weight:bold">this&lt;/span>.todos];
}
&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// ...
&lt;/span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>}
&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="lien-entre-store-et-composant-principal-1">Lien entre store et composant principal&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-jsx" data-lang="jsx">&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> App = () =&amp;gt; {
&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> todoStore = &lt;span style="color:#fb660a;font-weight:bold">new&lt;/span> TodoStore();
&lt;span style="color:#fb660a;font-weight:bold">return&lt;/span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">MainView&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">todoStore&lt;/span>={todoStore} /&amp;gt;;
};
&lt;span style="color:#fb660a;font-weight:bold">export&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">default&lt;/span> App;
&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="abonnement-dun-composant-1">Abonnement d&amp;rsquo;un composant&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-js" data-lang="js">&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> { observer } from &lt;span style="color:#0086d2">&amp;#34;mobx-react&amp;#34;&lt;/span>;
&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// ...
&lt;/span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>
@observer
&lt;span style="color:#fb660a;font-weight:bold">export&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">default&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">class&lt;/span> MainView &lt;span style="color:#fb660a;font-weight:bold">extends&lt;/span> React.Component {
onAddTodo = task =&amp;gt; {
&lt;span style="color:#fb660a;font-weight:bold">this&lt;/span>.props.todoStore.addTodo(task);
};
&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// ...
&lt;/span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>
render() {
&lt;span style="color:#fb660a;font-weight:bold">return&lt;/span> (
&amp;lt;View style={styles.container}&amp;gt;
&amp;lt;Header title=&lt;span style="color:#0086d2">&amp;#34;TodoNative&amp;#34;&lt;/span> /&amp;gt;
&amp;lt;Input
placeholder=&lt;span style="color:#0086d2">&amp;#34;Saisissez une nouvelle tâche&amp;#34;&lt;/span>
onSubmitEditing={&lt;span style="color:#fb660a;font-weight:bold">this&lt;/span>.onAddTodo}
/&amp;gt;
&amp;lt;FlatList
style={styles.todoContainer}
data={&lt;span style="color:#fb660a;font-weight:bold">this&lt;/span>.props.todoStore.todos}
&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// ...
&lt;/span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>}
&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h2 id="pourquoi-pas-redux-">Pourquoi pas Redux ?&lt;/h2>
&lt;p>&lt;img src="images/redux-all.jpeg" alt="Redux all!">&lt;/p>
&lt;ul>
&lt;li>Librairie créée pour adresser des problématiques à l&amp;rsquo;échelle de Facebook&lt;/li>
&lt;li>Complexe et &lt;em>overkill&lt;/em> pour les projets &amp;ldquo;normaux&amp;rdquo;&lt;/li>
&lt;li>&lt;a href="https://medium.com/@dan_abramov/you-might-not-need-redux-be46360cf367">&amp;ldquo;You might not need Redux&amp;rdquo;&lt;/a> (écrit par son créateur)&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="utilisation-dapi-web">Utilisation d&amp;rsquo;API web&lt;/h2>
&lt;hr>
&lt;h3 id="la-notion-dapi">La notion d&amp;rsquo;API&lt;/h3>
&lt;p>Une &lt;strong>API&lt;/strong> (&lt;em>Application Programming Interface&lt;/em>) est un point d&amp;rsquo;entrée programmatique dans un système.&lt;/p>
&lt;p>Elle fournit un moyen d&amp;rsquo;interagir avec ce système.&lt;/p>
&lt;p>Les API permettent aux développeurs d&amp;rsquo;intégrer des services externes dans leurs applications.&lt;/p>
&lt;hr>
&lt;h3 id="spécificités-des-api-web">Spécificités des API web&lt;/h3>
&lt;p>Une &lt;strong>API web&lt;/strong> (appelée parfois service web) est une API accessible via les technologies du web : HTTP ou HTTPS.&lt;/p>
&lt;p>Les API web utilisent le plus souvent le format de donnée &lt;strong>JSON&lt;/strong>.&lt;/p>
&lt;p>Certaines sont librement utilisables, d&amp;rsquo;autres nécessitent une authentification du client.&lt;/p>
&lt;hr>
&lt;h3 id="exemples-dapi-web">Exemples d&amp;rsquo;API web&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="https://pokeapi.co/">PokéAPI&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://swapi.dev/">Star Wars API&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://en.wikipedia.org/w/api.php?">Wikipedia&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://developer.spotify.com/documentation/web-api/">Spotify&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.omdbapi.com/">OMDb API&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>(&lt;a href="https://shkspr.mobi/blog/2016/05/easy-apis-without-authentication/">Source&lt;/a>)&lt;/p>
&lt;hr>
&lt;h3 id="outils-pour-la-gestion-des-api-web">Outils pour la gestion des API web&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="https://www.getpostman.com/">Postman&lt;/a>&lt;/li>
&lt;li>Extension &lt;a href="https://addons.mozilla.org/fr/firefox/addon/restclient/">RESTClient&lt;/a> pour Firefox&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="appels-réseau-asynchrones-avec-javascript">Appels réseau asynchrones avec JavaScript&lt;/h3>
&lt;p>Une &lt;a href="https://web.dev/promises/">promesse&lt;/a> (&lt;em>promise&lt;/em>) est un objet qui encapsule une opération dont le résultat n&amp;rsquo;est pas encore connu.&lt;/p>
&lt;p>La fonction JavaScript &lt;a href="https://developers.google.com/web/updates/2015/03/introduction-to-fetch">fetch()&lt;/a> exploite les possibilités des promesses.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-js" data-lang="js">&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Envoie une requête HTTP asynchrone vers l&amp;#39;URL spécifiée
&lt;/span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>fetch(url)
.then(() =&amp;gt; {
&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Code appelé ultérieurement si la requête réussit
&lt;/span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> })
.&lt;span style="color:#fb660a;font-weight:bold">catch&lt;/span>(() =&amp;gt; {
&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Code appelé ultérieurement si la requête échoue
&lt;/span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> });
&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="accès-à-une-ressource-distante">Accès à une ressource distante&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-js" data-lang="js">&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Envoi d&amp;#39;une requête HTTP asynchrone vers l&amp;#39;URL spécifiée
&lt;/span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// La réponse reçue ici contient des données JSON
&lt;/span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>fetch(&lt;span style="color:#0086d2">&amp;#34;http://my-api-url&amp;#34;&lt;/span>)
&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Accès au contenu JSON de la réponse
&lt;/span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> .then((response) =&amp;gt; response.json())
.then((content) =&amp;gt; {
&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Utilisation du contenu de la réponse
&lt;/span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// `content` est un objet ou un tableau JavaScript
&lt;/span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> })
.&lt;span style="color:#fb660a;font-weight:bold">catch&lt;/span>((error) =&amp;gt; {
console.error(error);
});
&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="mise-à-jour-dune-ressource-distante">Mise à jour d&amp;rsquo;une ressource distante&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-js" data-lang="js">fetch(&lt;span style="color:#0086d2">&amp;#34;https://mywebsite.com/endpoint/&amp;#34;&lt;/span>, {
method: &lt;span style="color:#0086d2">&amp;#34;POST&amp;#34;&lt;/span>,
headers: {
Accept: &lt;span style="color:#0086d2">&amp;#34;application/json&amp;#34;&lt;/span>,
&lt;span style="color:#0086d2">&amp;#34;Content-Type&amp;#34;&lt;/span>: &lt;span style="color:#0086d2">&amp;#34;application/json&amp;#34;&lt;/span>,
},
body: JSON.stringify({
firstParam: &lt;span style="color:#0086d2">&amp;#34;yourValue&amp;#34;&lt;/span>,
secondParam: &lt;span style="color:#0086d2">&amp;#34;yourOtherValue&amp;#34;&lt;/span>,
}),
});
&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="application-3">Application&lt;/h3>
&lt;p>&lt;a href="https://github.com/ensc-mobi/RandomBeer">https://github.com/ensc-mobi/RandomBeer&lt;/a>&lt;/p>
&lt;p>&lt;img src="images/random_beer.png" alt="Random Beer app">&lt;/p>
&lt;hr>
&lt;h3 id="consommation-dune-api-web">Consommation d&amp;rsquo;une API web&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-js" data-lang="js">&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> headers = {
&lt;span style="color:#0086d2">&amp;#34;Content-Type&amp;#34;&lt;/span>: &lt;span style="color:#0086d2">&amp;#34;application/json&amp;#34;&lt;/span>,
Accept: &lt;span style="color:#0086d2">&amp;#34;application/json&amp;#34;&lt;/span>,
};
&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Retourne une recette de bière au hasard
&lt;/span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>&lt;span style="color:#fb660a;font-weight:bold">export&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> getRandomBrewdog = () =&amp;gt;
fetch(&lt;span style="color:#0086d2">`&lt;/span>&lt;span style="color:#0086d2">${&lt;/span>rootEndpoint&lt;span style="color:#0086d2">}&lt;/span>&lt;span style="color:#0086d2">/beers/random`&lt;/span>, { headers })
.then((response) =&amp;gt; response.json())
&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Access first element of returned array
&lt;/span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> .then((beers) =&amp;gt; beers[&lt;span style="color:#0086f7;font-weight:bold">0&lt;/span>])
.&lt;span style="color:#fb660a;font-weight:bold">catch&lt;/span>((error) =&amp;gt; {
console.error(error);
});
&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="mise-à-jour-de-lapplication">Mise à jour de l&amp;rsquo;application&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-jsx" data-lang="jsx"> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// ...
&lt;/span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> _getRandomBrewdogWithFeedback = () =&amp;gt; {
&lt;span style="color:#fb660a;font-weight:bold">this&lt;/span>.setState({ isLoading: &lt;span style="color:#fb660a;font-weight:bold">true&lt;/span> });
getRandomBrewdog().then(beer =&amp;gt;
&lt;span style="color:#fb660a;font-weight:bold">this&lt;/span>.setState({
name: beer.name,
description: beer.description,
isLoading: &lt;span style="color:#fb660a;font-weight:bold">false&lt;/span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// la requête est terminée
&lt;/span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> })
);
};
componentDidMount() {
&lt;span style="color:#fb660a;font-weight:bold">this&lt;/span>._getRandomBrewdogWithFeedback();
}
&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// ...
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="interactions-avec-un-sgbdr-via-une-api-web">Interactions avec un SGBDR via une API web&lt;/h3>
&lt;p>&lt;a href="https://github.com/mevdschee/php-crud-api">https://github.com/mevdschee/php-crud-api&lt;/a>&lt;/p>
&lt;p>Fichier &lt;code>api.php&lt;/code> à publier sur un serveur web PHP. Fournit une API web pour accéder aux données d&amp;rsquo;un SGBDR.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-php" data-lang="php">&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Update to reflect your local settings
&lt;/span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>&lt;span style="color:#fb660a">$config&lt;/span> = &lt;span style="color:#fb660a;font-weight:bold">new&lt;/span> Config([
&lt;span style="color:#0086d2">&amp;#39;username&amp;#39;&lt;/span> =&amp;gt; &lt;span style="color:#0086d2">&amp;#39;xxx&amp;#39;&lt;/span>,
&lt;span style="color:#0086d2">&amp;#39;password&amp;#39;&lt;/span> =&amp;gt; &lt;span style="color:#0086d2">&amp;#39;xxx&amp;#39;&lt;/span>,
&lt;span style="color:#0086d2">&amp;#39;database&amp;#39;&lt;/span> =&amp;gt; &lt;span style="color:#0086d2">&amp;#39;xxx&amp;#39;&lt;/span>,
]);
&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="utilisation-de-php-crud-api">Utilisation de PHP-CRUD-API&lt;/h3>
&lt;p>&lt;code>http://my-server-url/api.php/records/...&lt;/code>&lt;/p>
&lt;ul>
&lt;li>&lt;code>GET my-table&lt;/code> : renvoie la liste des enregistrements de la table &lt;code>my-table&lt;/code>.&lt;/li>
&lt;li>&lt;code>GET my-table/id&lt;/code> : renvoie l&amp;rsquo;enregistrement identifié par &lt;code>id&lt;/code>.&lt;/li>
&lt;li>&lt;code>POST my-table&lt;/code> : création d&amp;rsquo;un nouvel enregistrement avec les données contenues dans le corps de la requête.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="application-4">Application&lt;/h3>
&lt;p>&lt;a href="https://github.com/ensc-mobi/MyMoviesNative">https://github.com/ensc-mobi/MyMoviesNative&lt;/a>&lt;/p>
&lt;p>&lt;img src="images/mymoviesnative.png" alt="MyMoviesNative demo">&lt;/p>
&lt;hr>
&lt;h3 id="classe-métier-film">Classe métier film&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-js" data-lang="js">&lt;span style="color:#fb660a;font-weight:bold">export&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">default&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">class&lt;/span> Movie {
@observable id;
@observable title;
&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// ...
&lt;/span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> @observable image;
constructor(
id,
title,
&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// ...
&lt;/span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> image
) {
&lt;span style="color:#fb660a;font-weight:bold">this&lt;/span>.id = id;
&lt;span style="color:#fb660a;font-weight:bold">this&lt;/span>.title = title;
&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// ...
&lt;/span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">this&lt;/span>.image = image;
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="accès-au-sgbdr">Accès au SGBDR&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-js" data-lang="js">&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> rootEndpoint = &lt;span style="color:#0086d2">&amp;#34;http://localhost/mymovies/api.php/records&amp;#34;&lt;/span>;
&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> headers = {
&lt;span style="color:#0086d2">&amp;#34;Content-Type&amp;#34;&lt;/span>: &lt;span style="color:#0086d2">&amp;#34;application/json&amp;#34;&lt;/span>,
Accept: &lt;span style="color:#0086d2">&amp;#34;application/json&amp;#34;&lt;/span>,
};
&lt;span style="color:#fb660a;font-weight:bold">export&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> getAllMovies = () =&amp;gt;
fetch(&lt;span style="color:#0086d2">`&lt;/span>&lt;span style="color:#0086d2">${&lt;/span>rootEndpoint&lt;span style="color:#0086d2">}&lt;/span>&lt;span style="color:#0086d2">/movie/`&lt;/span>, { headers })
.then((response) =&amp;gt; response.json())
.then((jsonResponse) =&amp;gt; jsonResponse.records)
.&lt;span style="color:#fb660a;font-weight:bold">catch&lt;/span>((error) =&amp;gt; {
console.log(error);
});
&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="récupération-de-la-liste-des-films">Récupération de la liste des films&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-js" data-lang="js">&lt;span style="color:#fb660a;font-weight:bold">export&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">default&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">class&lt;/span> MovieStore {
@observable movies;
&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// ...
&lt;/span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>
fetchAll() {
&lt;span style="color:#fb660a;font-weight:bold">this&lt;/span>.movies = [];
getAllMovies().then((movies) =&amp;gt; {
&lt;span style="color:#080;background-color:#0f140f;font-style:italic">//console.log(movies);
&lt;/span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> movies.forEach((movieData) =&amp;gt; {
&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> movie = &lt;span style="color:#fb660a;font-weight:bold">new&lt;/span> Movie(
movieData.mov_id,
movieData.mov_title,
&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// ...
&lt;/span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> movieData.mov_image
);
&lt;span style="color:#fb660a;font-weight:bold">this&lt;/span>.movies = [movie, ...&lt;span style="color:#fb660a;font-weight:bold">this&lt;/span>.movies];
});
});
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="vue-principale">Vue principale&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-jsx" data-lang="jsx">&lt;span style="color:#fb660a;font-weight:bold">export&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">default&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">class&lt;/span> HomeScreen &lt;span style="color:#fb660a;font-weight:bold">extends&lt;/span> React.Component {
render() {
&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> movieStore = &lt;span style="color:#fb660a;font-weight:bold">new&lt;/span> MovieStore();
&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// All React Navigation screens receive this object as prop
&lt;/span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> { navigation } = &lt;span style="color:#fb660a;font-weight:bold">this&lt;/span>.props;
&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Navigation object is passed down to children components
&lt;/span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">return&lt;/span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">MainView&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">movieStore&lt;/span>={movieStore} &lt;span style="color:#ff0086;font-weight:bold">navigation&lt;/span>={navigation} /&amp;gt;;
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="affichage-dun-film-dans-la-liste">Affichage d&amp;rsquo;un film dans la liste&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-js" data-lang="js">@observer
&lt;span style="color:#fb660a;font-weight:bold">export&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">default&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">class&lt;/span> MovieItem &lt;span style="color:#fb660a;font-weight:bold">extends&lt;/span> React.Component {
render() {
&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> { movie } = &lt;span style="color:#fb660a;font-weight:bold">this&lt;/span>.props;
&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> { navigation } = &lt;span style="color:#fb660a;font-weight:bold">this&lt;/span>.props;
&lt;span style="color:#fb660a;font-weight:bold">return&lt;/span> (
&amp;lt;View style={styles.container}&amp;gt;
&amp;lt;TouchableOpacity
onPress={() =&amp;gt; {
navigation.navigate(&lt;span style="color:#0086d2">&amp;#34;Details&amp;#34;&lt;/span>, {
movie: movie,
});
}}
&amp;gt;
&amp;lt;Text style={styles.text}&amp;gt;
{movie.title} ({movie.year})
&amp;lt;/Text&amp;gt;
&amp;lt;/TouchableOpacity&amp;gt;
&amp;lt;/View&amp;gt;
);
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="détails-sur-un-film">Détails sur un film&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-js" data-lang="js">&lt;span style="color:#fb660a;font-weight:bold">export&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">default&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">class&lt;/span> DetailsScreen &lt;span style="color:#fb660a;font-weight:bold">extends&lt;/span> React.Component {
render() {
&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> { navigation } = &lt;span style="color:#fb660a;font-weight:bold">this&lt;/span>.props;
&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> movie = navigation.getParam(&lt;span style="color:#0086d2">&amp;#34;movie&amp;#34;&lt;/span>);
&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> imageUrl = imagesEndpoint + movie.image;
&lt;span style="color:#fb660a;font-weight:bold">return&lt;/span> (
&amp;lt;View style={styles.container}&amp;gt;
&amp;lt;Text style={styles.title}&amp;gt;
{movie.title} ({movie.year})
&amp;lt;/Text&amp;gt;
&amp;lt;Text style={styles.director}&amp;gt;Réalisateur(s) : {movie.director}&amp;lt;/Text&amp;gt;
&amp;lt;Text style={styles.description}&amp;gt;{movie.shortDescription}&amp;lt;/Text&amp;gt;
&amp;lt;Image style={styles.image} source={{ uri: imageUrl }}&amp;gt;&amp;lt;/Image&amp;gt;
&amp;lt;/View&amp;gt;
);
}
}
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>ASP.NET Core</title><link>https://www.bpesquet.fr/slides/asp-net-core/</link><pubDate>Tue, 21 Sep 2021 09:40:11 +0200</pubDate><guid>https://www.bpesquet.fr/slides/asp-net-core/</guid><description>&lt;h2 id="sommaire">Sommaire&lt;/h2>
&lt;ul>
&lt;li>Introduction à .NET&lt;/li>
&lt;li>Présentation de ASP.NET Core&lt;/li>
&lt;li>Le framework ASP.NET Core MVC&lt;/li>
&lt;li>Mécanismes fondamentaux&lt;/li>
&lt;li>Création d&amp;rsquo;API web&lt;/li>
&lt;li>Interactions avec une base de données&lt;/li>
&lt;li>Tests&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="introduction-à-net">Introduction à .NET&lt;/h2>
&lt;hr>
&lt;h3 id="aux-origines-de-net">Aux origines de .NET&lt;/h3>
&lt;ul>
&lt;li>Plate-forme de développement d&amp;rsquo;applications créée par Microsoft en 2002.&lt;/li>
&lt;li>Réponse à la domination du langage Java (multi-plateformes).&lt;/li>
&lt;li>Inclut plusieurs langages de programmation : C#, VB.NET, F#, PowerShell&amp;hellip;&lt;/li>
&lt;li>Uniquement disponible sous Windows.&lt;/li>
&lt;li>Licence propriétaire.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;p>&lt;a href="https://en.wikipedia.org/wiki/.NET_Framework">&lt;img src="images/dotnet_stack.png" alt="Pile .NET">&lt;/a>&lt;/p>
&lt;hr>
&lt;section data-shortcode-section>
&lt;h3 id="architecture-technique-de-net">Architecture technique de .NET&lt;/h3>
&lt;ul>
&lt;li>Une application .NET s&amp;rsquo;exécute dans un environnement contrôlé appelé &lt;strong>CLR&lt;/strong> (&lt;em>Common Language Runtime&lt;/em>).&lt;/li>
&lt;li>La compilation du code source produit un résultat indépendant du système d&amp;rsquo;exploitation, conformément à un standard nommé &lt;strong>CLI&lt;/strong> (&lt;em>Common Language Infrastructure&lt;/em>).&lt;/li>
&lt;/ul>
&lt;hr>
&lt;p>&lt;a href="https://en.wikipedia.org/wiki/Common_Language_Infrastructure">&lt;img src="images/dotnet_cli_clr.png" alt="CLI et CLR">&lt;/a>
&lt;/section>
&lt;hr>
&lt;h3 id="net-framework-et-net-core">.NET Framework et .NET Core&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="https://www.mono-project.com/docs/about-mono/history/">2004&lt;/a> : le projet &lt;strong>Mono&lt;/strong>, indépendant de Microsoft, débute le portage de .NET vers Linux.&lt;/li>
&lt;li>&lt;a href="https://devblogs.microsoft.com/dotnet/net-core-is-open-source/">2014&lt;/a> : Microsoft publie &lt;strong>.NET Core&lt;/strong>, la première version open source et multi-plateformes de .NET. La version WIndows-only de .NET est renommée &lt;strong>.NET Framework&lt;/strong>.&lt;/li>
&lt;li>&lt;a href="https://devblogs.microsoft.com/dotnet/net-core-is-the-future-of-net/">2019&lt;/a> : la nouvelle version de .NET Core est renommée &lt;strong>.NET&lt;/strong>, et .NET Framework passe en mode maintenance.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;p>&lt;a href="https://devblogs.microsoft.com/dotnet/introducing-net-5/">&lt;img src="images/dotnet5_platform.png" alt=".NET 5">&lt;/a>&lt;/p>
&lt;hr>
&lt;h2 id="la-ligne-de-commande-net">La ligne de commande .NET&lt;/h2>
&lt;hr>
&lt;h3 id="introduction">Introduction&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>.NET CLI&lt;/strong> (&lt;em>Command Line Interface&lt;/em>) permet d&amp;rsquo;interagir avec .NET depuis un terminal.&lt;/li>
&lt;li>Nécessite que .NET soit installé sur la machine.&lt;/li>
&lt;li>Syntaxe : &lt;code>dotnet &amp;lt;commande&amp;gt; &amp;lt;options&amp;gt;&lt;/code>&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="création-dune-application">Création d&amp;rsquo;une application&lt;/h3>
&lt;p>&lt;code>&amp;gt; dotnet new &amp;lt;template&amp;gt; -o &amp;lt;output directory&amp;gt;&lt;/code>&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Type d&amp;rsquo;application&lt;/th>
&lt;th>Template&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Console&lt;/td>
&lt;td>&lt;code>console&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Bibliothèque de classes&lt;/td>
&lt;td>&lt;code>classlib&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ASP.NET (vide)&lt;/td>
&lt;td>&lt;code>web&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ASP.NET (API)&lt;/td>
&lt;td>&lt;code>webapi&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ASP.NET (MVC)&lt;/td>
&lt;td>&lt;code>mvc&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;hr>
&lt;h3 id="ajout-de-packages">Ajout de packages&lt;/h3>
&lt;p>&lt;code>&amp;gt; dotnet add package &amp;lt;name&amp;gt;&lt;/code>&lt;/p>
&lt;ul>
&lt;li>Utilise &lt;a href="https://www.nuget.org/">NuGet&lt;/a> en arrière-plan.&lt;/li>
&lt;li>Vérifie la compatibilité du package à installer avec le projet.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="listage-des-packages-installés">Listage des packages installés&lt;/h3>
&lt;p>&lt;code>&amp;gt; dotnet list package&lt;/code>&lt;/p>
&lt;hr>
&lt;h3 id="lancement-dune-application">Lancement d&amp;rsquo;une application&lt;/h3>
&lt;p>&lt;code>&amp;gt; dotnet run&lt;/code>&lt;/p>
&lt;p>Si nécessaire, effectue la restauration des dépendances du projet (équivalent de &lt;code>dotnet restore&lt;/code>).&lt;/p>
&lt;hr>
&lt;h3 id="surveillance-des-changements">Surveillance des changements&lt;/h3>
&lt;p>&lt;code>&amp;gt; dotnet watch run&lt;/code>&lt;/p>
&lt;p>Pour une application web, jnjecte un script qui met à jour le contenu affiché par le navigateur lorsque des fichiers surveillés sont modifiés.&lt;/p>
&lt;hr>
&lt;h3 id="autres-possibilités">Autres possibilités&lt;/h3>
&lt;ul>
&lt;li>Nettoyage, test, publication, gestion des packages installés, etc.&lt;/li>
&lt;li>&lt;a href="https://docs.microsoft.com/en-us/dotnet/core/tools/">Plus d&amp;rsquo;informations&lt;/a>.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="présentation-de-aspnet-core">Présentation de ASP.NET Core&lt;/h2>
&lt;hr>
&lt;h3 id="histoire-daspnet-core">Histoire d&amp;rsquo;ASP.NET Core&lt;/h3>
&lt;ul>
&lt;li>A l&amp;rsquo;origine, .NET (Framework) incluait une technologie de création de pages web dynamiques nommée &lt;strong>ASP.NET&lt;/strong> (&lt;em>Active Server Pages&lt;/em>).&lt;/li>
&lt;li>&lt;strong>ASP.NET Core&lt;/strong> est une réécriture d&amp;rsquo;ASP.NET basée sur .NET (Core).&lt;/li>
&lt;li>Standard actuel pour le développement web sous .NET.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="points-clés-daspnet-core">Points-clés d&amp;rsquo;ASP.NET Core&lt;/h3>
&lt;ul>
&lt;li>Permet de créer des applications web et des services web (API) utilisés comme &lt;em>backends&lt;/em> par des clients riches ou des applications mobiles.&lt;/li>
&lt;li>Léger, moderne et modulaire.&lt;/li>
&lt;li>Inclut des technologies facilitant la gestion des pages dynamiques, des appels temps réel, des tests, etc.&lt;/li>
&lt;li>Déployable sur plusieurs serveurs web : Kestrel, Apache, nginx, etc.&lt;/li>
&lt;li>Multi-plateformes et &lt;a href="https://github.com/dotnet/aspnetcore">open source&lt;/a>.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="ui-générée-côté-serveur">UI générée côté serveur&lt;/h3>
&lt;p>Code HTML et CSS généré côté serveur, puis renvoyée au client.&lt;/p>
&lt;ul>
&lt;li>Peu d&amp;rsquo;exigences techniques côté client (navigateur simple, trafic réseau limité).&lt;/li>
&lt;li>Accès BD et contrôles centralisés.&lt;/li>
&lt;li>Exemples d&amp;rsquo;usages : sites dynamiques, blogs, CMS.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="ui-générée-côté-client">UI générée côté client&lt;/h3>
&lt;p>Structure HTML (DOM) mise à jour dynamiquement côté client grâce à des appels asynchrones au serveur.&lt;/p>
&lt;ul>
&lt;li>Interactions riches avec l&amp;rsquo;utilisateur.&lt;/li>
&lt;li>Capacités matérielles et logicielles du client utilisables.&lt;/li>
&lt;li>Exemples d&amp;rsquo;usages : tableau de bord interactif, applications collaboratives.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="loffre-technique-aspnet-core">L&amp;rsquo;offre technique ASP.NET Core&lt;/h3>
&lt;ul>
&lt;li>UI générée côté serveur : &lt;strong>Razor Pages&lt;/strong>, &lt;strong>MVC&lt;/strong>.&lt;/li>
&lt;li>UI générée côté client : &lt;strong>Blazor&lt;/strong>, &lt;strong>SPA&lt;/strong> avec Angular ou React.&lt;/li>
&lt;li>Une approche hybride est possible (exemple : MVC + Blazor).&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="le-framework-aspnet-core-mvc">Le framework ASP.NET Core MVC&lt;/h2>
&lt;hr>
&lt;section data-shortcode-section>
&lt;h3 id="rappel--le-fonctionnement-du-web">Rappel : le fonctionnement du web&lt;/h3>
&lt;p>Le web est basé sur un modèle &lt;strong>client/serveur&lt;/strong> :&lt;/p>
&lt;ul>
&lt;li>Le client (navigateur, application mobile, robot d&amp;rsquo;indexation, etc) envoie une demande (&lt;strong>requête&lt;/strong>) au serveur.&lt;/li>
&lt;li>Le serveur prépare sa &lt;strong>réponse&lt;/strong> à la requête du client, puis la lui renvoie.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;p>&lt;img src="images/web_request_response.png" alt="Modèle requête/réponse du web">&lt;/p>
&lt;/section>
&lt;hr>
&lt;h3 id="le-protocole-http">Le protocole HTTP&lt;/h3>
&lt;ul>
&lt;li>&lt;em>HyperText Transfer Protocol&lt;/em>.&lt;/li>
&lt;li>Socle technique du web.&lt;/li>
&lt;li>Equivalent sécurisé : &lt;strong>HTTPS&lt;/strong>.&lt;/li>
&lt;li>Basé sur des &lt;strong>commandes&lt;/strong> textuelles exprimant les différentes actions possibles : &lt;em>GET&lt;/em>, &lt;em>PUT&lt;/em>, &lt;em>POST&lt;/em>, etc).&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="larchitecture-mvc">L&amp;rsquo;architecture MVC&lt;/h3>
&lt;ul>
&lt;li>&lt;em>Model-View-Controller&lt;/em> (&lt;em>Modèle-Vue-Contrôleur&lt;/em>).&lt;/li>
&lt;li>Décomposition d’une application en trois grandes parties :
&lt;ul>
&lt;li>&lt;strong>Modèle&lt;/strong> : accès aux données et logique métier (&lt;em>business logic&lt;/em>).&lt;/li>
&lt;li>&lt;strong>Vue&lt;/strong> : affichage et interactions avec l’utilisateur.&lt;/li>
&lt;li>&lt;strong>Contrôleur&lt;/strong> : dynamique de l’application, lien entre Modèle et Vue.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Application du principe de séparation des responsabilités.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="mvc--un-peu-dhistoire">MVC : un peu d&amp;rsquo;histoire&lt;/h3>
&lt;ul>
&lt;li>Apparu à la fin des années 1970 pour le langage OO &lt;strong>Smalltalk&lt;/strong>. Objectif : séparer le code de l’IHM de la logique applicative.&lt;/li>
&lt;li>Appliqué depuis dans de très nombreux contextes et langages :
&lt;ul>
&lt;li>web côté serveur : frameworks Symfony (PHP), Django (Python), Rails (Ruby), etc.&lt;/li>
&lt;li>web côté client : frameworks Angular, Ember (JavaScript), etc.&lt;/li>
&lt;li>desktop : bibliothèque Swing (Java), etc.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;p>&lt;a href="https://symfony.com/doc/current/index.html">&lt;img src="images/symfony_mvc.png" alt="Dynamique d&amp;rsquo;un serveur web MVC">&lt;/a>&lt;/p>
&lt;hr>
&lt;h3 id="avantages-et-inconvénients">Avantages et inconvénients&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>Avantages :&lt;/p>
&lt;ul>
&lt;li>Clarification de l’architecture.&lt;/li>
&lt;li>Séparation nette des responsabilités =&amp;gt; couplage faible, cohésion forte, maintenance et évolutions facilitées.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Inconvénients :&lt;/p>
&lt;ul>
&lt;li>Complexification de l’architecture.&lt;/li>
&lt;li>Rigidité.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="aspnet-core-mvc">ASP.NET Core MVC&lt;/h3>
&lt;ul>
&lt;li>Framework de création d&amp;rsquo;applications web basées sur l&amp;rsquo;architecture MVC.&lt;/li>
&lt;li>Implémente de nombreux services et bonnes pratiques, parmi lesquels :
&lt;ul>
&lt;li>Routage des requêtes entrantes.&lt;/li>
&lt;li>Gestion des pages dynamiques.&lt;/li>
&lt;li>Authentification.&lt;/li>
&lt;li>Injection de dépendance.&lt;/li>
&lt;li>Tests.&lt;/li>
&lt;li>&amp;hellip;&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="structure-dune-application-aspnet-core-mvc">Structure d&amp;rsquo;une application ASP.NET Core MVC&lt;/h3>
&lt;p>&lt;img src="images/aspnetcoremvc_structure.png" alt="Structure d&amp;rsquo;une application ASP.NET Core MVC">&lt;/p>
&lt;hr>
&lt;h3 id="les-contrôleurs">Les contrôleurs&lt;/h3>
&lt;ul>
&lt;li>Créés dans le répertoire &lt;code>Controllers/&lt;/code>.&lt;/li>
&lt;li>Héritent de la classe abstraite &lt;code>Controller&lt;/code>.&lt;/li>
&lt;li>Définissent les points d&amp;rsquo;entrée dans l&amp;rsquo;application sous la forme de méthodes d&amp;rsquo;action annotables.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="color:#fb660a;font-weight:bold">public&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">class&lt;/span> MoviesController : Controller
{
&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// GET: Movies/Details/5
&lt;/span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">public&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">async&lt;/span> Task&amp;lt;IActionResult&amp;gt; Details(&lt;span style="color:#cdcaa9;font-weight:bold">int?&lt;/span> id)
{
&lt;span style="color:#080;background-color:#0f140f;font-style:italic">//...
&lt;/span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> }
&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// POST: Movies/Delete/5
&lt;/span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>&lt;span style="color:#ff0086;font-weight:bold"> [HttpPost, ActionName(&amp;#34;Delete&amp;#34;)]&lt;/span>
&lt;span style="color:#ff0086;font-weight:bold"> [ValidateAntiForgeryToken]&lt;/span>
&lt;span style="color:#fb660a;font-weight:bold">public&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">async&lt;/span> Task&amp;lt;IActionResult&amp;gt; DeleteConfirmed(&lt;span style="color:#cdcaa9;font-weight:bold">int&lt;/span> id)
{
&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// ...
&lt;/span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> }
&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="les-modèles">Les modèles&lt;/h3>
&lt;ul>
&lt;li>Créés dans le répertoire &lt;code>Models/&lt;/code>.&lt;/li>
&lt;li>Implémentent la logique métier de l&amp;rsquo;application sous la forme de classes &lt;strong>POCO&lt;/strong> (&lt;em>Plain Old CLR Objects&lt;/em>) souvent associées à des tables BD.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="color:#fb660a;font-weight:bold">public&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">class&lt;/span> Movie
{
&lt;span style="color:#fb660a;font-weight:bold">public&lt;/span> &lt;span style="color:#cdcaa9;font-weight:bold">int&lt;/span> Id { &lt;span style="color:#fb660a;font-weight:bold">get&lt;/span>; &lt;span style="color:#fb660a;font-weight:bold">set&lt;/span>; }
&lt;span style="color:#ff0086;font-weight:bold">
&lt;/span>&lt;span style="color:#ff0086;font-weight:bold"> [StringLength(60, MinimumLength = 3)]&lt;/span>
&lt;span style="color:#fb660a;font-weight:bold">public&lt;/span> &lt;span style="color:#cdcaa9;font-weight:bold">string&lt;/span> Title { &lt;span style="color:#fb660a;font-weight:bold">get&lt;/span>; &lt;span style="color:#fb660a;font-weight:bold">set&lt;/span>; }
&lt;span style="color:#ff0086;font-weight:bold">
&lt;/span>&lt;span style="color:#ff0086;font-weight:bold"> [Display(Name = &amp;#34;Release Date&amp;#34;), DataType(DataType.Date)]&lt;/span>
&lt;span style="color:#fb660a;font-weight:bold">public&lt;/span> DateTime ReleaseDate { &lt;span style="color:#fb660a;font-weight:bold">get&lt;/span>; &lt;span style="color:#fb660a;font-weight:bold">set&lt;/span>; }
&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// ...
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="les-vues">Les vues&lt;/h3>
&lt;ul>
&lt;li>Créés dans le répertoire &lt;code>Views/[Controller]&lt;/code> sous la forme de fichiers Razor (&lt;code>.cshtml&lt;/code>).&lt;/li>
&lt;li>Représentent l&amp;rsquo;interface utilisateur (UI) de l&amp;rsquo;application.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">@{
ViewData[&lt;span style="color:#0086d2">&amp;#34;Title&amp;#34;&lt;/span>] = &lt;span style="color:#0086d2">&amp;#34;About&amp;#34;&lt;/span>;
}
&amp;lt;h2&amp;gt;@ViewData[&lt;span style="color:#0086d2">&amp;#34;Title&amp;#34;&lt;/span>].&amp;lt;/h2&amp;gt;
&amp;lt;h3&amp;gt;@ViewData[&lt;span style="color:#0086d2">&amp;#34;Message&amp;#34;&lt;/span>]&amp;lt;/h3&amp;gt;
&amp;lt;p&amp;gt;Use &lt;span style="color:#fb660a;font-weight:bold">this&lt;/span> area to provide additional information.&amp;lt;/p&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="code-et-librairies-client">Code et librairies client&lt;/h3>
&lt;ul>
&lt;li>Regroupés dans le répertoire &lt;code>wwwroot/&lt;/code>.&lt;/li>
&lt;li>Rassemblent les fichiers CSS et JavaScript utilisés côté client.&lt;/li>
&lt;li>Incluent par défaut Bootstrap et jQuery.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="le-fichier-appsettingsjson">Le fichier appsettings.json&lt;/h3>
&lt;p>Centralise les paramètres de configuration de l&amp;rsquo;application.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-json" data-lang="json">{
&lt;span style="color:#fb660a;font-weight:bold">&amp;#34;Logging&amp;#34;&lt;/span>: {
&lt;span style="color:#fb660a;font-weight:bold">&amp;#34;LogLevel&amp;#34;&lt;/span>: {
&lt;span style="color:#fb660a;font-weight:bold">&amp;#34;Default&amp;#34;&lt;/span>: &lt;span style="color:#0086d2">&amp;#34;Information&amp;#34;&lt;/span>,
&lt;span style="color:#fb660a;font-weight:bold">&amp;#34;Microsoft&amp;#34;&lt;/span>: &lt;span style="color:#0086d2">&amp;#34;Warning&amp;#34;&lt;/span>,
&lt;span style="color:#fb660a;font-weight:bold">&amp;#34;Microsoft.Hosting.Lifetime&amp;#34;&lt;/span>: &lt;span style="color:#0086d2">&amp;#34;Information&amp;#34;&lt;/span>,
&lt;span style="color:#fb660a;font-weight:bold">&amp;#34;Microsoft.EntityFrameworkCore.Database.Command&amp;#34;&lt;/span>: &lt;span style="color:#0086d2">&amp;#34;Information&amp;#34;&lt;/span>
}
},
&lt;span style="color:#fb660a;font-weight:bold">&amp;#34;AllowedHosts&amp;#34;&lt;/span>: &lt;span style="color:#0086d2">&amp;#34;*&amp;#34;&lt;/span>,
&lt;span style="color:#fb660a;font-weight:bold">&amp;#34;ConnectionStrings&amp;#34;&lt;/span>: {
&lt;span style="color:#fb660a;font-weight:bold">&amp;#34;MvcMovieContext&amp;#34;&lt;/span>: &lt;span style="color:#0086d2">&amp;#34;Data Source=MvcMovieContext-8719dcdb-c317-48bf-9cd8-a4c4167ce370.db&amp;#34;&lt;/span>
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;section data-shortcode-section>
&lt;h3 id="le-fichier-startupcs">Le fichier Startup.cs&lt;/h3>
&lt;p>Contient la classe &lt;code>Startup&lt;/code> qui permet :&lt;/p>
&lt;ul>
&lt;li>la configuration des services utilisés par l&amp;rsquo;application ;&lt;/li>
&lt;li>la définition du &lt;em>pipeline&lt;/em> de gestion des requêtes HTTP entrantes.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="exemple-de-classe-startup">Exemple de classe Startup&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="color:#fb660a;font-weight:bold">public&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">class&lt;/span> Startup
{
&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Use this method to add services to the container.
&lt;/span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">public&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">void&lt;/span> ConfigureServices(IServiceCollection services)
{
services.AddControllersWithViews();
}
&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Use this method to configure the HTTP request pipeline.
&lt;/span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">public&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">void&lt;/span> Configure(IApplicationBuilder app, IWebHostEnvironment env)
{
app.UseHttpsRedirection();
app.UseStaticFiles();
app.UseRouting();
app.UseAuthorization();
app.UseEndpoints(endpoints =&amp;gt;
{
endpoints.MapDefaultControllerRoute();
});
}
}
&lt;/code>&lt;/pre>&lt;/div>
&lt;/section>
&lt;hr>
&lt;h2 id="mécanismes-fondamentaux">Mécanismes fondamentaux&lt;/h2>
&lt;hr>
&lt;section data-shortcode-section>
&lt;h3 id="routage-des-requêtes">Routage des requêtes&lt;/h3>
&lt;ul>
&lt;li>Associe les requêtes HTTP entrantes au code à éxécuter (méthodes des contrôleurs).&lt;/li>
&lt;li>Permet à l&amp;rsquo;application web d&amp;rsquo;utiliser des URL propres et &lt;em>SEO-friendly&lt;/em>, plutôt que des noms de fichiers.&lt;/li>
&lt;li>&lt;a href="https://docs.microsoft.com/en-us/aspnet/core/mvc/controllers/routing?view=aspnetcore-5.0">Plus d&amp;rsquo;informations&lt;/a>.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="routage-par-convention">Routage par convention&lt;/h3>
&lt;ul>
&lt;li>Permet de définir globalement la correspondance entre le format de l&amp;rsquo;URL et la méthode d&amp;rsquo;action d&amp;rsquo;un contrôleur à exécuter.&lt;/li>
&lt;li>Format par défaut : &lt;code>/[Controller]/[ActionName]/[Parameters]&lt;/code>.&lt;/li>
&lt;li>Exemple : &lt;code>https://myapp/Student/Details/Code=137&lt;/code> appelle la méthode &lt;code>Details&lt;/code> du contrôleur &lt;code>StudentController&lt;/code>, en lui passant un paramètre nommé &lt;code>Code&lt;/code> ayant la valeur 137.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="configuration-du-routage-par-convention-dans-startup">Configuration du routage par convention dans Startup&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="color:#fb660a;font-weight:bold">public&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">void&lt;/span> Configure(IApplicationBuilder app, IWebHostEnvironment env)
{
&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// ...
&lt;/span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> app.UseEndpoints(endpoints =&amp;gt;
{
endpoints.MapControllerRoute(
name: &lt;span style="color:#0086d2">&amp;#34;default&amp;#34;&lt;/span>,
pattern: &lt;span style="color:#0086d2">&amp;#34;{controller=Home}/{action=Index}/{id?}&amp;#34;&lt;/span>);
});
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>Home&lt;/code>, &lt;code>Index&lt;/code> et &lt;code>id&lt;/code> sont resp. les noms par défaut du contrôleur, de l&amp;rsquo;action et du paramètre (optionnel).&lt;/p>
&lt;/section>
&lt;hr>
&lt;h3 id="scaffolding">Scaffolding&lt;/h3>
&lt;p>&lt;code>&amp;gt; dotnet-aspnet-codegenerator [arguments]&lt;/code>&lt;/p>
&lt;ul>
&lt;li>Permet de générer le code source pour les opérations élémentaires &lt;strong>CRUD&lt;/strong> (&lt;em>Create, Read, Update, Delete&lt;/em>) liées à une classe du Modèle.&lt;/li>
&lt;li>&lt;a href="https://docs.microsoft.com/en-us/aspnet/core/fundamentals/tools/dotnet-aspnet-codegenerator?view=aspnetcore-5.0">Plus d&amp;rsquo;informations&lt;/a>.&lt;/li>
&lt;li>&lt;a href="https://github.com/ensc-glog/MvcMovie/commit/f5c4ec45033f5509ec736bc1bebf010f200921f0">Exemple de résultat&lt;/a>.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="database-context">Database context&lt;/h3>
&lt;ul>
&lt;li>Hérite de la classe abstraite &lt;code>DbContext&lt;/code>.&lt;/li>
&lt;li>Spécifie les classes du modèle à sauvegarder dans la base de données.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="color:#fb660a;font-weight:bold">public&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">class&lt;/span> MvcMovieContext : DbContext
{
&lt;span style="color:#fb660a;font-weight:bold">public&lt;/span> MvcMovieContext(DbContextOptions&amp;lt;MvcMovieContext&amp;gt; options)
: &lt;span style="color:#fb660a;font-weight:bold">base&lt;/span>(options)
{}
&lt;span style="color:#fb660a;font-weight:bold">public&lt;/span> DbSet&amp;lt;MvcMovie.Models.Movie&amp;gt; Movie { &lt;span style="color:#fb660a;font-weight:bold">get&lt;/span>; &lt;span style="color:#fb660a;font-weight:bold">set&lt;/span>; }
}
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="color:#fb660a;font-weight:bold">public&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">void&lt;/span> ConfigureServices(IServiceCollection services)
{
&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// ...
&lt;/span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> services.AddDbContext&amp;lt;MvcMovieContext&amp;gt;(options =&amp;gt;
options.UseSqlite(Configuration.GetConnectionString(&lt;span style="color:#0086d2">&amp;#34;MvcMovieContext&amp;#34;&lt;/span>)));
}
&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="migrations">Migrations&lt;/h3>
&lt;p>&lt;code>&amp;gt; dotnet ef migrations add InitialCreate&lt;/code>&lt;/p>
&lt;p>&lt;code>&amp;gt; dotnet ef database update&lt;/code>&lt;/p>
&lt;ul>
&lt;li>Permettent à la base de données d&amp;rsquo;être synchronisée avec les évolutions du Modèle, sans perte de données.&lt;/li>
&lt;li>Migration = évolution incrémentale depuis la migration précédente.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;section data-shortcode-section>
&lt;h3 id="envoi-de-données-aux-vues--viewdata">Envoi de données aux vues : ViewData&lt;/h3>
&lt;p>Approche &lt;em>faiblement typée&lt;/em> : on utilie un dictionnaire standard.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="color:#fb660a;font-weight:bold">public&lt;/span> IActionResult Welcome(&lt;span style="color:#cdcaa9;font-weight:bold">string&lt;/span> name, &lt;span style="color:#cdcaa9;font-weight:bold">int&lt;/span> numTimes = &lt;span style="color:#0086f7;font-weight:bold">1&lt;/span>)
{
ViewData[&lt;span style="color:#0086d2">&amp;#34;Message&amp;#34;&lt;/span>] = &lt;span style="color:#0086d2">&amp;#34;Hello &amp;#34;&lt;/span> + name;
ViewData[&lt;span style="color:#0086d2">&amp;#34;NumTimes&amp;#34;&lt;/span>] = numTimes;
&lt;span style="color:#fb660a;font-weight:bold">return&lt;/span> View();
}
&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="utilisation-dans-la-vue">Utilisation dans la vue&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">@{
ViewData[&lt;span style="color:#0086d2">&amp;#34;Title&amp;#34;&lt;/span>] = &lt;span style="color:#0086d2">&amp;#34;Welcome&amp;#34;&lt;/span>;
}
&amp;lt;h2&amp;gt;Welcome&amp;lt;/h2&amp;gt;
&amp;lt;ul&amp;gt;
@for (&lt;span style="color:#cdcaa9;font-weight:bold">int&lt;/span> i = &lt;span style="color:#0086f7;font-weight:bold">0&lt;/span>; i &amp;lt; (&lt;span style="color:#cdcaa9;font-weight:bold">int&lt;/span>)ViewData[&lt;span style="color:#0086d2">&amp;#34;NumTimes&amp;#34;&lt;/span>]; i++)
{
&amp;lt;li&amp;gt;@ViewData[&lt;span style="color:#0086d2">&amp;#34;Message&amp;#34;&lt;/span>]&amp;lt;/li&amp;gt;
}
&amp;lt;/ul&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>
&lt;/section>
&lt;hr>
&lt;section data-shortcode-section>
&lt;h3 id="envoi-de-données-aux-vues--viewmodel">Envoi de données aux vues : ViewModel&lt;/h3>
&lt;p>Approche &lt;em>fortement typée&lt;/em> : on définit une classe pour porter les données de la vue.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="color:#fb660a;font-weight:bold">public&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">class&lt;/span> Address
{
&lt;span style="color:#fb660a;font-weight:bold">public&lt;/span> &lt;span style="color:#cdcaa9;font-weight:bold">string&lt;/span> Name { &lt;span style="color:#fb660a;font-weight:bold">get&lt;/span>; &lt;span style="color:#fb660a;font-weight:bold">set&lt;/span>; }
&lt;span style="color:#fb660a;font-weight:bold">public&lt;/span> &lt;span style="color:#cdcaa9;font-weight:bold">string&lt;/span> Street { &lt;span style="color:#fb660a;font-weight:bold">get&lt;/span>; &lt;span style="color:#fb660a;font-weight:bold">set&lt;/span>; }
&lt;span style="color:#fb660a;font-weight:bold">public&lt;/span> &lt;span style="color:#cdcaa9;font-weight:bold">string&lt;/span> City { &lt;span style="color:#fb660a;font-weight:bold">get&lt;/span>; &lt;span style="color:#fb660a;font-weight:bold">set&lt;/span>; }
&lt;span style="color:#fb660a;font-weight:bold">public&lt;/span> &lt;span style="color:#cdcaa9;font-weight:bold">string&lt;/span> State { &lt;span style="color:#fb660a;font-weight:bold">get&lt;/span>; &lt;span style="color:#fb660a;font-weight:bold">set&lt;/span>; }
&lt;span style="color:#fb660a;font-weight:bold">public&lt;/span> &lt;span style="color:#cdcaa9;font-weight:bold">string&lt;/span> PostalCode { &lt;span style="color:#fb660a;font-weight:bold">get&lt;/span>; &lt;span style="color:#fb660a;font-weight:bold">set&lt;/span>; }
}
&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="utilisation-dans-le-contrôleur">Utilisation dans le contrôleur&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="color:#fb660a;font-weight:bold">public&lt;/span> IActionResult Contact()
{
&lt;span style="color:#cdcaa9;font-weight:bold">var&lt;/span> viewModel = &lt;span style="color:#fb660a;font-weight:bold">new&lt;/span> Address()
{
Name = &lt;span style="color:#0086d2">&amp;#34;Microsoft&amp;#34;&lt;/span>,
Street = &lt;span style="color:#0086d2">&amp;#34;One Microsoft Way&amp;#34;&lt;/span>,
City = &lt;span style="color:#0086d2">&amp;#34;Redmond&amp;#34;&lt;/span>,
State = &lt;span style="color:#0086d2">&amp;#34;WA&amp;#34;&lt;/span>,
PostalCode = &lt;span style="color:#0086d2">&amp;#34;98052-6399&amp;#34;&lt;/span>
};
&lt;span style="color:#fb660a;font-weight:bold">return&lt;/span> View(viewModel);
}
&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="utilisation-dans-la-vue">Utilisation dans la vue&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">@model WebApplication1.ViewModels.Address
&lt;p>&amp;lt;&lt;span style="color:#fb660a;font-weight:bold">h2&lt;/span>&amp;gt;Contact&amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">h2&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#fb660a;font-weight:bold">address&lt;/span>&amp;gt;
@Model.Street&amp;lt;&lt;span style="color:#fb660a;font-weight:bold">br&lt;/span> /&amp;gt;
@Model.City, @Model.State @Model.PostalCode&amp;lt;&lt;span style="color:#fb660a;font-weight:bold">br&lt;/span> /&amp;gt;
&amp;lt;&lt;span style="color:#fb660a;font-weight:bold">abbr&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">title&lt;/span>=&lt;span style="color:#0086d2">&amp;quot;Phone&amp;quot;&lt;/span>&amp;gt;P:&amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">abbr&lt;/span>&amp;gt; 425.555.0100
&amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">address&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;/p>
&lt;/section>
&lt;hr>
&lt;section data-shortcode-section>
&lt;h3 id="view-layout">View layout&lt;/h3>
&lt;ul>
&lt;li>Par défaut, toutes les vues partagent une structure commune définie dans le fichier &lt;code>Views/Shared/_Layout.cshtml&lt;/code>.&lt;/li>
&lt;li>Dans ce layout, la fonction &lt;code>@RenderBody()&lt;/code> permet de générer le contenu spécifique de la vue à afficher.&lt;/li>
&lt;li>Les éléments spécifiques à une vue (exemples : inclusions CSS ou JavaScript) peuvent être rassemblés dans des &lt;strong>sections&lt;/strong> affichées par le layout.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="exemple-de-layout">Exemple de layout&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&lt;span style="color:#ff0007;background-color:#0f140f;font-weight:bold;font-style:italic">&amp;lt;!DOCTYPE html&amp;gt;&lt;/span>
&amp;lt;&lt;span style="color:#fb660a;font-weight:bold">html&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">lang&lt;/span>=&lt;span style="color:#0086d2">&amp;#34;en&amp;#34;&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#fb660a;font-weight:bold">head&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#fb660a;font-weight:bold">meta&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">charset&lt;/span>=&lt;span style="color:#0086d2">&amp;#34;utf-8&amp;#34;&lt;/span> /&amp;gt;
&amp;lt;&lt;span style="color:#fb660a;font-weight:bold">title&lt;/span>&amp;gt;@ViewData[&amp;#34;Title&amp;#34;] - Movie App&amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">title&lt;/span>&amp;gt;
&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&amp;lt;!-- ... --&amp;gt;&lt;/span>
&amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">head&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#fb660a;font-weight:bold">body&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#fb660a;font-weight:bold">header&lt;/span>&amp;gt;&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&amp;lt;!-- ... --&amp;gt;&lt;/span>&amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">header&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#fb660a;font-weight:bold">div&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">class&lt;/span>=&lt;span style="color:#0086d2">&amp;#34;container&amp;#34;&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#fb660a;font-weight:bold">main&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">role&lt;/span>=&lt;span style="color:#0086d2">&amp;#34;main&amp;#34;&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">class&lt;/span>=&lt;span style="color:#0086d2">&amp;#34;pb-3&amp;#34;&lt;/span>&amp;gt;@RenderBody()&amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">main&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">div&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#fb660a;font-weight:bold">footer&lt;/span>&amp;gt;&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&amp;lt;!-- ... --&amp;gt;&lt;/span>&amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">footer&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#fb660a;font-weight:bold">script&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">src&lt;/span>=&lt;span style="color:#0086d2">&amp;#34;~/lib/jquery/dist/jquery.min.js&amp;#34;&lt;/span>&amp;gt;&amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">script&lt;/span>&amp;gt;
&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&amp;lt;!-- ... --&amp;gt;&lt;/span>
@await RenderSectionAsync(&amp;#34;Scripts&amp;#34;, required: false)
&amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">body&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">html&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>
&lt;/section>
&lt;hr>
&lt;section data-shortcode-section>
&lt;h3 id="validation-des-données">Validation des données&lt;/h3>
&lt;p>L&amp;rsquo;annotation des classes du Modèle permet de définir des &lt;strong>règles de validation&lt;/strong> qui seront automatiquement vérifiées à la fois côté serveur et côté client.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="color:#fb660a;font-weight:bold">using&lt;/span> System.ComponentModel.DataAnnotations;
&lt;span style="color:#fb660a;font-weight:bold">public&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">class&lt;/span> LoginViewModel
{
&lt;span style="color:#ff0086;font-weight:bold"> [Required]&lt;/span>
&lt;span style="color:#ff0086;font-weight:bold"> [EmailAddress]&lt;/span>
&lt;span style="color:#fb660a;font-weight:bold">public&lt;/span> &lt;span style="color:#cdcaa9;font-weight:bold">string&lt;/span> Email { &lt;span style="color:#fb660a;font-weight:bold">get&lt;/span>; &lt;span style="color:#fb660a;font-weight:bold">set&lt;/span>; }
&lt;span style="color:#ff0086;font-weight:bold">
&lt;/span>&lt;span style="color:#ff0086;font-weight:bold"> [Required]&lt;/span>
&lt;span style="color:#ff0086;font-weight:bold"> [DataType(DataType.Password)]&lt;/span>
&lt;span style="color:#fb660a;font-weight:bold">public&lt;/span> &lt;span style="color:#cdcaa9;font-weight:bold">string&lt;/span> Password { &lt;span style="color:#fb660a;font-weight:bold">get&lt;/span>; &lt;span style="color:#fb660a;font-weight:bold">set&lt;/span>; }
&lt;span style="color:#ff0086;font-weight:bold">
&lt;/span>&lt;span style="color:#ff0086;font-weight:bold"> [Display(Name = &amp;#34;Remember me?&amp;#34;)]&lt;/span>
&lt;span style="color:#fb660a;font-weight:bold">public&lt;/span> &lt;span style="color:#cdcaa9;font-weight:bold">bool&lt;/span> RememberMe { &lt;span style="color:#fb660a;font-weight:bold">get&lt;/span>; &lt;span style="color:#fb660a;font-weight:bold">set&lt;/span>; }
}
&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="validation-dans-le-contrôleur">Validation dans le contrôleur&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="color:#fb660a;font-weight:bold">public&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">async&lt;/span> Task&amp;lt;IActionResult&amp;gt; Login(LoginViewModel model, &lt;span style="color:#cdcaa9;font-weight:bold">string&lt;/span> returnUrl = &lt;span style="color:#fb660a;font-weight:bold">null&lt;/span>)
{
&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Check model validation rules
&lt;/span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">if&lt;/span> (ModelState.IsValid)
{
&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// ... (nominal case: work with the model)
&lt;/span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> }
&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// At this point, something failed: redisplay form
&lt;/span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">return&lt;/span> View(model);
}
&lt;/code>&lt;/pre>&lt;/div>
&lt;/section>
&lt;hr>
&lt;section data-shortcode-section>
&lt;h3 id="environnements">Environnements&lt;/h3>
&lt;ul>
&lt;li>Permettent d&amp;rsquo;adapter la configuration de l&amp;rsquo;application au contexte (développement, test ou production).&lt;/li>
&lt;li>Définis par la variable d&amp;rsquo;environnement &lt;code>ASPNETCORE_ENVIRONMENT&lt;/code>. En l&amp;rsquo;absence de cette variable, l&amp;rsquo;environnement est de type Production.&lt;/li>
&lt;li>&lt;a href="https://docs.microsoft.com/en-us/aspnet/core/fundamentals/environments?view=aspnetcore-5.0">Plus d&amp;rsquo;informations&lt;/a>.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="définition-de-lenvironnement-avec-visual-studio-code">Définition de l&amp;rsquo;environnement avec Visual Studio Code&lt;/h3>
&lt;p>Fichier &lt;code>./vscode/launch.json&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-json" data-lang="json">{
&lt;span style="color:#fb660a;font-weight:bold">&amp;#34;version&amp;#34;&lt;/span>: &lt;span style="color:#0086d2">&amp;#34;0.2.0&amp;#34;&lt;/span>,
&lt;span style="color:#fb660a;font-weight:bold">&amp;#34;configurations&amp;#34;&lt;/span>: [
{
&lt;span style="color:#fb660a;font-weight:bold">&amp;#34;name&amp;#34;&lt;/span>: &lt;span style="color:#0086d2">&amp;#34;.NET Core Launch (web)&amp;#34;&lt;/span>,
# ...
&lt;span style="color:#fb660a;font-weight:bold">&amp;#34;env&amp;#34;&lt;/span>: {
&lt;span style="color:#fb660a;font-weight:bold">&amp;#34;ASPNETCORE_ENVIRONMENT&amp;#34;&lt;/span>: &lt;span style="color:#0086d2">&amp;#34;Development&amp;#34;&lt;/span>
},
# ...
}
]
}
&lt;p>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>&lt;/p>
&lt;h3 id="configuration-de-lapplication-selon-lenvironnement-détecté">Configuration de l&amp;rsquo;application selon l&amp;rsquo;environnement détecté&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="color:#fb660a;font-weight:bold">public&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">void&lt;/span> Configure(IApplicationBuilder app, IWebHostEnvironment env)
{
&lt;span style="color:#fb660a;font-weight:bold">if&lt;/span> (env.IsDevelopment())
{
app.UseDeveloperExceptionPage();
}
&lt;span style="color:#fb660a;font-weight:bold">if&lt;/span> (env.IsProduction() || env.IsStaging())
{
app.UseExceptionHandler(&lt;span style="color:#0086d2">&amp;#34;/Error&amp;#34;&lt;/span>);
}
&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// ...
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/section>
&lt;hr>
&lt;h2 id="création-dapi-web">Création d&amp;rsquo;API web&lt;/h2>
&lt;hr>
&lt;h3 id="la-notion-dapi">La notion d&amp;rsquo;API&lt;/h3>
&lt;p>Une &lt;strong>API&lt;/strong> (&lt;em>Application Programming Interface&lt;/em>) est un point d&amp;rsquo;entrée programmatique dans un système.&lt;/p>
&lt;p>Elle fournit un moyen d&amp;rsquo;interagir avec ce système.&lt;/p>
&lt;p>Les API permettent aux développeurs d&amp;rsquo;intégrer des services externes dans leurs applications.&lt;/p>
&lt;hr>
&lt;h3 id="spécificités-des-api-web">Spécificités des API web&lt;/h3>
&lt;p>Une &lt;strong>API web&lt;/strong> (appelée parfois service web) est une API accessible via les technologies du web : HTTP ou HTTPS.&lt;/p>
&lt;p>Les API web utilisent le plus souvent le format de donnée &lt;strong>JSON&lt;/strong>.&lt;/p>
&lt;p>Certaines sont librement utilisables, d&amp;rsquo;autres nécessitent une authentification du client.&lt;/p>
&lt;hr>
&lt;h3 id="exemples-dapi-web">Exemples d&amp;rsquo;API web&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="https://pokeapi.co/">PokéAPI&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://swapi.dev/">Star Wars API&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://en.wikipedia.org/w/api.php?">Wikipedia&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://developer.spotify.com/documentation/web-api/">Spotify&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.omdbapi.com/">OMDb API&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>(&lt;a href="https://shkspr.mobi/blog/2016/05/easy-apis-without-authentication/">Source&lt;/a>)&lt;/p>
&lt;hr>
&lt;h3 id="outils-pour-la-gestion-des-api-web">Outils pour la gestion des API web&lt;/h3>
&lt;ul>
&lt;li>N&amp;rsquo;importe quel navigateur pour les tests basiques.&lt;/li>
&lt;li>Extension &lt;a href="https://addons.mozilla.org/fr/firefox/addon/restclient/">RESTClient&lt;/a> pour Firefox.&lt;/li>
&lt;li>&lt;a href="https://www.getpostman.com/">Postman&lt;/a>.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="les-api-restful">Les API RESTful&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>REST&lt;/strong> (&lt;em>REpresentational State Transfer&lt;/em>) est un ensemble de principes pour créer des API : client/serveur, pas de gestion d&amp;rsquo;état, etc.&lt;/li>
&lt;li>Une API web &lt;em>RESTful&lt;/em> (conforme au standard REST) expose une interface basée sur les commandes HTTP. Exemples :
&lt;ul>
&lt;li>&lt;code>GET /&amp;lt;ResourceName&amp;gt;/&amp;lt;id&amp;gt;&lt;/code> pour accéder à une ressource.&lt;/li>
&lt;li>&lt;code>POST /&amp;lt;ResourceName&amp;gt;&lt;/code> (avec les informations nécessaires dans le corps de la requête) pour la créer.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;section data-shortcode-section>
&lt;h3 id="le-format-json">Le format JSON&lt;/h3>
&lt;ul>
&lt;li>JSON = JavaScript Object Notation.&lt;/li>
&lt;li>Format de description de données structurées inspiré de la syntaxe des objets JavaScript.&lt;/li>
&lt;li>Contenu JSON = ensemble de paires champ/valeur.&lt;/li>
&lt;li>Types de valeur possibles : nombres, chaînes, booléens, tableaux, objets.&lt;/li>
&lt;li>A supplanté XML comme format standard pour les échanges de données via des API web.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="exemple-de-contenu-json">Exemple de contenu JSON&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-json" data-lang="json">{
&lt;span style="color:#fb660a;font-weight:bold">&amp;#34;cars&amp;#34;&lt;/span>: [
{
&lt;span style="color:#fb660a;font-weight:bold">&amp;#34;model&amp;#34;&lt;/span>: &lt;span style="color:#0086d2">&amp;#34;Peugeot&amp;#34;&lt;/span>,
&lt;span style="color:#fb660a;font-weight:bold">&amp;#34;color&amp;#34;&lt;/span>: &lt;span style="color:#0086d2">&amp;#34;blue&amp;#34;&lt;/span>,
&lt;span style="color:#fb660a;font-weight:bold">&amp;#34;checkups&amp;#34;&lt;/span>: [&lt;span style="color:#0086f7;font-weight:bold">2015&lt;/span>, &lt;span style="color:#0086f7;font-weight:bold">2017&lt;/span>]
},
{
&lt;span style="color:#fb660a;font-weight:bold">&amp;#34;model&amp;#34;&lt;/span>: &lt;span style="color:#0086d2">&amp;#34;Citroën&amp;#34;&lt;/span>,
&lt;span style="color:#fb660a;font-weight:bold">&amp;#34;color&amp;#34;&lt;/span>: &lt;span style="color:#0086d2">&amp;#34;white&amp;#34;&lt;/span>,
&lt;span style="color:#fb660a;font-weight:bold">&amp;#34;checkups&amp;#34;&lt;/span>: [&lt;span style="color:#0086f7;font-weight:bold">2003&lt;/span>, &lt;span style="color:#0086f7;font-weight:bold">2005&lt;/span>, &lt;span style="color:#0086f7;font-weight:bold">2007&lt;/span>, &lt;span style="color:#0086f7;font-weight:bold">2009&lt;/span>, &lt;span style="color:#0086f7;font-weight:bold">2011&lt;/span>, &lt;span style="color:#0086f7;font-weight:bold">2013&lt;/span>]
}
]
}
&lt;/code>&lt;/pre>&lt;/div>
&lt;/section>
&lt;hr>
&lt;h3 id="création-dune-api-web-avec-aspnet-core">Création d&amp;rsquo;une API web avec ASP.NET Core&lt;/h3>
&lt;p>&lt;code>&amp;gt; dotnet-aspnet-codegenerator controller -name &amp;lt;ControllerName&amp;gt; -m &amp;lt;ModelName&amp;gt; -async -api [other arguments]&lt;/code>&lt;/p>
&lt;p>Crée un contrôleur &lt;code>&amp;lt;ControllerName&amp;gt;&lt;/code> qui :&lt;/p>
&lt;ul>
&lt;li>expose une API web pour la classe &lt;code>&amp;lt;ModelName&amp;gt;&lt;/code> du Modèle ;&lt;/li>
&lt;li>renvoie des données au format JSON et non des vues HTML.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="principe-de-fonctionnement">Principe de fonctionnement&lt;/h3>
&lt;p>&lt;img src="images/aspnetcore_api.png" alt="API call with ASP.NET Core">&lt;/p>
&lt;hr>
&lt;h3 id="exemple-de-contrôleur-dapi">Exemple de contrôleur d&amp;rsquo;API&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="color:#ff0086;font-weight:bold">[Route(&amp;#34;api/[controller]&lt;/span>&lt;span style="color:#0086d2">&amp;#34;)]
&lt;/span>&lt;span style="color:#0086d2">&lt;/span>&lt;span style="color:#ff0086;font-weight:bold">[ApiController]&lt;/span>
&lt;span style="color:#fb660a;font-weight:bold">public&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">class&lt;/span> TodosApiController : ControllerBase
{
&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// ...
&lt;/span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>}
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>Hérite de la classe &lt;code>ControllerBase&lt;/code> et non pas de &lt;code>Controller&lt;/code> comme les contrôleurs &amp;ldquo;classiques&amp;rdquo;.&lt;/li>
&lt;li>Associé aux routes du type &lt;code>api/TodosApi/&amp;lt;Argument?&amp;gt;&lt;/code>.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="api-générée">API générée&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Route&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>GET /api/TodosApi&lt;/td>
&lt;td>Renvoie tous les éléments&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>GET /api/TodosApi/{id}&lt;/td>
&lt;td>Renvoie un élément&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>POST /api/TodosApi&lt;/td>
&lt;td>Ajoute un nouvel élément&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>PUT /api/TodosApi/{id}&lt;/td>
&lt;td>Met à jour un élément&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>DELETE /api/TodosApi/{id}&lt;/td>
&lt;td>Supprime un élément&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;hr>
&lt;h3 id="exemple-de-méthode-dapi">Exemple de méthode d&amp;rsquo;API&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// GET: api/TodosApi/5
&lt;/span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>&lt;span style="color:#ff0086;font-weight:bold">[HttpGet(&amp;#34;{id}&amp;#34;)]&lt;/span>
&lt;span style="color:#fb660a;font-weight:bold">public&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">async&lt;/span> Task&amp;lt;ActionResult&amp;lt;Todo&amp;gt;&amp;gt; GetTodo(&lt;span style="color:#cdcaa9;font-weight:bold">int&lt;/span> id)
{
&lt;span style="color:#cdcaa9;font-weight:bold">var&lt;/span> todo = &lt;span style="color:#fb660a;font-weight:bold">await&lt;/span> _context.Todo.FindAsync(id);
&lt;span style="color:#fb660a;font-weight:bold">if&lt;/span> (todo == &lt;span style="color:#fb660a;font-weight:bold">null&lt;/span>)
{
&lt;span style="color:#fb660a;font-weight:bold">return&lt;/span> NotFound();
}
&lt;span style="color:#fb660a;font-weight:bold">return&lt;/span> todo;
}
&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;section data-shortcode-section>
&lt;h3 id="programmation-asynchrone">Programmation asynchrone&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>Exemple : la préparation d&amp;rsquo;un petit déjeuner.&lt;/p>
&lt;ol>
&lt;li>Verser le café dans une tasse.&lt;/li>
&lt;li>Faire chauffer la poêle, puis faire cuire deux œufs au plat.&lt;/li>
&lt;li>Faire frire trois tranches de bacon.&lt;/li>
&lt;li>Faire toaster deux tranches de pain.&lt;/li>
&lt;li>Étaler le beurre et la confiture sur les toasts.&lt;/li>
&lt;li>Verser du jus d’orange dans un verre.&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>La plupart de ces tâches peuvent être exécutées simultanément.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="exécution-séquentielle-synchrone">Exécution séquentielle (synchrone)&lt;/h3>
&lt;p>&lt;a href="https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/async/">&lt;img src="images/synchronous-breakfast.png" alt="Synchronous breakfast">&lt;/a>&lt;/p>
&lt;hr>
&lt;h3 id="exécution-asynchrone">Exécution asynchrone&lt;/h3>
&lt;p>&lt;a href="https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/async/">&lt;img src="images/async-breakfast.png" alt="Asynchronous breakfast">&lt;/a>&lt;/p>
&lt;/section>
&lt;hr>
&lt;h3 id="appels-synchrones">Appels synchrones&lt;/h3>
&lt;p>&lt;a href="https://code-maze.com/asynchronous-programming-with-async-and-await-in-asp-net-core/">&lt;img src="images/sync-request-asp.net-core.png" alt="Synchronous requests">&lt;/a>&lt;/p>
&lt;hr>
&lt;h3 id="appels-asynchrones">Appels asynchrones&lt;/h3>
&lt;p>&lt;a href="https://code-maze.com/asynchronous-programming-with-async-and-await-in-asp-net-core/">&lt;img src="images/async-request-asp.net-core.png" alt="Asynchronous requests">&lt;/a>&lt;/p>
&lt;hr>
&lt;h2 id="interactions-avec-une-base-de-données">Interactions avec une base de données&lt;/h2>
&lt;hr>
&lt;h3 id="les-données-persistantes">Les données persistantes&lt;/h3>
&lt;ul>
&lt;li>Ne disparaissent pas entre deux utilisations d&amp;rsquo;une application.&lt;/li>
&lt;li>Contraire : données &lt;em>volatiles&lt;/em>.&lt;/li>
&lt;li>Indispensable pour une très grande majorité des applications (données métier, configuration, etc).&lt;/li>
&lt;li>Leur stockage nécessite :
&lt;ul>
&lt;li>un support dédié, appelé parfois mémoire de masse (disque dur/SSD, mémoire Flash, etc) ;&lt;/li>
&lt;li>un format adapté.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="les-sgbdr-et-leurs-avantages">Les SGBDR et leurs avantages&lt;/h3>
&lt;ul>
&lt;li>Standard actuel pour la gestion de données persistantes.&lt;/li>
&lt;li>Technologie connue depuis les années 1970.&lt;/li>
&lt;li>Fiabilité.&lt;/li>
&lt;li>Capacité à gérer de forts volumes de données.&lt;/li>
&lt;li>Sécurité (authentification, réplication, etc).&lt;/li>
&lt;li>Langage d’interrogation (SQL) standard.&lt;/li>
&lt;li>Offre logicielle riche : de ORACLE à SQLite en passant par PostgreSQL, MySQL/MariaDB ou SQL Server.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="le-modèle-relationnel">Le modèle relationnel&lt;/h3>
&lt;ul>
&lt;li>Unité de représentation : table.&lt;/li>
&lt;li>Caractéristiques : colonnes.&lt;/li>
&lt;li>Entité : tuple (ligne).&lt;/li>
&lt;li>Types de données : simples (nombres, chaîne, date, etc).&lt;/li>
&lt;li>Identifiant : explicite (clé primaire).&lt;/li>
&lt;li>Relations entre éléments : jointures SQL.&lt;/li>
&lt;li>Concepts spécifiques : déclencheurs, procédures stockées&amp;hellip;&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="le-modèle-objet">Le modèle objet&lt;/h3>
&lt;ul>
&lt;li>Unité de représentation : classe.&lt;/li>
&lt;li>Caractéristiques : propriétés et méthodes.&lt;/li>
&lt;li>Entité : objet.&lt;/li>
&lt;li>Types de données : simples ou complexes.&lt;/li>
&lt;li>Identifiant : implicite (référence mémoire).&lt;/li>
&lt;li>Relations entre éléments : navigation des associations.&lt;/li>
&lt;li>Concepts spécifiques : encapsulation, héritage, interfaces&amp;hellip;&lt;/li>
&lt;/ul>
&lt;hr>
&lt;section data-shortcode-section>
&lt;h3 id="objectrelational-mapping-orm">Object/Relational Mapping (O/RM)&lt;/h3>
&lt;ul>
&lt;li>Lien entre une base de données et les objets manipulés par l’application.&lt;/li>
&lt;li>Deux modèles très éloignés (&amp;ldquo;impedance mismatch&amp;rdquo;).&lt;/li>
&lt;li>Pas de solution idéale.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="orm-is-the-vietnam-of-computer-science">&amp;ldquo;O/RM is the Vietnam of Computer Science&amp;rdquo;&lt;/h3>
&lt;p>&lt;a href="https://blog.codinghorror.com/object-relational-mapping-is-the-vietnam-of-computer-science/">&lt;img src="images/orm_vietnam.png" alt="O/RM is the Vietname of Computer Science">&lt;/a>
&lt;/section>
&lt;hr>
&lt;h3 id="solutions-possibles-pour-lorm">Solutions possibles pour l&amp;rsquo;O/RM&lt;/h3>
&lt;ul>
&lt;li>Approches radicales : suppression du SGBDR (utilisation d&amp;rsquo;une autre technologie de stockage) ou des objets (programmation procédurale ou fonctionnelle).&lt;/li>
&lt;li>O/RM manuel : gestion de la (dé)connexion, requêtage avec SQL puis transformation des résultats en objets, etc doivent être codées.&lt;/li>
&lt;li>O/RM automatisé : utilisation d&amp;rsquo;un outil dédié pour gérer les problématiques précédentes. Le requêtage SQL est effectué par l&amp;rsquo;outil.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="orm-automatisé-un-bon-choix-">O/RM automatisé, un bon choix ?&lt;/h3>
&lt;ul>
&lt;li>Avantages :
&lt;ul>
&lt;li>Automatisation de la gestion du &lt;em>mapping&lt;/em>.&lt;/li>
&lt;li>Diminution du volume de code.&lt;/li>
&lt;li>Mise en œuvre de bonnes pratiques.&lt;/li>
&lt;li>Performances (le plus souvent).&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Inconvénients :
&lt;ul>
&lt;li>Nécessité de maitriser un outil dédié.&lt;/li>
&lt;li>Certaines limitations liées à l’outil.&lt;/li>
&lt;li>Aspect &amp;ldquo;boîte noire&amp;rdquo;.&lt;/li>
&lt;li>Performances (dans certains cas).&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="entity-framework-core">Entity Framework Core&lt;/h3>
&lt;ul>
&lt;li>Outil d&amp;rsquo;O/RM &lt;a href="https://github.com/dotnet/efcore">open source&lt;/a> maintenu par Microsoft.&lt;/li>
&lt;li>Supporte de nombreux SGDBR : SQL Server, SQLite, MySQL/MariaDB, PostgreSQL, etc.&lt;/li>
&lt;li>Standard pour l&amp;rsquo;accès aux données persistantes dans l&amp;rsquo;environnement ASP.NET Core.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="sqlite">SQLite&lt;/h3>
&lt;ul>
&lt;li>SGBDR minimaliste mais suffisamment fiable, complet et performant pour la plupart des usages standards.&lt;/li>
&lt;li>Toute la base de données tient dans un seul fichier de quelques dizaines/centaines de Ko.&lt;/li>
&lt;li>&lt;a href="https://sqlite.org/mostdeployed.html">&amp;ldquo;Le SGBD le plus utilisé dans le monde&amp;rdquo;&lt;/a>.&lt;/li>
&lt;/ul>
&lt;p>&lt;a href="https://sqlite.org">&lt;img src="images/sqlite370_banner.gif" alt="SQLite logo">&lt;/a>&lt;/p>
&lt;hr>
&lt;h3 id="installation-def-core-pour-sqlite">Installation d&amp;rsquo;EF Core pour SQLite&lt;/h3>
&lt;p>&lt;code>&amp;gt; dotnet tool install --global dotnet-ef&lt;/code>&lt;/p>
&lt;p>&lt;code>&amp;gt; dotnet add package Microsoft.EntityFrameworkCore.Design&lt;/code>&lt;/p>
&lt;p>&lt;code>&amp;gt; dotnet add package Microsoft.EntityFrameworkCore.Sqlite&lt;/code>&lt;/p>
&lt;hr>
&lt;h3 id="support-de-sqlite-par-ef-core">Support de SQLite par EF Core&lt;/h3>
&lt;ul>
&lt;li>Des &lt;a href="https://docs.microsoft.com/en-us/ef/core/providers/?tabs=dotnet-core-cli">fournisseurs de données&lt;/a> permettent l&amp;rsquo;utilisation de EF Core avec un grand nombre de sources de données, dont SQLite.&lt;/li>
&lt;li>Son fournisseur possède cependant certaines petites &lt;a href="https://docs.microsoft.com/en-us/ef/core/providers/sqlite/limitations">limitations&lt;/a>.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="principe-de-fonctionnement-def-core">Principe de fonctionnement d&amp;rsquo;EF Core&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>Modèle&lt;/strong> : un ensemble de classes POCO, parfois appelées &lt;em>classes métier&lt;/em>, qui modélisent les entités manipulées par l&amp;rsquo;application.&lt;/li>
&lt;li>&lt;strong>Contexte BD&lt;/strong> : une classe qui représente une session d&amp;rsquo;échange avec une base de données (&lt;em>unité de travail&lt;/em>) et permet les opérations de lecture/écriture de données. Elle spécifie les classes du modèle à sauvegarder dans la base de données.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="exemple-de-modèle">Exemple de modèle&lt;/h3>
&lt;p>&lt;img src="images/efcore_blog_uml.png" alt="Exemple de modèle EF Core">&lt;/p>
&lt;hr>
&lt;h3 id="implémentation-du-modèle">Implémentation du modèle&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="color:#fb660a;font-weight:bold">public&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">class&lt;/span> Blog
{
&lt;span style="color:#fb660a;font-weight:bold">public&lt;/span> &lt;span style="color:#cdcaa9;font-weight:bold">int&lt;/span> Id { &lt;span style="color:#fb660a;font-weight:bold">get&lt;/span>; &lt;span style="color:#fb660a;font-weight:bold">set&lt;/span>; }
&lt;span style="color:#fb660a;font-weight:bold">public&lt;/span> &lt;span style="color:#cdcaa9;font-weight:bold">string&lt;/span> Url { &lt;span style="color:#fb660a;font-weight:bold">get&lt;/span>; &lt;span style="color:#fb660a;font-weight:bold">set&lt;/span>; }
&lt;span style="color:#fb660a;font-weight:bold">public&lt;/span> ICollection&amp;lt;Post&amp;gt; Posts { &lt;span style="color:#fb660a;font-weight:bold">get&lt;/span>; } = &lt;span style="color:#fb660a;font-weight:bold">new&lt;/span> List&amp;lt;Post&amp;gt;();
}
&lt;span style="color:#fb660a;font-weight:bold">public&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">class&lt;/span> Post
{
&lt;span style="color:#fb660a;font-weight:bold">public&lt;/span> &lt;span style="color:#cdcaa9;font-weight:bold">int&lt;/span> Id { &lt;span style="color:#fb660a;font-weight:bold">get&lt;/span>; &lt;span style="color:#fb660a;font-weight:bold">set&lt;/span>; }
&lt;span style="color:#fb660a;font-weight:bold">public&lt;/span> &lt;span style="color:#cdcaa9;font-weight:bold">string&lt;/span> Title { &lt;span style="color:#fb660a;font-weight:bold">get&lt;/span>; &lt;span style="color:#fb660a;font-weight:bold">set&lt;/span>; }
&lt;span style="color:#fb660a;font-weight:bold">public&lt;/span> &lt;span style="color:#cdcaa9;font-weight:bold">string&lt;/span> Content { &lt;span style="color:#fb660a;font-weight:bold">get&lt;/span>; &lt;span style="color:#fb660a;font-weight:bold">set&lt;/span>; }
&lt;span style="color:#fb660a;font-weight:bold">public&lt;/span> &lt;span style="color:#cdcaa9;font-weight:bold">int&lt;/span> BlogId { &lt;span style="color:#fb660a;font-weight:bold">get&lt;/span>; &lt;span style="color:#fb660a;font-weight:bold">set&lt;/span>; }
&lt;span style="color:#fb660a;font-weight:bold">public&lt;/span> Blog Blog { &lt;span style="color:#fb660a;font-weight:bold">get&lt;/span>; &lt;span style="color:#fb660a;font-weight:bold">set&lt;/span>; }
}
&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="exemple-de-contexte-bd">Exemple de contexte BD&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="color:#fb660a;font-weight:bold">public&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">class&lt;/span> BloggingContext : DbContext
{
&lt;span style="color:#fb660a;font-weight:bold">public&lt;/span> DbSet&amp;lt;Blog&amp;gt; Blogs { &lt;span style="color:#fb660a;font-weight:bold">get&lt;/span>; &lt;span style="color:#fb660a;font-weight:bold">set&lt;/span>; }
&lt;span style="color:#fb660a;font-weight:bold">public&lt;/span> DbSet&amp;lt;Post&amp;gt; Posts { &lt;span style="color:#fb660a;font-weight:bold">get&lt;/span>; &lt;span style="color:#fb660a;font-weight:bold">set&lt;/span>; }
&lt;span style="color:#fb660a;font-weight:bold">public&lt;/span> &lt;span style="color:#cdcaa9;font-weight:bold">string&lt;/span> DbPath { &lt;span style="color:#fb660a;font-weight:bold">get&lt;/span>; &lt;span style="color:#fb660a;font-weight:bold">private&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">set&lt;/span>; }
&lt;span style="color:#fb660a;font-weight:bold">public&lt;/span> BloggingContext()
{
DbPath = &lt;span style="color:#0086d2">&amp;#34;EFGetStarted.db&amp;#34;&lt;/span>;
}
&lt;span style="color:#fb660a;font-weight:bold">protected&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">override&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">void&lt;/span> OnConfiguring(DbContextOptionsBuilder options)
=&amp;gt; options.UseSqlite(&lt;span style="color:#0086d2">$&amp;#34;Data Source={DbPath}&amp;#34;&lt;/span>);
}
&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="migrations-1">Migrations&lt;/h3>
&lt;ul>
&lt;li>Approche &lt;em>&lt;strong>code first&lt;/strong>&lt;/em> : le modèle objet constitue la modélisation de référence. La base de données est automatiquement synchronisée avec lui.&lt;/li>
&lt;li>&lt;a href="https://docs.microsoft.com/en-us/ef/core/managing-schemas/migrations/?tabs=dotnet-core-cli">Migrations&lt;/a> : modifications incrémentales du schéma relationnel reflétant les évolutions du modèle.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="commandes-liées-aux-migrations">Commandes liées aux migrations&lt;/h3>
&lt;p>&lt;code>&amp;gt; dotnet ef migrations add &amp;lt;MigrationName&amp;gt;&lt;/code>&lt;/p>
&lt;p>Crée une nouvelle migration dans le répertoire &lt;strong>Migrations/&lt;/strong> du projet. Elle contient les mises à jour à réaliser au niveau du schéma relationnel pour le synchroniser avec le modèle objet.&lt;/p>
&lt;p>&lt;code>&amp;gt; dotnet ef database update&lt;/code>&lt;/p>
&lt;p>Synchronise la base de données configurée par le contexte BD avec la migration la plus récente.&lt;/p>
&lt;hr>
&lt;h3 id="exemple-extrait-dune-migration">Exemple extrait d&amp;rsquo;une migration&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">migrationBuilder.CreateTable(
name: &lt;span style="color:#0086d2">&amp;#34;Blogs&amp;#34;&lt;/span>,
columns: table =&amp;gt; &lt;span style="color:#fb660a;font-weight:bold">new&lt;/span>
{
Id = table.Column&amp;lt;&lt;span style="color:#cdcaa9;font-weight:bold">int&lt;/span>&amp;gt;(type: &lt;span style="color:#0086d2">&amp;#34;INTEGER&amp;#34;&lt;/span>, nullable: &lt;span style="color:#fb660a;font-weight:bold">false&lt;/span>)
.Annotation(&lt;span style="color:#0086d2">&amp;#34;Sqlite:Autoincrement&amp;#34;&lt;/span>, &lt;span style="color:#fb660a;font-weight:bold">true&lt;/span>),
Url = table.Column&amp;lt;&lt;span style="color:#cdcaa9;font-weight:bold">string&lt;/span>&amp;gt;(type: &lt;span style="color:#0086d2">&amp;#34;TEXT&amp;#34;&lt;/span>, nullable: &lt;span style="color:#fb660a;font-weight:bold">true&lt;/span>)
},
constraints: table =&amp;gt;
{
table.PrimaryKey(&lt;span style="color:#0086d2">&amp;#34;PK_Blogs&amp;#34;&lt;/span>, x =&amp;gt; x.Id);
});
&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="résultat-de-la-mise-à-jour-bd">Résultat de la mise à jour BD&lt;/h3>
&lt;p>&lt;img src="images/efcore_blog_schema.png" alt="Schéma BD généré par EF Core">&lt;/p>
&lt;p>(Capture d&amp;rsquo;écran de &lt;a href="https://sqlitebrowser.org/">DB Browser pour SQLite&lt;/a>).&lt;/p>
&lt;p>La colonne &lt;code>BlogId&lt;/code> est une clé étrangère vers la colonne &lt;code>Id&lt;/code> de la table &lt;code>Blog&lt;/code>.&lt;/p>
&lt;hr>
&lt;h3 id="opérations-crud">Opérations CRUD&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="color:#fb660a;font-weight:bold">using&lt;/span> (&lt;span style="color:#cdcaa9;font-weight:bold">var&lt;/span> context = &lt;span style="color:#fb660a;font-weight:bold">new&lt;/span> BloggingContext())
{
context.Add(&lt;span style="color:#fb660a;font-weight:bold">new&lt;/span> Blog { Url = &lt;span style="color:#0086d2">&amp;#34;http://blogs.msdn.com/adonet&amp;#34;&lt;/span> });
context.SaveChanges();
&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Retrieve blog with lowest id
&lt;/span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> &lt;span style="color:#cdcaa9;font-weight:bold">var&lt;/span> blog = context.Blogs
.OrderBy(b =&amp;gt; b.Id)
.First();
blog.Url = &lt;span style="color:#0086d2">&amp;#34;https://devblogs.microsoft.com/dotnet&amp;#34;&lt;/span>;
blog.Posts.Add(
&lt;span style="color:#fb660a;font-weight:bold">new&lt;/span> Post { Title = &lt;span style="color:#0086d2">&amp;#34;Hello World&amp;#34;&lt;/span>, Content = &lt;span style="color:#0086d2">&amp;#34;I wrote an app using EF Core!&amp;#34;&lt;/span> });
context.SaveChanges();
context.Remove(blog);
context.SaveChanges();
}
&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;section data-shortcode-section>
&lt;h3 id="requêtage-avec-linq">Requêtage avec LINQ&lt;/h3>
&lt;p>&lt;a href="https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/linq/">Language Integrated Query (LINQ)&lt;/a> est le langage standard pour le requêtage en C#, quelle que soit la source de données (SGBDR, XML, service web, etc).&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="color:#fb660a;font-weight:bold">using&lt;/span> (&lt;span style="color:#cdcaa9;font-weight:bold">var&lt;/span> context = &lt;span style="color:#fb660a;font-weight:bold">new&lt;/span> BloggingContext())
{
&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Retrieve a list of blogs with a rating greater than 3,
&lt;/span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// ordered by URL
&lt;/span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> &lt;span style="color:#cdcaa9;font-weight:bold">var&lt;/span> blogs = context.Blogs
.Where(b =&amp;gt; b.Rating &amp;gt; &lt;span style="color:#0086f7;font-weight:bold">3&lt;/span>)
.OrderBy(b =&amp;gt; b.Url)
.ToList();
}
&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="exemples-dutilisation-de-linq">Exemples d&amp;rsquo;utilisation de LINQ&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="color:#fb660a;font-weight:bold">using&lt;/span> (&lt;span style="color:#cdcaa9;font-weight:bold">var&lt;/span> context = &lt;span style="color:#fb660a;font-weight:bold">new&lt;/span> BloggingContext())
{
&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Get all blogs
&lt;/span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> &lt;span style="color:#cdcaa9;font-weight:bold">var&lt;/span> blogs = context.Blogs.ToList();
&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Get a specific blog
&lt;/span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> &lt;span style="color:#cdcaa9;font-weight:bold">var&lt;/span> blog = context.Blogs
.Single(b =&amp;gt; b.Id == &lt;span style="color:#0086f7;font-weight:bold">1&lt;/span>);
&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Get all blogs containing &amp;#34;dotnet&amp;#34; in their URL
&lt;/span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> &lt;span style="color:#cdcaa9;font-weight:bold">var&lt;/span> blogs = context.Blogs
.Where(b =&amp;gt; b.Url.Contains(&lt;span style="color:#0086d2">&amp;#34;dotnet&amp;#34;&lt;/span>))
.ToList();
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>(&lt;a href="https://docs.microsoft.com/en-us/ef/core/querying/">Plus de détails&lt;/a>)&lt;/p>
&lt;hr>
&lt;h3 id="syntaxe-alternative-pour-linq">Syntaxe alternative pour LINQ&lt;/h3>
&lt;p>Pour plus de souplesse, il est possible de manipuler des requêtes LINQ en tant que variables.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="color:#fb660a;font-weight:bold">using&lt;/span> (&lt;span style="color:#cdcaa9;font-weight:bold">var&lt;/span> context = &lt;span style="color:#fb660a;font-weight:bold">new&lt;/span> BloggingContext())
{
&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Get all blogs containing &amp;#34;dotnet&amp;#34; in their URL
&lt;/span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> &lt;span style="color:#cdcaa9;font-weight:bold">var&lt;/span> query = &lt;span style="color:#fb660a;font-weight:bold">from&lt;/span> b &lt;span style="color:#fb660a;font-weight:bold">in&lt;/span> context.Blogs
&lt;span style="color:#fb660a;font-weight:bold">select&lt;/span> b;
query = query.Where(b =&amp;gt; b.Url.Contains(&lt;span style="color:#0086d2">&amp;#34;dotnet&amp;#34;&lt;/span>));
&lt;span style="color:#cdcaa9;font-weight:bold">var&lt;/span> blogs = query.ToList();
}
&lt;/code>&lt;/pre>&lt;/div>
&lt;/section>
&lt;hr>
&lt;h3 id="sauvegarde-des-modifications">Sauvegarde des modifications&lt;/h3>
&lt;p>La méthode &lt;code>SaveChanges()&lt;/code> de la classe &lt;code>DbContext&lt;/code> implante dans la base de données tous les changements ayant eu lieu depuis l&amp;rsquo;ouverture de la session liée au contexte BD.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="color:#fb660a;font-weight:bold">using&lt;/span> (&lt;span style="color:#cdcaa9;font-weight:bold">var&lt;/span> context = &lt;span style="color:#fb660a;font-weight:bold">new&lt;/span> BloggingContext())
{
&lt;span style="color:#cdcaa9;font-weight:bold">var&lt;/span> blog = &lt;span style="color:#fb660a;font-weight:bold">new&lt;/span> Blog { Url = &lt;span style="color:#0086d2">&amp;#34;http://sample.com&amp;#34;&lt;/span> };
context.Blogs.Add(blog);
context.SaveChanges();
}
&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="configuration-du-modèle">Configuration du modèle&lt;/h3>
&lt;p>Effectuée via des &lt;a href="https://docs.microsoft.com/en-us/ef/core/modeling/entity-properties?tabs=data-annotations%2Cwithout-nrt">annotations&lt;/a> dans les classes du modèle.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="color:#fb660a;font-weight:bold">public&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">class&lt;/span> Blog
{
&lt;span style="color:#fb660a;font-weight:bold">public&lt;/span> &lt;span style="color:#cdcaa9;font-weight:bold">int&lt;/span> Id { &lt;span style="color:#fb660a;font-weight:bold">get&lt;/span>; &lt;span style="color:#fb660a;font-weight:bold">set&lt;/span>; }
&lt;span style="color:#ff0086;font-weight:bold">
&lt;/span>&lt;span style="color:#ff0086;font-weight:bold"> [StringLength(200, MinimumLength = 7), Required]&lt;/span>
&lt;span style="color:#fb660a;font-weight:bold">public&lt;/span> &lt;span style="color:#cdcaa9;font-weight:bold">string&lt;/span> Url { &lt;span style="color:#fb660a;font-weight:bold">get&lt;/span>; &lt;span style="color:#fb660a;font-weight:bold">set&lt;/span>; }
&lt;span style="color:#ff0086;font-weight:bold">
&lt;/span>&lt;span style="color:#ff0086;font-weight:bold"> [Display(Name = &amp;#34;Average Rating&amp;#34;)]&lt;/span>
&lt;span style="color:#ff0086;font-weight:bold"> [Column(TypeName = &amp;#34;decimal(5, 2)&amp;#34;)]&lt;/span>
&lt;span style="color:#ff0086;font-weight:bold"> [DisplayFormat(NullDisplayText = &amp;#34;No rating&amp;#34;)]&lt;/span>
&lt;span style="color:#fb660a;font-weight:bold">public&lt;/span> &lt;span style="color:#cdcaa9;font-weight:bold">decimal?&lt;/span> Rating { &lt;span style="color:#fb660a;font-weight:bold">get&lt;/span>; &lt;span style="color:#fb660a;font-weight:bold">set&lt;/span>; }
&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// ...
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="propriétés-obligatoires-et-optionnelles">Propriétés obligatoires et optionnelles&lt;/h3>
&lt;ul>
&lt;li>Une propriété est considérée comme optionnelle si elle peut contenir &lt;code>null&lt;/code>. La colonne BD associée accepte les valeurs nulles.&lt;/li>
&lt;li>L&amp;rsquo;attribut &lt;code>[Required]&lt;/code> permet de rendre obligatoire une propriété ayant un type référence (exemple : &lt;code>string&lt;/code>).&lt;/li>
&lt;li>L&amp;rsquo;utilisation d&amp;rsquo;un &lt;a href="https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/nullable-value-types">type nullable&lt;/a> (exemples : &lt;code>int?&lt;/code>, `bool?) rend la propriété optionnelle.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="clés-primaires">Clés primaires&lt;/h3>
&lt;ul>
&lt;li>Une propriété nommée &lt;code>Id&lt;/code> ou &lt;code>&amp;lt;Classe&amp;gt;Id&lt;/code> est considérée comme clé primaire.&lt;/li>
&lt;li>Par défaut, une stratégie d'&lt;a href="https://docs.microsoft.com/en-us/ef/core/modeling/generated-properties?tabs=data-annotations">auto-génération des valeurs&lt;/a> est utilisée.&lt;/li>
&lt;li>&lt;a href="https://docs.microsoft.com/en-us/ef/core/modeling/keys?tabs=data-annotations">Plus de détails&lt;/a>.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;section data-shortcode-section>
&lt;h3 id="relations-entre-classes">Relations entre classes&lt;/h3>
&lt;ul>
&lt;li>Une propriété utilisant un type autre que scalaire est dite &lt;strong>propriété de navigation&lt;/strong>.&lt;/li>
&lt;li>La détection d&amp;rsquo;une propriété de navigation entraine la création d&amp;rsquo;une &lt;strong>relation&lt;/strong> entre les deux classes impliquées.&lt;/li>
&lt;li>Cette relation se traduit dans la base de données par la création d&amp;rsquo;une &lt;strong>clé étrangère&lt;/strong> dans la table associée à la classe dépendante (fille) de la relation.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="relation-un-à-plusieurs">Relation un-à-plusieurs&lt;/h3>
&lt;ul>
&lt;li>Propriété de navigation de type collection dans la classe principale (mère).&lt;/li>
&lt;li>Propriété de navigation et d&amp;rsquo;une propriété de clé étrangère dans la classe dépendante (fille).&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="color:#fb660a;font-weight:bold">public&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">class&lt;/span> Blog
{
&lt;span style="color:#fb660a;font-weight:bold">public&lt;/span> &lt;span style="color:#cdcaa9;font-weight:bold">int&lt;/span> Id { &lt;span style="color:#fb660a;font-weight:bold">get&lt;/span>; &lt;span style="color:#fb660a;font-weight:bold">set&lt;/span>; }
&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// ...
&lt;/span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">public&lt;/span> List&amp;lt;Post&amp;gt; Posts { &lt;span style="color:#fb660a;font-weight:bold">get&lt;/span>; &lt;span style="color:#fb660a;font-weight:bold">set&lt;/span>; }
}
&lt;span style="color:#fb660a;font-weight:bold">public&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">class&lt;/span> Post
{
&lt;span style="color:#fb660a;font-weight:bold">public&lt;/span> &lt;span style="color:#cdcaa9;font-weight:bold">int&lt;/span> Id { &lt;span style="color:#fb660a;font-weight:bold">get&lt;/span>; &lt;span style="color:#fb660a;font-weight:bold">set&lt;/span>; }
&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// ...
&lt;/span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">public&lt;/span> &lt;span style="color:#cdcaa9;font-weight:bold">int&lt;/span> BlogId { &lt;span style="color:#fb660a;font-weight:bold">get&lt;/span>; &lt;span style="color:#fb660a;font-weight:bold">set&lt;/span>; }
&lt;span style="color:#fb660a;font-weight:bold">public&lt;/span> Blog Blog { &lt;span style="color:#fb660a;font-weight:bold">get&lt;/span>; &lt;span style="color:#fb660a;font-weight:bold">set&lt;/span>; }
}
&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="relation-un-à-un">Relation un-à-un&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="color:#fb660a;font-weight:bold">public&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">class&lt;/span> Blog
{
&lt;span style="color:#fb660a;font-weight:bold">public&lt;/span> &lt;span style="color:#cdcaa9;font-weight:bold">int&lt;/span> Id { &lt;span style="color:#fb660a;font-weight:bold">get&lt;/span>; &lt;span style="color:#fb660a;font-weight:bold">set&lt;/span>; }
&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// ...
&lt;/span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">public&lt;/span> BlogImage BlogImage { &lt;span style="color:#fb660a;font-weight:bold">get&lt;/span>; &lt;span style="color:#fb660a;font-weight:bold">set&lt;/span>; }
}
&lt;span style="color:#fb660a;font-weight:bold">public&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">class&lt;/span> BlogImage
{
&lt;span style="color:#fb660a;font-weight:bold">public&lt;/span> &lt;span style="color:#cdcaa9;font-weight:bold">int&lt;/span> Id { &lt;span style="color:#fb660a;font-weight:bold">get&lt;/span>; &lt;span style="color:#fb660a;font-weight:bold">set&lt;/span>; }
&lt;span style="color:#fb660a;font-weight:bold">public&lt;/span> &lt;span style="color:#cdcaa9;font-weight:bold">byte&lt;/span>[] Image { &lt;span style="color:#fb660a;font-weight:bold">get&lt;/span>; &lt;span style="color:#fb660a;font-weight:bold">set&lt;/span>; }
&lt;span style="color:#fb660a;font-weight:bold">public&lt;/span> &lt;span style="color:#cdcaa9;font-weight:bold">string&lt;/span> Caption { &lt;span style="color:#fb660a;font-weight:bold">get&lt;/span>; &lt;span style="color:#fb660a;font-weight:bold">set&lt;/span>; }
&lt;span style="color:#fb660a;font-weight:bold">public&lt;/span> &lt;span style="color:#cdcaa9;font-weight:bold">int&lt;/span> BlogId { &lt;span style="color:#fb660a;font-weight:bold">get&lt;/span>; &lt;span style="color:#fb660a;font-weight:bold">set&lt;/span>; }
&lt;span style="color:#fb660a;font-weight:bold">public&lt;/span> Blog Blog { &lt;span style="color:#fb660a;font-weight:bold">get&lt;/span>; &lt;span style="color:#fb660a;font-weight:bold">set&lt;/span>; }
}
&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="relation-plusieurs-à-plusieurs">Relation plusieurs-à-plusieurs&lt;/h3>
&lt;p>Entraîne la création d&amp;rsquo;une table de jointure contenant deux clés étrangères dans la base de données.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="color:#fb660a;font-weight:bold">public&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">class&lt;/span> Post
{
&lt;span style="color:#fb660a;font-weight:bold">public&lt;/span> &lt;span style="color:#cdcaa9;font-weight:bold">int&lt;/span> Id { &lt;span style="color:#fb660a;font-weight:bold">get&lt;/span>; &lt;span style="color:#fb660a;font-weight:bold">set&lt;/span>; }
&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// ...
&lt;/span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">public&lt;/span> ICollection&amp;lt;Tag&amp;gt; Tags { &lt;span style="color:#fb660a;font-weight:bold">get&lt;/span>; &lt;span style="color:#fb660a;font-weight:bold">set&lt;/span>; }
}
&lt;span style="color:#fb660a;font-weight:bold">public&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">class&lt;/span> Tag
{
&lt;span style="color:#fb660a;font-weight:bold">public&lt;/span> &lt;span style="color:#cdcaa9;font-weight:bold">string&lt;/span> Id { &lt;span style="color:#fb660a;font-weight:bold">get&lt;/span>; &lt;span style="color:#fb660a;font-weight:bold">set&lt;/span>; }
&lt;span style="color:#fb660a;font-weight:bold">public&lt;/span> ICollection&amp;lt;Post&amp;gt; Posts { &lt;span style="color:#fb660a;font-weight:bold">get&lt;/span>; &lt;span style="color:#fb660a;font-weight:bold">set&lt;/span>; }
}
&lt;/code>&lt;/pre>&lt;/div>
&lt;/section>
&lt;hr>
&lt;h3 id="chargement-des-relations">Chargement des relations&lt;/h3>
&lt;ul>
&lt;li>Les méthodes &lt;code>.Include()&lt;/code> et &lt;code>.ThenInclude()&lt;/code> permettent de spécifier les données associées à inclure dans les résultats d&amp;rsquo;une requête.&lt;/li>
&lt;li>Ce mécanisme est appelé &lt;a href="https://docs.microsoft.com/en-us/ef/core/querying/related-data/eager">chargement hâtif&lt;/a> (&lt;em>eager loading&lt;/em>).&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="color:#fb660a;font-weight:bold">using&lt;/span> (&lt;span style="color:#cdcaa9;font-weight:bold">var&lt;/span> context = &lt;span style="color:#fb660a;font-weight:bold">new&lt;/span> BloggingContext())
{
&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Load posts for each blog
&lt;/span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Uncomment the .ThenInclude line to load post author
&lt;/span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> &lt;span style="color:#cdcaa9;font-weight:bold">var&lt;/span> blogs = context.Blogs
.Include(blog =&amp;gt; blog.Posts)
&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// .ThenInclude(post =&amp;gt; post.Author)
&lt;/span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> .ToList();
}
&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="ef-core-et-aspnet-core">EF Core et ASP.NET Core&lt;/h3>
&lt;ul>
&lt;li>Un contexte BD est &lt;a href="https://docs.microsoft.com/en-us/ef/core/dbcontext-configuration/">associé&lt;/a> à chaque requête HTTP entrante dans le fichier &lt;code>Startup.cs&lt;/code>.&lt;/li>
&lt;li>Il est ensuite utilisé par les contrôleurs pour interagir avec la base de données.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="color:#fb660a;font-weight:bold">public&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">class&lt;/span> Startup
{
&lt;span style="color:#080;background-color:#0f140f;font-style:italic">//...
&lt;/span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>
&lt;span style="color:#fb660a;font-weight:bold">public&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">void&lt;/span> ConfigureServices(IServiceCollection services)
{
services.AddControllersWithViews();
services.AddDbContext&amp;lt;MvcMovieContext&amp;gt;(options =&amp;gt;
options.UseSqlite(Configuration.GetConnectionString(&lt;span style="color:#0086d2">&amp;#34;MvcMovieContext&amp;#34;&lt;/span>)));
}
&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="affichage-des-requêtes-sql-exécutées-par-ef-core">Affichage des requêtes SQL exécutées par EF Core&lt;/h3>
&lt;p>Ajout de la ligne ci-dessous dans le fichier &lt;code>appsettings.json&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-json" data-lang="json">{
&lt;span style="color:#fb660a;font-weight:bold">&amp;#34;Logging&amp;#34;&lt;/span>: {
&lt;span style="color:#fb660a;font-weight:bold">&amp;#34;LogLevel&amp;#34;&lt;/span>: {
# ...
&lt;span style="color:#fb660a;font-weight:bold">&amp;#34;Microsoft.EntityFrameworkCore.Database.Command&amp;#34;&lt;/span>: &lt;span style="color:#0086d2">&amp;#34;Information&amp;#34;&lt;/span>
}
},
# ...
}
&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h2 id="tests">Tests&lt;/h2>
&lt;hr>
&lt;h3 id="typologie-des-tests">Typologie des tests&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>Test unitaire&lt;/strong> (TU) : vérifie un composant individuel de l&amp;rsquo;application.&lt;/li>
&lt;li>&lt;strong>Test d&amp;rsquo;intégration&lt;/strong> : vérifie les interactions entre différents composants de l&amp;rsquo;application, y compris des composants externes comme une base de données ou un service web.&lt;/li>
&lt;li>&lt;strong>Test fonctionnel (ou test de validation)&lt;/strong> : vérifie que l&amp;rsquo;application fonctionne comme prévu du point de vue de l&amp;rsquo;utilisateur.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="tests-unitaires-vs-tests-dintégration">Tests unitaires Vs tests d&amp;rsquo;intégration&lt;/h3>
&lt;ul>
&lt;li>Ils sont tous deux automatisés.&lt;/li>
&lt;li>Les TU isolent le composant à tester du reste de l&amp;rsquo;application à l&amp;rsquo;aide de &lt;em>test doubles&lt;/em> (parfois appelés &lt;em>dummies&lt;/em>, &lt;em>stubs&lt;/em> ou encore &lt;em>mocks&lt;/em>) qui simulent le comportement des autres composants. Leur exécution est rapide.&lt;/li>
&lt;li>Les tests d&amp;rsquo;intégration se basent sur les véritables composants de l&amp;rsquo;application. Leur mise en place est souvent plus complexe et leur exécution plus lente.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="quelle-stratégie-adopter-">Quelle stratégie adopter ?&lt;/h3>
&lt;ul>
&lt;li>Vouloir tester tous les scénarios et configurations possibles est coûteux et pas forcément efficace.&lt;/li>
&lt;li>Il est préférable de se concentrer sur les éléments-clés offrant le meilleur rapport coût/bénéfices : composants essentiels, opérations élémentaires (CRUD), principaux services de l&amp;rsquo;application&amp;hellip;&lt;/li>
&lt;li>Des &lt;em>smoke tests&lt;/em> vérifiant uniquement le renvoi d&amp;rsquo;un code HTTP de succès pour chaque route peuvent constituer un premier filet de sécurité.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="etapes-dun-test--le-patron-aaa">Etapes d&amp;rsquo;un test : le patron AAA&lt;/h3>
&lt;ul>
&lt;li>&lt;em>Arrange&lt;/em> : préparation du test.
&lt;ul>
&lt;li>Lancement de l&amp;rsquo;application ;&lt;/li>
&lt;li>Préparation de la base de données ;&lt;/li>
&lt;li>&amp;hellip;&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;em>Act&lt;/em> : réalisation des opérations à tester.&lt;/li>
&lt;li>&lt;em>Assert&lt;/em> : vérification des résultats des actions précédentes au moyen d'&lt;a href="https://en.wikipedia.org/wiki/Assertion_(software_development)">assertions&lt;/a>.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="création-dun-projet-de-test-net">Création d&amp;rsquo;un projet de test .NET&lt;/h3>
&lt;p>&lt;code>&amp;gt; dotnet new xunit -o &amp;lt;TestProjectName&amp;gt;&lt;/code>&lt;/p>
&lt;p>&lt;a href="https://xunit.net/">xUnit&lt;/a> est un framework de tests unitaires &lt;em>open source&lt;/em> pour la plate-forme .NET.&lt;/p>
&lt;p>&lt;code>&amp;gt; dotnet add ./&amp;lt;TestProjectName&amp;gt;/&amp;lt;TestProjectName&amp;gt;.csproj reference ./&amp;lt;ProjectName&amp;gt;/&amp;lt;ProjectName&amp;gt;.csproj&lt;/code>&lt;/p>
&lt;p>Ajoute au projet de test une référence vers le projet à tester (les deux étant situés dans le même répertoire parent).&lt;/p>
&lt;hr>
&lt;h3 id="exemple-de-classe-de-test">Exemple de classe de test&lt;/h3>
&lt;p>&lt;code>[Fact]&lt;/code> indique une méthode de test.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="color:#fb660a;font-weight:bold">using&lt;/span> Xunit;
&lt;span style="color:#fb660a;font-weight:bold">namespace&lt;/span> Prime.UnitTests.Services
{
&lt;span style="color:#fb660a;font-weight:bold">public&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">class&lt;/span> PrimeService_IsPrimeShould
{
&lt;span style="color:#ff0086;font-weight:bold"> [Fact]&lt;/span>
&lt;span style="color:#fb660a;font-weight:bold">public&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">void&lt;/span> IsPrime_InputIs1_ReturnFalse()
{
&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Arrange
&lt;/span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> &lt;span style="color:#cdcaa9;font-weight:bold">var&lt;/span> primeService = &lt;span style="color:#fb660a;font-weight:bold">new&lt;/span> PrimeService();
&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Act
&lt;/span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> &lt;span style="color:#cdcaa9;font-weight:bold">bool&lt;/span> result = primeService.IsPrime(&lt;span style="color:#0086f7;font-weight:bold">1&lt;/span>);
&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Assert
&lt;/span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> Assert.False(result, &lt;span style="color:#0086d2">&amp;#34;1 should not be prime&amp;#34;&lt;/span>);
}
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="initialisation-du-test">Initialisation du test&lt;/h3>
&lt;p>Permet d&amp;rsquo;éviter la duplication de code.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">ppublic &lt;span style="color:#fb660a;font-weight:bold">class&lt;/span> PrimeService_IsPrimeShould
{
&lt;span style="color:#fb660a;font-weight:bold">private&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">readonly&lt;/span> PrimeService _primeService;
&lt;span style="color:#fb660a;font-weight:bold">public&lt;/span> PrimeService_IsPrimeShould()
{
&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Create instance of tested class
&lt;/span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> _primeService = &lt;span style="color:#fb660a;font-weight:bold">new&lt;/span> PrimeService();
}
&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// ...
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="paramétrage-des-méthodes-de-test">Paramétrage des méthodes de test&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp"> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// ...
&lt;/span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>&lt;span style="color:#ff0086;font-weight:bold"> [Theory]&lt;/span>
&lt;span style="color:#ff0086;font-weight:bold"> [InlineData(2)]&lt;/span>
&lt;span style="color:#ff0086;font-weight:bold"> [InlineData(3)]&lt;/span>
&lt;span style="color:#ff0086;font-weight:bold"> [InlineData(5)]&lt;/span>
&lt;span style="color:#ff0086;font-weight:bold"> [InlineData(7)]&lt;/span>
&lt;span style="color:#fb660a;font-weight:bold">public&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">void&lt;/span> IsPrime_PrimesLessThan10_ReturnTrue(&lt;span style="color:#cdcaa9;font-weight:bold">int&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">value&lt;/span>)
{
&lt;span style="color:#cdcaa9;font-weight:bold">var&lt;/span> result = _primeService.IsPrime(&lt;span style="color:#fb660a;font-weight:bold">value&lt;/span>);
Assert.True(result, &lt;span style="color:#0086d2">$&amp;#34;{value} should be prime&amp;#34;&lt;/span>);
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="exécution-des-tests">Exécution des tests&lt;/h3>
&lt;p>&lt;code>&amp;gt; dotnet test&lt;/code>&lt;/p>
&lt;p>&lt;img src="images/dotnet_test_result.png" alt="dotnet test result">&lt;/p>
&lt;hr>
&lt;h3 id="configuration-dun-projet-de-test-pour-aspnet-core">Configuration d&amp;rsquo;un projet de test pour ASP.NET Core&lt;/h3>
&lt;p>&lt;code>&amp;gt; dotnet add package Microsoft.AspNetCore.Mvc.Testing -v 5.0.12&lt;/code>&lt;/p>
&lt;p>Ajoute un package dédié aux tests dans cet environnement, ici dans une version adaptée à .NET 5.&lt;/p>
&lt;hr>
&lt;h3 id="exemple-de-classe-de-test-1">Exemple de classe de test&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="color:#fb660a;font-weight:bold">using&lt;/span> System.Threading.Tasks;
&lt;span style="color:#fb660a;font-weight:bold">using&lt;/span> Microsoft.AspNetCore.Mvc.Testing;
&lt;span style="color:#fb660a;font-weight:bold">using&lt;/span> Xunit;
&lt;span style="color:#fb660a;font-weight:bold">namespace&lt;/span> MvcMovie.Tests
{
&lt;span style="color:#fb660a;font-weight:bold">public&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">class&lt;/span> HomeControllerTests
: IClassFixture&amp;lt;WebApplicationFactory&amp;lt;MvcMovie.Startup&amp;gt;&amp;gt;
{
&lt;span style="color:#fb660a;font-weight:bold">private&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">readonly&lt;/span> WebApplicationFactory&amp;lt;MvcMovie.Startup&amp;gt; _factory;
&lt;span style="color:#fb660a;font-weight:bold">public&lt;/span> HomeControllerTests(WebApplicationFactory&amp;lt;MvcMovie.Startup&amp;gt; factory)
{
_factory = factory;
}
&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// ...
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="smoke-testing-dun-contrôleur">Smoke testing d&amp;rsquo;un contrôleur&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp"> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// ...
&lt;/span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>&lt;span style="color:#ff0086;font-weight:bold"> [Theory]&lt;/span>
&lt;span style="color:#ff0086;font-weight:bold"> [InlineData(&amp;#34;/&amp;#34;)]&lt;/span>
&lt;span style="color:#ff0086;font-weight:bold"> [InlineData(&amp;#34;/Home/Index&amp;#34;)]&lt;/span>
&lt;span style="color:#ff0086;font-weight:bold"> [InlineData(&amp;#34;/Home/Privacy&amp;#34;)]&lt;/span>
&lt;span style="color:#fb660a;font-weight:bold">public&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">async&lt;/span> Task Get_EndpointsReturnSuccessAndCorrectContentType(&lt;span style="color:#cdcaa9;font-weight:bold">string&lt;/span> url)
{
&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Arrange
&lt;/span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> &lt;span style="color:#cdcaa9;font-weight:bold">var&lt;/span> client = _factory.CreateClient();
&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Act
&lt;/span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> &lt;span style="color:#cdcaa9;font-weight:bold">var&lt;/span> response = &lt;span style="color:#fb660a;font-weight:bold">await&lt;/span> client.GetAsync(url);
&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Assert
&lt;/span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> response.EnsureSuccessStatusCode(); &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Status Code 200-299
&lt;/span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> Assert.Equal(&lt;span style="color:#0086d2">&amp;#34;text/html; charset=utf-8&amp;#34;&lt;/span>,
response.Content.Headers.ContentType.ToString());
}
}
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>C# : rappels et compléments</title><link>https://www.bpesquet.fr/slides/csharp/</link><pubDate>Thu, 16 Sep 2021 11:15:17 +0200</pubDate><guid>https://www.bpesquet.fr/slides/csharp/</guid><description>&lt;h2 id="sommaire">Sommaire&lt;/h2>
&lt;ul>
&lt;li>Rappels sur la POO&lt;/li>
&lt;li>Gestion des objets en mémoire&lt;/li>
&lt;li>Gestion des exceptions&lt;/li>
&lt;li>Possibilités syntaxiques récentes&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="rappels-sur-la-poo">Rappels sur la POO&lt;/h2>
&lt;hr>
&lt;h3 id="la-poo-en-bref">La POO en bref&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Objet&lt;/strong> : entité qui modélise (représente) un élément du domaine étudié.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Objet = état + actions.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Objet != &lt;strong>classe&lt;/strong> :&lt;/p>
&lt;ul>
&lt;li>Classe : modèle d’objet (type).&lt;/li>
&lt;li>Objet : exemplaire concret, &lt;strong>instance&lt;/strong> d’une classe.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>POO&lt;/strong> : paradigme d&amp;rsquo;écriture de logiciels sous forme d’objets en interaction&lt;/p>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="représentation-graphique-dune-classe">Représentation graphique d&amp;rsquo;une classe&lt;/h3>
&lt;p>Le standard : diagramme de classes &lt;strong>UML&lt;/strong>.&lt;/p>
&lt;p>&lt;img src="images/uml_class_diagram.png" alt="Exemple de diagramme UML">&lt;/p>
&lt;hr>
&lt;h3 id="notion-de-propriété-en-c">Notion de propriété en C#&lt;/h3>
&lt;ul>
&lt;li>Propriété au sens de la majorité des langages à objets = &lt;strong>attribut&lt;/strong> ou &lt;strong>champ&lt;/strong>.&lt;/li>
&lt;li>Propriété au sens du C# = &lt;strong>accesseur&lt;/strong> vers un attribut.&lt;/li>
&lt;li>Les propriétés permettent de concilier accès aux données de l’objet et &lt;strong>encapsulation&lt;/strong>.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="propriété-avec-attribut-explicite">Propriété avec attribut explicite&lt;/h3>
&lt;p>Déclaration explicite de l’attribut (le plus souvent &lt;strong>privé&lt;/strong>).&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-c#" data-lang="c#">&lt;span style="color:#fb660a;font-weight:bold">private&lt;/span> &lt;span style="color:#cdcaa9;font-weight:bold">string&lt;/span> titulaire;
&lt;span style="color:#fb660a;font-weight:bold">public&lt;/span> &lt;span style="color:#cdcaa9;font-weight:bold">string&lt;/span> Titulaire {
&lt;span style="color:#fb660a;font-weight:bold">get&lt;/span> { &lt;span style="color:#fb660a;font-weight:bold">return&lt;/span> titulaire; }
&lt;span style="color:#fb660a;font-weight:bold">set&lt;/span> { titulaire = &lt;span style="color:#fb660a;font-weight:bold">value&lt;/span>; }
}
&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// ...
&lt;/span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>monCompte.Titulaire = &lt;span style="color:#0086d2">&amp;#34;Marco&amp;#34;&lt;/span>;
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Avantage : possibilité de contrôles dans les accesseurs (validation de la novuelle valeur, etc).&lt;/p>
&lt;hr>
&lt;h3 id="propriété-auto-implémentée">Propriété auto-implémentée&lt;/h3>
&lt;p>Création implicite de l’attribut par le langage.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="color:#fb660a;font-weight:bold">public&lt;/span> &lt;span style="color:#cdcaa9;font-weight:bold">string&lt;/span> Titulaire { &lt;span style="color:#fb660a;font-weight:bold">get&lt;/span>; &lt;span style="color:#fb660a;font-weight:bold">set&lt;/span>; }
&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// ...
&lt;/span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>monCompte.Titulaire = &lt;span style="color:#0086d2">&amp;#34;Marco&amp;#34;&lt;/span>;
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>Avantage : concision.&lt;/li>
&lt;li>Bien adaptée aux cas simples (sans besoin de logique).&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="gestion-des-objets-en-mémoire">Gestion des objets en mémoire&lt;/h2>
&lt;hr>
&lt;h3 id="classe-dexemple">Classe d&amp;rsquo;exemple&lt;/h3>
&lt;p>&lt;img src="images/example_class.png" alt="Classe d&amp;rsquo;exemple">&lt;/p>
&lt;hr>
&lt;h3 id="affectation-entre-entiers">Affectation entre entiers&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="color:#cdcaa9;font-weight:bold">int&lt;/span> nombre1;
nombre1 = &lt;span style="color:#0086f7;font-weight:bold">5&lt;/span>;
&lt;span style="color:#cdcaa9;font-weight:bold">int&lt;/span> nombre2 = &lt;span style="color:#0086f7;font-weight:bold">3&lt;/span>;
nombre2 = nombre1;
nombre1 = &lt;span style="color:#0086f7;font-weight:bold">10&lt;/span>;
Console.WriteLine(&lt;span style="color:#0086d2">&amp;#34;nombre1 = &amp;#34;&lt;/span> + nombre1); &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// 10
&lt;/span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>Console.WriteLine(&lt;span style="color:#0086d2">&amp;#34;nombre2 = &amp;#34;&lt;/span> + nombre2); &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// 5
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;section data-shortcode-section>
&lt;h3 id="affectation-entre-objets">Affectation entre objets&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">Cercle cercle1;
cercle1 = &lt;span style="color:#fb660a;font-weight:bold">new&lt;/span> Cercle(&lt;span style="color:#0086f7;font-weight:bold">5&lt;/span>);
&lt;p>Cercle cercle2 = &lt;span style="color:#fb660a;font-weight:bold">new&lt;/span> Cercle(&lt;span style="color:#0086f7;font-weight:bold">3&lt;/span>);
cercle2 = cercle1;&lt;/p>
&lt;p>cercle1.Rayon = &lt;span style="color:#0086f7;font-weight:bold">10&lt;/span>;&lt;/p>
&lt;p>Console.WriteLine(&lt;span style="color:#0086d2">&amp;quot;cercle1.Rayon = &amp;quot;&lt;/span> + cercle1.Rayon); &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// 10
&lt;/span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>Console.WriteLine(&lt;span style="color:#0086d2">&amp;quot;cercle2.Rayon = &amp;quot;&lt;/span> + cercle2.Rayon); &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// ?
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>&lt;/p>
&lt;p>&lt;img src="images/object_result.png" alt="Réssultat de l&amp;rsquo;exécution">&lt;/p>
&lt;p>&lt;img src="images/omg.png" alt="OMG">&lt;/p>
&lt;/section>
&lt;hr>
&lt;section data-shortcode-section>
&lt;h3 id="types-valeur">Types valeur&lt;/h3>
&lt;ul>
&lt;li>Type pour lequel la valeur est directement stockée dans la variable.&lt;/li>
&lt;li>Types de bases C# : &lt;code>int&lt;/code>, &lt;code>float&lt;/code>, &lt;code>double&lt;/code>&amp;hellip;&lt;/li>
&lt;li>Création d’une variable =&amp;gt; réservation d’une zone mémoire pour stocker sa valeur.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;p>&lt;img src="images/value_types.png" alt="Exemple avec types valeur">
&lt;/section>
&lt;hr>
&lt;section data-shortcode-section>
&lt;h3 id="types-reference">Types référence&lt;/h3>
&lt;ul>
&lt;li>Type pour lequel l&amp;rsquo;instanciation d’un exemplaire déclenche la réservation d’une zone mémoire pour ses données, mais la &amp;ldquo;valeur&amp;rdquo; de l’exemplaire est une &lt;strong>référence&lt;/strong> vers cette zone.&lt;/li>
&lt;li>Exemples : objets et tableaux.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;p>&lt;img src="images/reference_types.png" alt="Exemple avec types référence">
&lt;/section>
&lt;hr>
&lt;section data-shortcode-section>
&lt;h3 id="types-référence-et-affectation">Types référence et affectation&lt;/h3>
&lt;ul>
&lt;li>La valeur de la variable source (une référence) est copiée dans la variable cible.&lt;/li>
&lt;li>Les deux variables &lt;em>pointent&lt;/em> vers la même zone mémoire&lt;/li>
&lt;/ul>
&lt;hr>
&lt;p>&lt;img src="images/reference_types_assignment.png" alt="Diagramme d&amp;rsquo;exécution">
&lt;/section>
&lt;hr>
&lt;section data-shortcode-section>
&lt;h3 id="passage-dun-type-valeur-en-parametre">Passage d’un type valeur en paramètre&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="color:#fb660a;font-weight:bold">static&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">void&lt;/span> Main(&lt;span style="color:#cdcaa9;font-weight:bold">string&lt;/span>[] args) {
&lt;span style="color:#cdcaa9;font-weight:bold">int&lt;/span> nombre = &lt;span style="color:#0086f7;font-weight:bold">5&lt;/span>;
Console.WriteLine(&lt;span style="color:#0086d2">&amp;#34;Avant l&amp;#39;appel, nombre = &amp;#34;&lt;/span> + nombre); &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// 5
&lt;/span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> Augmenter(nombre);
Console.WriteLine(&lt;span style="color:#0086d2">&amp;#34;Après l&amp;#39;appel, nombre = &amp;#34;&lt;/span> + nombre); &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// ?
&lt;/span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>}
&lt;span style="color:#fb660a;font-weight:bold">static&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">void&lt;/span> Augmenter(&lt;span style="color:#cdcaa9;font-weight:bold">int&lt;/span> unNombre) {
Console.WriteLine(&lt;span style="color:#0086d2">&amp;#34;Avant l&amp;#39;augmentation, unNombre = &amp;#34;&lt;/span> + unNombre);
unNombre = unNombre + &lt;span style="color:#0086f7;font-weight:bold">1&lt;/span>;
Console.WriteLine(&lt;span style="color:#0086d2">&amp;#34;Après l&amp;#39;augmentation, unNombre = &amp;#34;&lt;/span> + unNombre);
}
&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="résultat-de-lexécution">Résultat de l&amp;rsquo;exécution&lt;/h3>
&lt;p>&lt;img src="images/value_types_parameter_passing.png" alt="Résultat de l&amp;rsquo;exécution">&lt;/p>
&lt;ul>
&lt;li>La valeur de l’argument (un nombre entier) est copiée dans le paramètre.&lt;/li>
&lt;li>Argument et paramètre correspondent à des zones mémoire différentes.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;p>&lt;img src="images/value_types_parameter_passing_diagram.png" alt="Diagramme d&amp;rsquo;exécution">&lt;/p>
&lt;/section>
&lt;hr>
&lt;section data-shortcode-section>
&lt;h3 id="passage-dun-objet-en-parametre">Passage d’un objet en paramètre&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="color:#fb660a;font-weight:bold">static&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">void&lt;/span> Main(&lt;span style="color:#cdcaa9;font-weight:bold">string&lt;/span>[] args) {
Cercle cercle = &lt;span style="color:#fb660a;font-weight:bold">new&lt;/span> Cercle(&lt;span style="color:#0086f7;font-weight:bold">5&lt;/span>);
Console.WriteLine(&lt;span style="color:#0086d2">&amp;#34;Avant l&amp;#39;appel, cercle.Rayon = &amp;#34;&lt;/span> + cercle.Rayon); &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// 5
&lt;/span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> AugmenterRayon(cercle);
Console.WriteLine(&lt;span style="color:#0086d2">&amp;#34;Après l&amp;#39;appel, cercle.Rayon = &amp;#34;&lt;/span> + cercle.Rayon); &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// ?
&lt;/span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>}
&lt;span style="color:#fb660a;font-weight:bold">static&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">void&lt;/span> AugmenterRayon(Cercle unCercle) {
Console.WriteLine(&lt;span style="color:#0086d2">&amp;#34;Avant l&amp;#39;augmentation, unCercle.Rayon = &amp;#34;&lt;/span> + unCercle.Rayon);
unCercle.Rayon = unCercle.Rayon + &lt;span style="color:#0086f7;font-weight:bold">1&lt;/span>;
Console.WriteLine(&lt;span style="color:#0086d2">&amp;#34;Après l&amp;#39;augmentation, unCercle.Rayon = &amp;#34;&lt;/span> + unCercle.Rayon);
}
&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="résultat-de-lexécution">Résultat de l&amp;rsquo;exécution&lt;/h3>
&lt;p>&lt;img src="images/object_parameter_passing.png" alt="Résultat de l&amp;rsquo;exécution">&lt;/p>
&lt;ul>
&lt;li>La valeur de l’argument (une &lt;strong>référence&lt;/strong>) est copiée dans le paramètre.&lt;/li>
&lt;li>Argument et paramètre pointent vers la même zone mémoire.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;p>&lt;img src="images/object_parameter_passing_diagram.png" alt="Diagramme d&amp;rsquo;exécution">&lt;/p>
&lt;/section>
&lt;hr>
&lt;h3 id="mode-de-passage-des-parametres-en-c">Mode de passage des paramètres en C#&lt;/h3>
&lt;ul>
&lt;li>Par défaut, &lt;strong>tous les paramètres sont passés par valeur&lt;/strong>.&lt;/li>
&lt;li>Types valeur : valeur copiée de l’argument vers le paramètre =&amp;gt; zones mémoire distinctes.&lt;/li>
&lt;li>Types référence : référence copiée de l’argument vers le paramètre =&amp;gt; même zone mémoire.&lt;/li>
&lt;li>Possibilité de modifier ce comportement avec les mots-clés &lt;code>ref&lt;/code> et &lt;code>out&lt;/code>.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="gestion-des-exceptions">Gestion des exceptions&lt;/h2>
&lt;hr>
&lt;h3 id="introduction">Introduction&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>Exception&lt;/strong> : évènement qui apparaît pendant le déroulement d&amp;rsquo;un programme et qui empêche la poursuite normale de son exécution
&lt;ul>
&lt;li>Exemples : BD inaccessible, fichier non trouvé, bug interne…&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Gestion des exceptions : technique de gestion des erreurs dans un programme&lt;/li>
&lt;li>Avantage : séparation du code applicatif du code de gestion des erreurs&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="les-exceptions--syntaxe">Les exceptions : syntaxe&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="color:#fb660a;font-weight:bold">try&lt;/span> {
&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// code susceptible de lever des exceptions
&lt;/span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>}
&lt;span style="color:#fb660a;font-weight:bold">catch&lt;/span> (Exception e) {
&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// code de gestion de l’exception apparue
&lt;/span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>}
&lt;span style="color:#fb660a;font-weight:bold">finally&lt;/span> {
&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// code exécuté systématiquement
&lt;/span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>}
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// levée d’une nouvelle exception
&lt;/span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>&lt;span style="color:#fb660a;font-weight:bold">throw&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">new&lt;/span> Exception(&lt;span style="color:#0086d2">&amp;#34;Message d’erreur&amp;#34;&lt;/span>);
&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;section data-shortcode-section>
&lt;h3 id="les-exceptions--dynamique">Les exceptions : dynamique&lt;/h3>
&lt;ul>
&lt;li>Une exception levée remonte la chaîne des appels dans l&amp;rsquo;ordre inverse.&lt;/li>
&lt;li>Issues possibles :
&lt;ul>
&lt;li>interception dans un bloc &lt;code>catch&lt;/code>.&lt;/li>
&lt;li>arrêt brutal du programme.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;p>&lt;img src="images/exceptionx_dynamic.png" alt="Dynamique des exceptions">
&lt;/section>
&lt;hr>
&lt;h3 id="la-hiérarchie-des-exceptions">La hiérarchie des exceptions&lt;/h3>
&lt;p>&lt;img src="images/exceptions_hierarchy.png" alt="Hiérarchie des exceptions">&lt;/p>
&lt;hr>
&lt;h3 id="création-de-classes-dexceptions">Création de classes d&amp;rsquo;exceptions&lt;/h3>
&lt;p>Potentiellement utile pour distinguer différentes catégories d&amp;rsquo;erreur, avec des données spécifiques.&lt;/p>
&lt;p>&lt;img src="images/exceptions_classes.png" alt="Classes d&amp;rsquo;exceptions">&lt;/p>
&lt;hr>
&lt;h3 id="exceptions-et-bonnes-pratiques-13">Exceptions et bonnes pratiques (1/3)&lt;/h3>
&lt;ul>
&lt;li>Lever une exception uniquement pour signaler qu’une exécution normale n’est plus possible.&lt;/li>
&lt;li>Ne pas utiliser les exceptions pour des situations non exceptionnelles (succès d’une recherche, fin d’une itération, etc).&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">i = &lt;span style="color:#0086f7;font-weight:bold">0&lt;/span>;
trouve = &lt;span style="color:#fb660a;font-weight:bold">false&lt;/span>;
&lt;span style="color:#fb660a;font-weight:bold">while&lt;/span> (!trouve) {
i++;
&lt;span style="color:#fb660a;font-weight:bold">if&lt;/span> (i == &lt;span style="color:#0086f7;font-weight:bold">10&lt;/span>)
&lt;span style="color:#fb660a;font-weight:bold">throw&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">new&lt;/span> Exception(&lt;span style="color:#0086d2">&amp;#34;Fin de la boucle&amp;#34;&lt;/span>); &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Antipattern
&lt;/span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">else&lt;/span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// ...
&lt;/span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>}
&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;section data-shortcode-section>
&lt;h3 id="exceptions-et-bonnes-pratiques-23">Exceptions et bonnes pratiques (2/3)&lt;/h3>
&lt;ul>
&lt;li>Intercepter les exceptions uniquement si un traitement approprié est possible (message d’erreur, nouvelle tentative, etc)&lt;/li>
&lt;li>Sinon, la laisser remonter la chaîne des appels vers un meilleur endroit.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;div class="highlight">&lt;pre style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="color:#fb660a;font-weight:bold">try&lt;/span> {
&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// ...
&lt;/span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>}
&lt;span style="color:#fb660a;font-weight:bold">catch&lt;/span> (Exception e) {
&lt;span style="color:#fb660a;font-weight:bold">throw&lt;/span> e; &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Antipattern : bloc inutile
&lt;/span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>}
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="color:#fb660a;font-weight:bold">try&lt;/span> {
&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// ...
&lt;/span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>}
&lt;span style="color:#fb660a;font-weight:bold">catch&lt;/span> (Exception) {
&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Antipattern : exception &amp;#34;avalée&amp;#34;
&lt;/span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>}
&lt;/code>&lt;/pre>&lt;/div>
&lt;/section>
&lt;hr>
&lt;h3 id="exceptions-et-bonnes-pratiques-33">Exceptions et bonnes pratiques (3/3)&lt;/h3>
&lt;ul>
&lt;li>Bien réfléchir avant de créer ses propres classes d’exception.
&lt;ul>
&lt;li>En deça d’une certaine complexité, utiliser la classe standard &lt;code>Exception&lt;/code> suffit souvent.&lt;/li>
&lt;li>Toujours inclure le mot &lt;em>Exception&lt;/em> dans le nom de la classe.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Code de gestion des erreurs &lt;code>&amp;lt;&amp;lt;&lt;/code> code applicatif.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="possibilités-syntaxiques-récentes">Possibilités syntaxiques récentes&lt;/h2>
&lt;hr>
&lt;section data-shortcode-section>
&lt;h3 id="variables-sans-type-explicite">Variables sans type explicite&lt;/h3>
&lt;p>Le mot-clé &lt;code>var&lt;/code> permet de déclarer des variables &lt;em>implicitement typées&lt;/em>.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="color:#cdcaa9;font-weight:bold">int&lt;/span> i = &lt;span style="color:#0086f7;font-weight:bold">10&lt;/span>; &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Typage explicite
&lt;/span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>&lt;span style="color:#cdcaa9;font-weight:bold">var&lt;/span> i = &lt;span style="color:#0086f7;font-weight:bold">10&lt;/span>; &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Typage implicite
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Usage possible 1 : simplification du code de création d&amp;rsquo;objets (pas de répétition du type)&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="color:#cdcaa9;font-weight:bold">var&lt;/span> l = &lt;span style="color:#fb660a;font-weight:bold">new&lt;/span> List&amp;lt;&lt;span style="color:#cdcaa9;font-weight:bold">int&lt;/span>&amp;gt;();
l.Add(&lt;span style="color:#0086f7;font-weight:bold">3&lt;/span>);
&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// ...
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;p>Usage possible 2 : non-nécessité de créer un type spécifique pour le résultat d&amp;rsquo;une opération.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// var est nécessaire car la clause SELECT définit un type anonyme
&lt;/span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>&lt;span style="color:#cdcaa9;font-weight:bold">var&lt;/span> custQuery = &lt;span style="color:#fb660a;font-weight:bold">from&lt;/span> cust &lt;span style="color:#fb660a;font-weight:bold">in&lt;/span> customers
&lt;span style="color:#fb660a;font-weight:bold">where&lt;/span> cust.City == &lt;span style="color:#0086d2">&amp;#34;Bordeaux&amp;#34;&lt;/span>
&lt;span style="color:#fb660a;font-weight:bold">select&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">new&lt;/span> { cust.Name, cust.Phone };
&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Var est nécessaire car chaque élément de la collection est un type anonyme
&lt;/span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>&lt;span style="color:#fb660a;font-weight:bold">foreach&lt;/span> (&lt;span style="color:#cdcaa9;font-weight:bold">var&lt;/span> item &lt;span style="color:#fb660a;font-weight:bold">in&lt;/span> custQuery)
{
Console.WriteLine(&lt;span style="color:#0086d2">&amp;#34;Nom={0}, Téléphone={1}&amp;#34;&lt;/span>, item.Name, item.Phone);
}
&lt;/code>&lt;/pre>&lt;/div>
&lt;/section>
&lt;hr>
&lt;h3 id="chaînes-de-caractères-interpolées">Chaînes de caractères interpolées&lt;/h3>
&lt;p>Placé juste avant le début d&amp;rsquo;une chaîne, le caractère &lt;code>$&lt;/code> permet d&amp;rsquo;y insérer des expressions entre accolades &lt;code>{...}&lt;/code> qui seront évaluées pour produire la valeur de la chaîne.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="color:#cdcaa9;font-weight:bold">string&lt;/span> name = &lt;span style="color:#0086d2">&amp;#34;Clément&amp;#34;&lt;/span>;
&lt;span style="color:#cdcaa9;font-weight:bold">var&lt;/span> date = DateTime.Now;
Console.WriteLine(&lt;span style="color:#0086d2">&amp;#34;Hello, {0}! Today is {1}&amp;#34;&lt;/span>, name, date.DayOfWeek);
Console.WriteLine(&lt;span style="color:#0086d2">$&amp;#34;Hello, {name}! Today is {date.DayOfWeek}&amp;#34;&lt;/span>);
&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Ces deux lignes produisent un résultat identique, similaire à :
&lt;/span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// &amp;#34;Hello, Clément! Today is Monday&amp;#34;
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="types-valeur-nullables">Types valeur nullables&lt;/h3>
&lt;p>Un type valeur auquel on accole le caractère &lt;code>?&lt;/code> peut stocker la valeur &lt;code>null&lt;/code> en plus de sa plage de valeurs habituelle.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="color:#cdcaa9;font-weight:bold">int&lt;/span> a = &lt;span style="color:#fb660a;font-weight:bold">null&lt;/span>; &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Erreur: ce type de peut stocker que des valeurs entières
&lt;/span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>&lt;span style="color:#cdcaa9;font-weight:bold">int?&lt;/span> b = &lt;span style="color:#fb660a;font-weight:bold">null&lt;/span>; &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// OK
&lt;/span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>&lt;span style="color:#cdcaa9;font-weight:bold">int&lt;/span> c = b ?? -&lt;span style="color:#0086f7;font-weight:bold">1&lt;/span>; &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Conversion vers le type int
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Les types nullables facilitent la gestion des valeurs indéfinies (exemple : absence de valeur pour une colonne dans une BD).&lt;/p>
&lt;hr>
&lt;h3 id="annotations">Annotations&lt;/h3>
&lt;p>Les &lt;strong>annotations&lt;/strong>, également appelées &lt;em>attributs&lt;/em>, permettent d&amp;rsquo;ajouter des &lt;strong>métadonnées&lt;/strong> (des informations supplémentaires) à certains éléments du code : types, méthodes, propriétés&amp;hellip;&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="color:#ff0086;font-weight:bold">[Serializable]&lt;/span>
&lt;span style="color:#fb660a;font-weight:bold">public&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">class&lt;/span> ClasseExemple
{
&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Les instances de cette classe sont sérialisables
&lt;/span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>}
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Cette propriété est associée à un type BD spécifique
&lt;/span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>&lt;span style="color:#ff0086;font-weight:bold">[DataType(DataType.Date)]&lt;/span>
&lt;span style="color:#fb660a;font-weight:bold">public&lt;/span> DateTime ReleaseDate { &lt;span style="color:#fb660a;font-weight:bold">get&lt;/span>; &lt;span style="color:#fb660a;font-weight:bold">set&lt;/span>; }
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Le langage JavaScript</title><link>https://www.bpesquet.fr/slides/javascript/</link><pubDate>Mon, 16 Dec 2019 21:50:46 +0100</pubDate><guid>https://www.bpesquet.fr/slides/javascript/</guid><description>&lt;h2 id="sommaire">Sommaire&lt;/h2>
&lt;ul>
&lt;li>Pourquoi JavaScript ?&lt;/li>
&lt;li>Syntaxe du langage&lt;/li>
&lt;li>Environnement de travail&lt;/li>
&lt;li>TypeScript&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="pourquoi-javascript-">Pourquoi JavaScript ?&lt;/h2>
&lt;hr>
&lt;h3 id="javascript-is-eating-the-world">JavaScript is eating the world&lt;/h3>
&lt;p>&lt;img src="images/thus-javascript-is-eating-the-world.jpg" alt="JS is eating the world">&lt;/p>
&lt;hr>
&lt;h3 id="un-pré-requis-essentiel">Un pré-requis essentiel&lt;/h3>
&lt;p>La majorité des solutions mobiles multi-plateformes est basée sur JavaScript.&lt;/p>
&lt;p>&lt;img src="images/mobile_logos.png" alt="Frameworks multi-plateformes">&lt;/p>
&lt;hr>
&lt;h3 id="un-langage-modernisé">Un langage modernisé&lt;/h3>
&lt;p>JavaScript est normalisé sous le nom &lt;strong>ECMAScript&lt;/strong>.&lt;/p>
&lt;p>&lt;img src="images/js_history.png" alt="ECMAScript releases">&lt;/p>
&lt;p>La norme &lt;strong>ES2015&lt;/strong> (ou ES6) a apporté de très nombreuses améliorations au langage.&lt;/p>
&lt;hr>
&lt;h2 id="la-syntaxe-du-langage">La syntaxe du langage&lt;/h2>
&lt;hr>
&lt;h3 id="déclaration-de-variables">Déclaration de variables&lt;/h3>
&lt;p>JavaScript est un langage à typage &lt;strong>dynamique&lt;/strong>.&lt;/p>
&lt;p>&lt;code>let&lt;/code> et &lt;code>const&lt;/code> remplacent avantageusement &lt;code>var&lt;/code> pour la déclaration des variables.&lt;/p>
&lt;p>La valeur d&amp;rsquo;une variable déclarée avec &lt;code>const&lt;/code> ne peut plus être modifiée.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-js" data-lang="js">&lt;span style="color:#fb660a;font-weight:bold">let&lt;/span> a = &lt;span style="color:#0086f7;font-weight:bold">3.14&lt;/span>;
a = &lt;span style="color:#0086f7;font-weight:bold">6.28&lt;/span>; &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// OK
&lt;/span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>
&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> b = &lt;span style="color:#0086f7;font-weight:bold">3.14&lt;/span>;
b = &lt;span style="color:#0086f7;font-weight:bold">6.28&lt;/span>; &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Erreur!
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="chaînes-de-caractères">Chaînes de caractères&lt;/h3>
&lt;p>Créées avec des guillemets simples (&lt;code>'...'&lt;/code>) ou doubles (&lt;code>&amp;quot;...&amp;quot;&lt;/code>).&lt;/p>
&lt;p>&lt;strong>Litéraux de modèle&lt;/strong>: chaînes créées entre &lt;em>backticks&lt;/em> (`) et permettant d&amp;rsquo;intégrer des expressions.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-js" data-lang="js">&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> country = &lt;span style="color:#0086d2">&amp;#34;France&amp;#34;&lt;/span>; &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// or &amp;#39;France&amp;#39;
&lt;/span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>console.log(&lt;span style="color:#0086d2">`I live in &lt;/span>&lt;span style="color:#0086d2">${&lt;/span>country&lt;span style="color:#0086d2">}&lt;/span>&lt;span style="color:#0086d2">`&lt;/span>); &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// &amp;#34;I live in France&amp;#34;
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="déclaration-de-fonctions">Déclaration de fonctions&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-js" data-lang="js">&lt;span style="color:#fb660a;font-weight:bold">function&lt;/span> sayHello(name) {
&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> message = &lt;span style="color:#0086d2">`Hello, &lt;/span>&lt;span style="color:#0086d2">${&lt;/span>name&lt;span style="color:#0086d2">}&lt;/span>&lt;span style="color:#0086d2">!`&lt;/span>;
&lt;span style="color:#fb660a;font-weight:bold">return&lt;/span> message;
}
console.log(sayHello(&lt;span style="color:#0086d2">&amp;#34;Richard&amp;#34;&lt;/span>)); &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// &amp;#34;Hello, Richard!&amp;#34;
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="expressions-fonction">Expressions fonction&lt;/h3>
&lt;p>Permettent de créer des fonctions anonymes.&lt;/p>
&lt;p>La valeur d&amp;rsquo;une variable JavaScript peut être une fonction.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-js" data-lang="js">&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> hello = &lt;span style="color:#fb660a;font-weight:bold">function&lt;/span> (name) {
&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> message = &lt;span style="color:#0086d2">`Hello, &lt;/span>&lt;span style="color:#0086d2">${&lt;/span>name&lt;span style="color:#0086d2">}&lt;/span>&lt;span style="color:#0086d2">!`&lt;/span>;
&lt;span style="color:#fb660a;font-weight:bold">return&lt;/span> message;
};
console.log(hello(&lt;span style="color:#0086d2">&amp;#34;Richard&amp;#34;&lt;/span>)); &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// &amp;#34;Hello, Richard!&amp;#34;
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="fonctions-fléchées">Fonctions fléchées&lt;/h3>
&lt;p>&amp;ldquo;&lt;em>Fat arrow functions&lt;/em>&amp;rdquo;.&lt;/p>
&lt;p>Syntaxe plus concise pour créer des fonctions anonymes.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-js" data-lang="js">&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> hello = (name) =&amp;gt; {
&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> message = &lt;span style="color:#0086d2">`Hello, &lt;/span>&lt;span style="color:#0086d2">${&lt;/span>name&lt;span style="color:#0086d2">}&lt;/span>&lt;span style="color:#0086d2">!`&lt;/span>;
&lt;span style="color:#fb660a;font-weight:bold">return&lt;/span> message;
};
&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Syntaxe alternative encore plus concise
&lt;/span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// const hello = name =&amp;gt; `Hello, ${name}!`;
&lt;/span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>
console.log(hello(&lt;span style="color:#0086d2">&amp;#34;Richard&amp;#34;&lt;/span>)); &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// &amp;#34;Hello, Richard!&amp;#34;
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="tableaux">Tableaux&lt;/h3>
&lt;p>Plusieurs syntaxes existent pour les parcourir.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-js" data-lang="js">&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> movies = [&lt;span style="color:#0086d2">&amp;#34;The Wolf of Wall Street&amp;#34;&lt;/span>, &lt;span style="color:#0086d2">&amp;#34;Zootopia&amp;#34;&lt;/span>, &lt;span style="color:#0086d2">&amp;#34;Babysitting&amp;#34;&lt;/span>];
console.log(movies.length); &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// 3
&lt;/span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>
&lt;span style="color:#fb660a;font-weight:bold">for&lt;/span> (&lt;span style="color:#fb660a;font-weight:bold">let&lt;/span> i = &lt;span style="color:#0086f7;font-weight:bold">0&lt;/span>; i &amp;lt; movies.length; i++) {
&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Use movies[i] to access each array element one by one
&lt;/span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>}
movies.forEach((movie) =&amp;gt; {
&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Use movie to access each array element one by one
&lt;/span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>});
&lt;span style="color:#fb660a;font-weight:bold">for&lt;/span> (&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> movie &lt;span style="color:#fb660a;font-weight:bold">of&lt;/span> movies) {
&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Use movie to access each array element one by one
&lt;/span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>}
&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="objets">Objets&lt;/h3>
&lt;p>Un objet JavaScript regroupe un ensemble de &lt;strong>propriétés&lt;/strong> (paire clé/valeur).&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-js" data-lang="js">&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Création d&amp;#39;un objet litéral
&lt;/span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> pen = {
type: &lt;span style="color:#0086d2">&amp;#34;ballpoint&amp;#34;&lt;/span>,
color: &lt;span style="color:#0086d2">&amp;#34;blue&amp;#34;&lt;/span>,
brand: &lt;span style="color:#0086d2">&amp;#34;Bic&amp;#34;&lt;/span>,
};
&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Modifcation de la valeur d&amp;#39;une propriété
&lt;/span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>pen.color = &lt;span style="color:#0086d2">&amp;#34;red&amp;#34;&lt;/span>;
console.log(pen.type); &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// &amp;#34;ballpoint&amp;#34;
&lt;/span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>console.log(pen.color); &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// &amp;#34;red&amp;#34;
&lt;/span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>console.log(pen.brand); &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// &amp;#34;Bic&amp;#34;
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="création-dobjets-à-partir-de-variables">Création d&amp;rsquo;objets à partir de variables&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-js" data-lang="js">&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> firstName = &lt;span style="color:#0086d2">&amp;#34;Baptiste&amp;#34;&lt;/span>;
&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> lastName = &lt;span style="color:#0086d2">&amp;#34;Pesquet&amp;#34;&lt;/span>;
&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> twitterHandle = &lt;span style="color:#0086d2">&amp;#34;@bpesquet&amp;#34;&lt;/span>;
&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> teacher = { firstName, lastName, twitterHandle };
console.log(teacher.firstName); &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// &amp;#34;Baptiste&amp;#34;
&lt;/span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>console.log(teacher.lastName); &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// &amp;#34;Pesquet&amp;#34;
&lt;/span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>console.log(teacher.twitterHandle); &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// &amp;#34;@bpesquet&amp;#34;
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="déstructuration-dobjets">Déstructuration d&amp;rsquo;objets&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-js" data-lang="js">&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> pen = {
type: &lt;span style="color:#0086d2">&amp;#34;ballpoint&amp;#34;&lt;/span>,
color: &lt;span style="color:#0086d2">&amp;#34;blue&amp;#34;&lt;/span>,
brand: &lt;span style="color:#0086d2">&amp;#34;Bic&amp;#34;&lt;/span>,
};
&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Accès à 2 des propriétés de l&amp;#39;objet
&lt;/span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> { color, brand } = pen;
console.log(color); &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// &amp;#34;blue&amp;#34;
&lt;/span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>console.log(brand); &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// &amp;#34;Bic&amp;#34;
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="déstructuration-de-tableaux">Déstructuration de tableaux&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-js" data-lang="js">&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> primaryColors = [&lt;span style="color:#0086d2">&amp;#34;red&amp;#34;&lt;/span>, &lt;span style="color:#0086d2">&amp;#34;green&amp;#34;&lt;/span>, &lt;span style="color:#0086d2">&amp;#34;blue&amp;#34;&lt;/span>];
&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> [red, green, blue] = primaryColors;
console.log(red); &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// &amp;#34;red&amp;#34;
&lt;/span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>console.log(green); &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// &amp;#34;red&amp;#34;
&lt;/span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>console.log(blue); &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// &amp;#34;blue&amp;#34;
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="opérateur-de-décomposition-_spread_">Opérateur de décomposition (&amp;quot;&lt;em>spread&lt;/em>&amp;quot;)&lt;/h3>
&lt;p>Permet de développer une valeur itérable (chaîne, tableau&amp;hellip;).&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-js" data-lang="js">&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> chaine = &lt;span style="color:#0086d2">&amp;#34;foo bar&amp;#34;&lt;/span>;
console.log(chaine); &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// &amp;#34;foo bar&amp;#34;
&lt;/span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>console.log([...chaine]); &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// [&amp;#34;f&amp;#34;, &amp;#34;o&amp;#34;, &amp;#34;o&amp;#34;, &amp;#34; &amp;#34;, &amp;#34;b&amp;#34;, &amp;#34;a&amp;#34;, &amp;#34;r&amp;#34;]
&lt;/span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>
&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> numbers = [&lt;span style="color:#0086d2">&amp;#34;one&amp;#34;&lt;/span>, &lt;span style="color:#0086d2">&amp;#34;two&amp;#34;&lt;/span>, &lt;span style="color:#0086d2">&amp;#34;three&amp;#34;&lt;/span>, &lt;span style="color:#0086d2">&amp;#34;four&amp;#34;&lt;/span>];
&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> [one, two, ...rest] = numbers;
console.log(one); &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// &amp;#34;one&amp;#34;
&lt;/span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>console.log(two); &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// &amp;#34;two&amp;#34;
&lt;/span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>console.log(rest); &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// [&amp;#34;three&amp;#34;, &amp;#34;four&amp;#34;]
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="notion-de-méthode">Notion de méthode&lt;/h3>
&lt;p>La valeur d&amp;rsquo;une propriété peut être une donnée ou une fonction. Dans le second cas, la propriété est une &lt;strong>méthode&lt;/strong>.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-js" data-lang="js">&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> aurora = {
name: &lt;span style="color:#0086d2">&amp;#34;Aurora&amp;#34;&lt;/span>,
health: &lt;span style="color:#0086f7;font-weight:bold">150&lt;/span>,
strength: &lt;span style="color:#0086f7;font-weight:bold">25&lt;/span>,
&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Renvoie la description du personnage
&lt;/span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> describe() {
&lt;span style="color:#fb660a;font-weight:bold">return&lt;/span> &lt;span style="color:#0086d2">`&lt;/span>&lt;span style="color:#0086d2">${&lt;/span>&lt;span style="color:#fb660a;font-weight:bold">this&lt;/span>.name&lt;span style="color:#0086d2">}&lt;/span>&lt;span style="color:#0086d2"> has &lt;/span>&lt;span style="color:#0086d2">${&lt;/span>&lt;span style="color:#fb660a;font-weight:bold">this&lt;/span>.health&lt;span style="color:#0086d2">}&lt;/span>&lt;span style="color:#0086d2"> health points
&lt;/span>&lt;span style="color:#0086d2"> and &lt;/span>&lt;span style="color:#0086d2">${&lt;/span>&lt;span style="color:#fb660a;font-weight:bold">this&lt;/span>.strength&lt;span style="color:#0086d2">}&lt;/span>&lt;span style="color:#0086d2"> as strength`&lt;/span>;
},
};
&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="classes">Classes&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-js" data-lang="js">&lt;span style="color:#fb660a;font-weight:bold">class&lt;/span> Character {
constructor(name, health, strength) {
&lt;span style="color:#fb660a;font-weight:bold">this&lt;/span>.name = name;
&lt;span style="color:#fb660a;font-weight:bold">this&lt;/span>.health = health;
&lt;span style="color:#fb660a;font-weight:bold">this&lt;/span>.strength = strength;
}
describe() {
&lt;span style="color:#fb660a;font-weight:bold">return&lt;/span> &lt;span style="color:#0086d2">`&lt;/span>&lt;span style="color:#0086d2">${&lt;/span>&lt;span style="color:#fb660a;font-weight:bold">this&lt;/span>.name&lt;span style="color:#0086d2">}&lt;/span>&lt;span style="color:#0086d2"> has &lt;/span>&lt;span style="color:#0086d2">${&lt;/span>&lt;span style="color:#fb660a;font-weight:bold">this&lt;/span>.health&lt;span style="color:#0086d2">}&lt;/span>&lt;span style="color:#0086d2"> health points
&lt;/span>&lt;span style="color:#0086d2"> and &lt;/span>&lt;span style="color:#0086d2">${&lt;/span>&lt;span style="color:#fb660a;font-weight:bold">this&lt;/span>.strength&lt;span style="color:#0086d2">}&lt;/span>&lt;span style="color:#0086d2"> as strength`&lt;/span>;
}
}
&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> aurora = &lt;span style="color:#fb660a;font-weight:bold">new&lt;/span> Character(&lt;span style="color:#0086d2">&amp;#34;Aurora&amp;#34;&lt;/span>, &lt;span style="color:#0086f7;font-weight:bold">150&lt;/span>, &lt;span style="color:#0086f7;font-weight:bold">25&lt;/span>);
console.log(aurora.describe());
&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h2 id="modules-et-imports">Modules et imports&lt;/h2>
&lt;p>JavaScript supporte la notion de &lt;strong>module&lt;/strong> pour factoriser des éléments réutilisables.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-js" data-lang="js">&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Importe l&amp;#39;élément exporté par défaut par le module
&lt;/span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> React from &lt;span style="color:#0086d2">&amp;#34;react-native&amp;#34;&lt;/span>;
&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Importe d&amp;#39;autres éléments exportés grâce à leur nom
&lt;/span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> { View, Text, Image } from &lt;span style="color:#0086d2">&amp;#34;react-native&amp;#34;&lt;/span>;
&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Importe à la fois l&amp;#39;élément par défaut et d&amp;#39;autres éléments
&lt;/span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> React, { View, Text, Image } from &lt;span style="color:#0086d2">&amp;#34;react-native&amp;#34;&lt;/span>;
&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="plus-de-détails-sur-javascript">Plus de détails sur JavaScript&lt;/h3>
&lt;p>&lt;a href="https://developer.mozilla.org/fr/docs/Web/JavaScript">https://developer.mozilla.org/fr/docs/Web/JavaScript&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://github.com/thejsway/thejsway/">https://github.com/thejsway/thejsway/&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://github.com/getify/You-Dont-Know-JS">https://github.com/getify/You-Dont-Know-JS&lt;/a>&lt;/p>
&lt;hr>
&lt;h2 id="environnement-de-travail">Environnement de travail&lt;/h2>
&lt;hr>
&lt;p>&lt;img src="images/node-logo.png" alt="Node logo">&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Plate-forme JavaScript basée sur le moteur d&amp;rsquo;exécution V8 de Chrome.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Permet de créer des applications JS hors du navigateur (serveur, mobile, etc).&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Supporte un riche écosystème de librairies en tout genre installables sous forme de &lt;strong>packages&lt;/strong>.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="gestion-des-dépendances">Gestion des dépendances&lt;/h3>
&lt;p>Le standard historique est &lt;a href="https://www.npmjs.com/">npm&lt;/a>.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">npm init &lt;span style="color:#080;background-color:#0f140f;font-style:italic"># Create a minimal package.json file&lt;/span>
npm install &amp;lt;package name&amp;gt; &lt;span style="color:#080;background-color:#0f140f;font-style:italic"># Install &amp;lt;package name&amp;gt; locally&lt;/span>
npm install -g &amp;lt;package name&amp;gt; &lt;span style="color:#080;background-color:#0f140f;font-style:italic"># Install &amp;lt;package name&amp;gt; globally&lt;/span>
npm install &lt;span style="color:#080;background-color:#0f140f;font-style:italic"># Install all packages listed in package.json&lt;/span>
npm update &lt;span style="color:#080;background-color:#0f140f;font-style:italic"># Update local packages to latest version&lt;/span>
npm update -g &lt;span style="color:#080;background-color:#0f140f;font-style:italic"># Update global packages to latest version&lt;/span>
npm list &lt;span style="color:#080;background-color:#0f140f;font-style:italic"># List locally installed packages&lt;/span>
npm list -g &lt;span style="color:#080;background-color:#0f140f;font-style:italic"># List globally installed packages&lt;/span>
&lt;span style="color:#080;background-color:#0f140f;font-style:italic"># Search the package index for &amp;lt;package name&amp;gt;&lt;/span>
npm search &amp;lt;package name&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Autre possibilité : &lt;a href="https://yarnpkg.com/lang/en/">yarn&lt;/a> (plus récent).&lt;/p>
&lt;hr>
&lt;h3 id="le-fichier-packagejson">Le fichier package.json&lt;/h3>
&lt;p>Associé à un fichier verrou &lt;code>package-lock.json&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-json" data-lang="json">{
&lt;span style="color:#fb660a;font-weight:bold">&amp;#34;main&amp;#34;&lt;/span>: &lt;span style="color:#0086d2">&amp;#34;node_modules/expo/AppEntry.js&amp;#34;&lt;/span>,
&lt;span style="color:#fb660a;font-weight:bold">&amp;#34;scripts&amp;#34;&lt;/span>: {
&lt;span style="color:#fb660a;font-weight:bold">&amp;#34;start&amp;#34;&lt;/span>: &lt;span style="color:#0086d2">&amp;#34;expo start&amp;#34;&lt;/span>,
&lt;span style="color:#fb660a;font-weight:bold">&amp;#34;android&amp;#34;&lt;/span>: &lt;span style="color:#0086d2">&amp;#34;expo start --android&amp;#34;&lt;/span>,
&lt;span style="color:#fb660a;font-weight:bold">&amp;#34;ios&amp;#34;&lt;/span>: &lt;span style="color:#0086d2">&amp;#34;expo start --ios&amp;#34;&lt;/span>,
&lt;span style="color:#fb660a;font-weight:bold">&amp;#34;eject&amp;#34;&lt;/span>: &lt;span style="color:#0086d2">&amp;#34;expo eject&amp;#34;&lt;/span>
},
&lt;span style="color:#fb660a;font-weight:bold">&amp;#34;dependencies&amp;#34;&lt;/span>: {
&lt;span style="color:#fb660a;font-weight:bold">&amp;#34;react-native&amp;#34;&lt;/span>: &lt;span style="color:#0086d2">&amp;#34;https://github.com/expo/react-native/archive/sdk-35.0.0.tar.gz&amp;#34;&lt;/span>,
&lt;span style="color:#fb660a;font-weight:bold">&amp;#34;expo&amp;#34;&lt;/span>: &lt;span style="color:#0086d2">&amp;#34;~35.0.0&amp;#34;&lt;/span>,
&lt;span style="color:#fb660a;font-weight:bold">&amp;#34;react&amp;#34;&lt;/span>: &lt;span style="color:#0086d2">&amp;#34;16.8.3&amp;#34;&lt;/span>
},
&lt;span style="color:#fb660a;font-weight:bold">&amp;#34;devDependencies&amp;#34;&lt;/span>: {
&lt;span style="color:#fb660a;font-weight:bold">&amp;#34;babel-preset-expo&amp;#34;&lt;/span>: &lt;span style="color:#0086d2">&amp;#34;~8.0.0&amp;#34;&lt;/span>
},
&lt;span style="color:#fb660a;font-weight:bold">&amp;#34;private&amp;#34;&lt;/span>: &lt;span style="color:#fb660a;font-weight:bold">true&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="versionnage-des-dépendances">Versionnage des dépendances&lt;/h3>
&lt;p>Versionnage sémantique &lt;strong>X.Y.Z&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>X = version majeure (changements potentiellement non rétrocompatibles).&lt;/li>
&lt;li>Y = version mineure.&lt;/li>
&lt;li>Z = patch.&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>^1.1.1&lt;/strong> équivaut à $\geq$ 1.1.1 et $&amp;lt;$ 2.0.0&lt;/p>
&lt;p>&lt;strong>~1.1.1&lt;/strong> équivaut à $\geq$ 1.1.1 et $&amp;lt;$ 1.2.0&lt;/p>
&lt;p>&lt;strong>1.1.1&lt;/strong> cible une version exacte.&lt;/p>
&lt;hr>
&lt;h3 id="formatage-automatique-du-code">Formatage automatique du code&lt;/h3>
&lt;p>&lt;a href="https://prettier.io/">Prettier&lt;/a> est un outil indispensable.&lt;/p>
&lt;p>&lt;a href="https://prettier.io/">&lt;img src="images/prettier-logo-light.png" alt="Prettier logo">&lt;/a>&lt;/p>
&lt;hr>
&lt;h3 id="analyse-du-code">Analyse du code&lt;/h3>
&lt;p>&lt;a href="https://eslint.org/">ESLint&lt;/a> est l&amp;rsquo;outil le plus utilisé. Sa configuration se fait via un fichier &lt;code>.eslintrc.json&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-json" data-lang="json">{
&lt;span style="color:#fb660a;font-weight:bold">&amp;#34;extends&amp;#34;&lt;/span>: [&lt;span style="color:#0086d2">&amp;#34;airbnb&amp;#34;&lt;/span>, &lt;span style="color:#0086d2">&amp;#34;prettier&amp;#34;&lt;/span>],
&lt;span style="color:#fb660a;font-weight:bold">&amp;#34;env&amp;#34;&lt;/span>: {
&lt;span style="color:#fb660a;font-weight:bold">&amp;#34;browser&amp;#34;&lt;/span>: &lt;span style="color:#fb660a;font-weight:bold">true&lt;/span>
},
&lt;span style="color:#fb660a;font-weight:bold">&amp;#34;plugins&amp;#34;&lt;/span>: [&lt;span style="color:#0086d2">&amp;#34;prettier&amp;#34;&lt;/span>],
&lt;span style="color:#fb660a;font-weight:bold">&amp;#34;rules&amp;#34;&lt;/span>: {
&lt;span style="color:#fb660a;font-weight:bold">&amp;#34;no-console&amp;#34;&lt;/span>: &lt;span style="color:#0086d2">&amp;#34;off&amp;#34;&lt;/span>,
&lt;span style="color:#fb660a;font-weight:bold">&amp;#34;no-alert&amp;#34;&lt;/span>: &lt;span style="color:#0086d2">&amp;#34;off&amp;#34;&lt;/span>,
&lt;span style="color:#fb660a;font-weight:bold">&amp;#34;no-plusplus&amp;#34;&lt;/span>: &lt;span style="color:#0086d2">&amp;#34;off&amp;#34;&lt;/span>,
&lt;span style="color:#fb660a;font-weight:bold">&amp;#34;default-case&amp;#34;&lt;/span>: &lt;span style="color:#0086d2">&amp;#34;off&amp;#34;&lt;/span>,
&lt;span style="color:#fb660a;font-weight:bold">&amp;#34;no-param-reassign&amp;#34;&lt;/span>: [
&lt;span style="color:#0086d2">&amp;#34;error&amp;#34;&lt;/span>,
{
&lt;span style="color:#fb660a;font-weight:bold">&amp;#34;props&amp;#34;&lt;/span>: &lt;span style="color:#fb660a;font-weight:bold">false&lt;/span>
}
],
&lt;span style="color:#fb660a;font-weight:bold">&amp;#34;arrow-body-style&amp;#34;&lt;/span>: [
&lt;span style="color:#0086d2">&amp;#34;error&amp;#34;&lt;/span>,
&lt;span style="color:#0086d2">&amp;#34;as-needed&amp;#34;&lt;/span>,
{ &lt;span style="color:#fb660a;font-weight:bold">&amp;#34;requireReturnForObjectLiteral&amp;#34;&lt;/span>: &lt;span style="color:#fb660a;font-weight:bold">true&lt;/span> }
]
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="transpilation-du-code">Transpilation du code&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="https://babeljs.io/">Babel&lt;/a> transforme le code JavaScript ES2015+ en code ES5 compatible avec tous les environnements d&amp;rsquo;exécution JS.&lt;/li>
&lt;li>Il permet d&amp;rsquo;utiliser sereinement les dernières évolutions du langage.&lt;/li>
&lt;/ul>
&lt;p>&lt;a href="https://babeljs.io/">&lt;img src="images/Babel-Javascript-compiler.png" alt="Babel logo">&lt;/a>&lt;/p>
&lt;hr>
&lt;h2 id="typescript">TypeScript&lt;/h2>
&lt;hr>
&lt;h3 id="des-types-pour-javascript">Des types pour JavaScript&lt;/h3>
&lt;p>&lt;a href="https://www.typescriptlang.org/">TypeScript&lt;/a> est un sur-ensemble syntaxique de JavaScript qui permet un typage statique optionnel du code.&lt;/p>
&lt;p>Créé à l&amp;rsquo;origine par Microsoft, il est libre et open source.&lt;/p>
&lt;p>&lt;img src="images/typescript.png" alt="TypeScript logo">&lt;/p>
&lt;hr>
&lt;h3 id="installation-et-utilisation">Installation et utilisation&lt;/h3>
&lt;p>TS est supporté par la plupart des éditeurs de code.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#080;background-color:#0f140f;font-style:italic"># Install TypeScript globally&lt;/span>
npm install -g typescript
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#080;background-color:#0f140f;font-style:italic"># The TS compiler produces a pure JS version of the TS file&lt;/span>
tsc my_typescript_file.ts
&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="annotations-de-type">Annotations de type&lt;/h3>
&lt;p>Elles permettent de préciser les &lt;em>contrats&lt;/em> des fonctions ou des méthodes.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-ts" data-lang="ts">&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// This function is meant to receive an input of type string
&lt;/span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>&lt;span style="color:#fb660a;font-weight:bold">function&lt;/span> hello(person: &lt;span style="color:#cdcaa9;font-weight:bold">string&lt;/span>) {
&lt;span style="color:#fb660a;font-weight:bold">return&lt;/span> &lt;span style="color:#0086d2">&amp;#34;Hello, &amp;#34;&lt;/span> + person;
}
&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> user = &lt;span style="color:#0086d2">&amp;#34;Jane Doe&amp;#34;&lt;/span>;
&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Uncomment to see TS error checking in action
&lt;/span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">//const user = [0, 1, 2];
&lt;/span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>
console.log(hello(user)); &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// &amp;#34;Hello, Jane Doe&amp;#34;
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="interfaces">Interfaces&lt;/h3>
&lt;p>Elles permettent de définir des structures de données complexes.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-ts" data-lang="ts">&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Describes objects that have a firstName and lastName field
&lt;/span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>&lt;span style="color:#fb660a;font-weight:bold">interface&lt;/span> Person {
firstName: &lt;span style="color:#cdcaa9;font-weight:bold">string&lt;/span>;
lastName: &lt;span style="color:#cdcaa9;font-weight:bold">string&lt;/span>;
}
&lt;span style="color:#fb660a;font-weight:bold">function&lt;/span> hello(person: &lt;span style="color:#cdcaa9;font-weight:bold">Person&lt;/span>) {
&lt;span style="color:#fb660a;font-weight:bold">return&lt;/span> &lt;span style="color:#0086d2">&amp;#34;Hello, &amp;#34;&lt;/span> + person.firstName + &lt;span style="color:#0086d2">&amp;#34; &amp;#34;&lt;/span> + person.lastName;
}
&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// ... (see next slides)
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="duck-typing">Duck typing&lt;/h3>
&lt;blockquote>
&lt;p>&amp;ldquo;If it walks like a duck and quacks like a duck, it must be a duck.&amp;rdquo;&lt;/p>
&lt;/blockquote>
&lt;p>TS se base sur la structure concrète des objets, et non sur l&amp;rsquo;implémentation explicite d&amp;rsquo;une interface.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-ts" data-lang="ts">&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// This object is structurally compatible with the Person interface
&lt;/span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> user = { firstName: &lt;span style="color:#0086d2">&amp;#34;Jane&amp;#34;&lt;/span>, lastName: &lt;span style="color:#0086d2">&amp;#34;Doe&amp;#34;&lt;/span> };
console.log(hello(user)); &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// &amp;#34;Hello, Jane Doe&amp;#34;
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="définition-de-classes">Définition de classes&lt;/h3>
&lt;p>TS supporte les définitions de classes apportées par les versions ES2015+ de JS.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-ts" data-lang="ts">&lt;span style="color:#fb660a;font-weight:bold">class&lt;/span> Student {
fullName: &lt;span style="color:#cdcaa9;font-weight:bold">string&lt;/span>;
&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// The public argument implicitly creates properties
&lt;/span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">constructor&lt;/span>(
&lt;span style="color:#fb660a;font-weight:bold">public&lt;/span> firstName: &lt;span style="color:#cdcaa9;font-weight:bold">string&lt;/span>,
&lt;span style="color:#fb660a;font-weight:bold">public&lt;/span> middleInitial: &lt;span style="color:#cdcaa9;font-weight:bold">string&lt;/span>,
&lt;span style="color:#fb660a;font-weight:bold">public&lt;/span> lastName: &lt;span style="color:#cdcaa9;font-weight:bold">string&lt;/span>
) {
&lt;span style="color:#fb660a;font-weight:bold">this&lt;/span>.fullName = firstName + &lt;span style="color:#0086d2">&amp;#34; &amp;#34;&lt;/span> + middleInitial + &lt;span style="color:#0086d2">&amp;#34; &amp;#34;&lt;/span> + lastName;
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="utilisation-de-classes">Utilisation de classes&lt;/h3>
&lt;p>Classes et interfaces TS sont compatibles. Le développeur peut ainsi choisir le bon niveau d&amp;rsquo;abstraction.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-ts" data-lang="ts">&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> user = &lt;span style="color:#fb660a;font-weight:bold">new&lt;/span> Student(&lt;span style="color:#0086d2">&amp;#34;Jane&amp;#34;&lt;/span>, &lt;span style="color:#0086d2">&amp;#34;M.&amp;#34;&lt;/span>, &lt;span style="color:#0086d2">&amp;#34;Doe&amp;#34;&lt;/span>);
console.log(hello(user)); &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// &amp;#34;Hello, Jane Doe&amp;#34;
&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Deconstructing AI</title><link>https://www.bpesquet.fr/slides/deconstructing-ai/</link><pubDate>Mon, 09 Dec 2019 10:47:12 +0100</pubDate><guid>https://www.bpesquet.fr/slides/deconstructing-ai/</guid><description>&lt;h2 id="table-of-contents">Table of contents&lt;/h2>
&lt;ul>
&lt;li>What Is AI, Actually?&lt;/li>
&lt;li>How Do Machines Learn?&lt;/li>
&lt;li>Should We Be Scared Of AI?&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="what-is-ai-actually">What Is AI, Actually?&lt;/h2>
&lt;hr>
&lt;h3 id="the-original-ambition-of-ai">The original ambition of AI&lt;/h3>
&lt;blockquote>
&lt;p>&amp;ldquo;AI is the science and engineering of making intelligent machines.&amp;rdquo; (&lt;a href="https://en.wikipedia.org/wiki/John_McCarthy_(computer_scientist)">John McCarthy&lt;/a>)&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>&amp;ldquo;Every aspect of learning or any other feature of intelligence can in principle be so precisely described that a machine can be made to simulate it.&amp;rdquo; (&lt;a href="https://en.wikipedia.org/wiki/Dartmouth_workshop">Dartmouth Workshop&lt;/a>, 1956)&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>&amp;ldquo;AI is the science of making machines do things that would require intelligence if done by men.&amp;rdquo; (&lt;a href="https://en.wikipedia.org/wiki/Marvin_Minsky">Marvin Minsky&lt;/a>)&lt;/p>
&lt;/blockquote>
&lt;hr>
&lt;h3 id="a-technical-definition-of-ai">A technical definition of AI&lt;/h3>
&lt;blockquote>
&lt;p>&amp;ldquo;AI refers to systems that &lt;strong>display&lt;/strong> intelligent behavior by analysing their &lt;strong>environment&lt;/strong> and taking &lt;strong>actions&lt;/strong> - with some degree of &lt;strong>autonomy&lt;/strong> - to achieve specific &lt;strong>goals&lt;/strong>.&amp;rdquo; (&lt;a href="https://ec.europa.eu/newsroom/dae/document.cfm?doc_id=51625">EC, 2018&lt;/a>)&lt;/p>
&lt;/blockquote>
&lt;p>AI systems can be either:&lt;/p>
&lt;ul>
&lt;li>Purely &lt;strong>software&lt;/strong>-based (e.g. voice assistants, search engines, face recognition systems).&lt;/li>
&lt;li>Embedded in &lt;strong>hardware&lt;/strong> devices (e.g. robots, autonomous cars, drones).&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="main-areas-of-research">Main areas of research&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>Problem solving&lt;/strong> (e.g. search algorithms, constraint solving).&lt;/li>
&lt;li>&lt;strong>Reasoning&lt;/strong> and &lt;strong>decision making&lt;/strong> (e.g. logic, knowledge representation).&lt;/li>
&lt;li>&lt;strong>Machine Learning&lt;/strong>.&lt;/li>
&lt;li>&lt;strong>Real-world interactions&lt;/strong> (e.g. computer vision, natural language understanding, robotics).&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="ai-is-a-moving-target">AI is a moving target&lt;/h3>
&lt;p>As soon as AI successfully solves a problem, the problem is no longer considered a part of AI.&lt;/p>
&lt;blockquote>
&lt;p>&amp;ldquo;&lt;a href="https://en.wikipedia.org/wiki/AI_effect">AI is whatever hasn&amp;rsquo;t been done yet&lt;/a>.&amp;rdquo;&lt;/p>
&lt;/blockquote>
&lt;hr>
&lt;h3 id="the-tumultuous-history-of-ai">The tumultuous history of AI&lt;/h3>
&lt;p>&lt;a href="https://www.slideshare.net/dlavenda/ai-and-productivity">&lt;img src="images/ai_timeline.png" alt="The AI timeline">&lt;/a>&lt;/p>
&lt;hr>
&lt;h3 id="ai-is-a-highly-interdisciplinary-field">AI is a highly interdisciplinary field&lt;/h3>
&lt;p>&lt;img src="images/ai_fields.png" alt="AI fields">&lt;/p>
&lt;hr>
&lt;h3 id="ai-is-a-social-science">AI is a social science&lt;/h3>
&lt;p>AI has many social and societal implications:&lt;/p>
&lt;ul>
&lt;li>Job market transformation.&lt;/li>
&lt;li>Human/machine interactions.&lt;/li>
&lt;li>Trust and acceptability.&lt;/li>
&lt;li>Legal aspects and regulation.&lt;/li>
&lt;li>Fairness.&lt;/li>
&lt;li>Ethical use.&lt;/li>
&lt;li>Personal data.&lt;/li>
&lt;li>&amp;hellip;&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="ai-comes-in-different-flavours">AI comes in different flavours&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>Substitutive intelligence&lt;/strong>: replacement of men by machines.&lt;/li>
&lt;li>&lt;strong>Augmented intelligence&lt;/strong>: human-centered AI for performance augmentation &amp;amp; autonomy enhancement.&lt;/li>
&lt;li>&lt;strong>Hybrid intelligence&lt;/strong>: human-machine collaboration on complex tasks.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="a-broader-definition-of-ai">A broader definition of AI&lt;/h3>
&lt;blockquote>
&lt;p>&amp;ldquo;AI is an &lt;strong>interdisciplinary&lt;/strong> field aiming at &lt;strong>understanding&lt;/strong> and &lt;strong>imitating&lt;/strong> the mechanisms of &lt;strong>cognition&lt;/strong> and &lt;strong>reasoning&lt;/strong>, in order to &lt;strong>assist&lt;/strong> or &lt;strong>substitute&lt;/strong> humans in their activities.&amp;rdquo; (&lt;a href="https://fr.wikipedia.org/wiki/Commission_d%27enrichissement_de_la_langue_fran%C3%A7aise">Commission d&amp;rsquo;enrichissement de la langue française&lt;/a>, 2018)&lt;/p>
&lt;/blockquote>
&lt;hr>
&lt;h2 id="how-do-machines-learn">How Do Machines Learn?&lt;/h2>
&lt;hr>
&lt;h3 id="machine-learning-in-a-nutshell">Machine Learning in a nutshell&lt;/h3>
&lt;p>Set of techniques for giving machines the ability to find &lt;strong>patterns&lt;/strong> and extract &lt;strong>rules&lt;/strong> from data, in order to:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Identify&lt;/strong> or &lt;strong>classify&lt;/strong> elements.&lt;/li>
&lt;li>Detect &lt;strong>tendencies&lt;/strong>.&lt;/li>
&lt;li>Make &lt;strong>predictions&lt;/strong>.&lt;/li>
&lt;/ul>
&lt;p>As more data is fed into the system, results get better: performance improves with experience.&lt;/p>
&lt;p>a.k.a. &lt;strong>Statistical Learning&lt;/strong>.&lt;/p>
&lt;hr>
&lt;p>&lt;img src="images/ai_ml_dl.png" alt="AI/ML/DL Venn diagram">&lt;/p>
&lt;hr>
&lt;p>&lt;img src="images/machine_learning_tree.png" alt="ML category tree">&lt;/p>
&lt;hr>
&lt;h3 id="a-new-paradigm">A new paradigm&lt;/h3>
&lt;p>&lt;img src="images/programming_paradigm.png" alt="Programming paradigm">&lt;/p>
&lt;p>&lt;img src="images/training_paradigm.png" alt="Training paradigm">&lt;/p>
&lt;hr>
&lt;h3 id="the-machine-learning-workflow">The Machine Learning workflow&lt;/h3>
&lt;ol>
&lt;li>&lt;strong>Frame&lt;/strong> the problem.&lt;/li>
&lt;li>Collect, analyze and prepare &lt;strong>data&lt;/strong>.&lt;/li>
&lt;li>Select and train several &lt;strong>models&lt;/strong> on data.&lt;/li>
&lt;li>&lt;strong>Tune&lt;/strong> the most promising model.&lt;/li>
&lt;li>&lt;strong>Deploy&lt;/strong> the model to production.&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h3 id="ml-is-not-a-silver-bullet">ML is not a silver bullet!&lt;/h3>
&lt;ul>
&lt;li>Some use cases are a better fit for ML than others:
&lt;ul>
&lt;li>Difficulty to express the actions as rules.&lt;/li>
&lt;li>Data too complex for traditional analytical methods.&lt;/li>
&lt;li>Performance &amp;gt; interpretability.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Data quality is paramount.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="algorithm-1-k-nearest-neighbors">Algorithm #1: K-Nearest Neighbors&lt;/h3>
&lt;p>Prediction is based on the &lt;code>k&lt;/code> nearest neighbors of a data sample.&lt;/p>
&lt;p>&lt;a href="https://en.wikipedia.org/wiki/K-nearest_neighbors_algorithm">&lt;img src="images/knn.png" alt="K-NN">&lt;/a>&lt;/p>
&lt;hr>
&lt;h3 id="algorithm-2-decision-trees">Algorithm #2: Decision Trees&lt;/h3>
&lt;p>Build a tree-like structure based on a series of discovered questions on the data.&lt;/p>
&lt;p>&lt;img src="images/dt_iris.png" alt="Decision Tree for Iris dataset">&lt;/p>
&lt;hr>
&lt;h3 id="algorithm-3-neural-networks">Algorithm #3: Neural Networks&lt;/h3>
&lt;ul>
&lt;li>Layers of loosely neuron-inpired computation units.&lt;/li>
&lt;li>Can approximate any continuous function.&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="images/neuron_output.png" alt="Neuron output">&lt;/p>
&lt;hr>
&lt;p>&lt;img src="images/neural_net.gif" alt="Dog or Cat?">&lt;/p>
&lt;hr>
&lt;h3 id="training-a-network">Training a network&lt;/h3>
&lt;p>&lt;img src="images/training_inference1.png" alt="Training and inference">&lt;/p>
&lt;hr>
&lt;h3 id="the-deep-learning-tsunami">The Deep Learning tsunami&lt;/h3>
&lt;ul>
&lt;li>Multilayered neural networks trained on (generally) vast amounts of data.&lt;/li>
&lt;/ul>
&lt;p>&lt;a href="https://papers.nips.cc/paper/4824-imagenet-classification-with-deep-convolutional-neural-networks.pdf">&lt;img src="images/alexnet.png" alt="AlexNet'12 (simplified)">&lt;/a>&lt;/p>
&lt;ul>
&lt;li>Since 2010, outperformed previous state-of-the-art techniques in many fields (language translation, image and scene recognition&amp;hellip;).&lt;/li>
&lt;/ul>
&lt;hr>
&lt;p>&lt;img src="images/big_data_universe.png" alt="Big data universe">&lt;/p>
&lt;hr>
&lt;p>&lt;img src="images/infographic2-intel-past-present.gif" alt="Computer power sheet">&lt;/p>
&lt;hr>
&lt;h3 id="from-labs-to-everyday-life">From labs to everyday life&lt;/h3>
&lt;p>&lt;a href="http://yann.lecun.com/exdb/lenet/">&lt;img src="images/lecun_lenet.gif" alt="LeCun - LeNet">&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://twitter.com/mbrennanchina/status/1203687857849716736">&lt;img src="images/china_school_facial_reco.gif" alt="Facial recognition in Chinese elementary school">&lt;/a>&lt;/p>
&lt;hr>
&lt;h3 id="should-we-be-scared-of-ai">Should We Be Scared Of AI?&lt;/h3>
&lt;hr>
&lt;h3 id="ai-is-altering-the-job-market">AI is altering the job market&amp;hellip;&lt;/h3>
&lt;ul>
&lt;li>Machines outperform humans in a growing list of cognitive tasks.&lt;/li>
&lt;li>Repetitive tasks are most exposed (even complex ones, like medical diagnosis or financial analysis).&lt;/li>
&lt;li>Entire industries are on the verge of disruption (example: truck-based transportation, first employer in the U.S.).&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="-for-better-or-worse">&amp;hellip; For better or worse&lt;/h3>
&lt;ul>
&lt;li>Net impact of AI on job quantity is unknown.&lt;/li>
&lt;li>Most jobs will be &lt;strong>transformed&lt;/strong>, not replaced by AI.
&lt;ul>
&lt;li>Boring and repetitive stuff will be automated.&lt;/li>
&lt;li>AI will add new insight to help human decision.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Human/machine interactions will multiply.&lt;/li>
&lt;li>Their quality will be a key factor of performance for organizations.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="real-or-fake">Real or fake?&lt;/h3>
&lt;p>&lt;a href="https://twitter.com/goodfellow_ian/status/1084973596236144640">&lt;img src="images/gan_2014_2018.jpg" alt="GAN progress from 2014 to 2018">&lt;/a>&lt;/p>
&lt;hr>
&lt;h3 id="agi-is-very-far-away">AGI is very far away&lt;/h3>
&lt;ul>
&lt;li>Current AI systems are &lt;strong>weak&lt;/strong>: highly tuned to perform well in one task.&lt;/li>
&lt;li>&lt;strong>Artificial General Intelligence&lt;/strong> a.k.a. &lt;strong>strong AI&lt;/strong>, the ability to perform any task as well as a human, is out of reach.&lt;/li>
&lt;/ul>
&lt;p>&lt;a href="https://twitter.com/ylecun/status/1204013978210320384">&lt;img src="images/ylecun_tweet_agi.png" alt="Y. LeCun tweet on AGI, Déc. 2019">&lt;/a>&lt;/p>
&lt;hr>
&lt;h3 id="the-intelligence-debate">The intelligence debate&lt;/h3>
&lt;ul>
&lt;li>Despite their complexity, ML and DL algorithms can be viewed as merely &lt;a href="https://diginomica.com/ai-curve-fitting-not-intelligence">curve fitting&lt;/a>.&lt;/li>
&lt;li>On the contrary, some AI researchers envision DL as a new form of &lt;strong>algorithmic reasoning&lt;/strong>, somehow mimicking the human brain.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="the-human-brain-is-a-masterpiece">The human brain is a masterpiece&lt;/h3>
&lt;ul>
&lt;li>Approx. 86 billions neurons in 1.4 kg.&lt;/li>
&lt;li>Typical energy consumption: 20 W (!)&lt;/li>
&lt;li>So much of it is still unknown.&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="images/human_brain.jpg" alt="The human brain">&lt;/p>
&lt;hr>
&lt;h3 id="babies-are-outstanding-learners">Babies are outstanding learners&lt;/h3>
&lt;p>&lt;a href="http://www.lscp.net/persons/dupoux/">&lt;img src="images/conceptual_acquisition_infants.png" alt="Conceptuals acquisitions by babies">&lt;/a>&lt;/p>
&lt;hr>
&lt;h3 id="any-questions">Any questions?&lt;/h3>
&lt;p>&lt;img src="images/cutest_baby_ever.png" alt="The cutest baby ever">&lt;/p></description></item><item><title>Unity</title><link>https://www.bpesquet.fr/slides/unity/</link><pubDate>Sat, 25 Aug 2018 16:13:52 +0200</pubDate><guid>https://www.bpesquet.fr/slides/unity/</guid><description>&lt;h2 id="sommaire">Sommaire&lt;/h2>
&lt;ul>
&lt;li>Unity en bref&lt;/li>
&lt;li>Concepts-clés&lt;/li>
&lt;li>Versionnage d&amp;rsquo;un projet&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="unity-en-bref">Unity en bref&lt;/h2>
&lt;hr>
&lt;p>&lt;img src="images/Unity_Technologies_Logo.svg.png" alt="Logo Unity">&lt;/p>
&lt;ul>
&lt;li>Moteur de jeu développé par &lt;a href="https://en.wikipedia.org/wiki/Unity_Technologies">Unity Technologies&lt;/a> depuis 2004.&lt;/li>
&lt;li>Multiplateformes : PC, Mac, consoles, smartphones, web.&lt;/li>
&lt;li>&lt;a href="https://store.unity.com/fr/products/unity-personal">Licence personnelle&lt;/a> gratuite.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="made-with-unity">Made with Unity&lt;/h2>
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
&lt;iframe src="https://www.youtube.com/embed/ctNF6QlLBWo" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video">&lt;/iframe>
&lt;/div>
&lt;hr>
&lt;p>&lt;img src="images/Editor-Breakdown.jpg" alt="Unity editor 1">&lt;/p>
&lt;hr>
&lt;p>&lt;img src="images/unity-editor.png" alt="Unity editor 2">&lt;/p>
&lt;hr>
&lt;p>&lt;img src="images/keep-calm-it-is-demo-time.png" alt="Demo time">&lt;/p>
&lt;hr>
&lt;h2 id="concepts-clés">Concepts-clés&lt;/h2>
&lt;hr>
&lt;h2 id="project">Project&lt;/h2>
&lt;ul>
&lt;li>Rassemble tous les éléments constituant le jeu.&lt;/li>
&lt;li>Peut être de type 2D ou 3D.&lt;/li>
&lt;li>Correspond physiquement à un répertoire stocké localement ou dans le &lt;em>cloud&lt;/em>.&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="images/AssetWorkflowFolderAndProjectWindow.png" alt="Fenêtre Project">&lt;/p>
&lt;hr>
&lt;section data-shortcode-section>
&lt;h2 id="asset">Asset&lt;/h2>
&lt;ul>
&lt;li>Ressource utilisable dans un projet.&lt;/li>
&lt;li>Nombreux types possibles : image, modèle 3D, texture, fichier audio, script, etc.&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="images/AssetWorkflowImportingFiles.png" alt="Import d&amp;rsquo;un Asset">&lt;/p>
&lt;hr>
&lt;h2 id="packages">Packages&lt;/h2>
&lt;ul>
&lt;li>Plusieurs Assets peuvent être regroupés dans un &lt;strong>package&lt;/strong>.&lt;/li>
&lt;li>Unity est livré avec une collections d'&lt;strong>Assets standards&lt;/strong> : formes de base, gestion de la caméra, des entrées utilisateur, etc.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="asset-store">Asset Store&lt;/h2>
&lt;ul>
&lt;li>Magasin en ligne proposant de nombreux Assets gratuits ou payants.&lt;/li>
&lt;li>Permet d&amp;rsquo;importer des packages dans un projet.&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="images/AssetStore-download.png" alt="Asset Store">&lt;/p>
&lt;/section>
&lt;hr>
&lt;h2 id="scene">Scene&lt;/h2>
&lt;ul>
&lt;li>Correspond à une partie du jeu (un niveau).&lt;/li>
&lt;li>Sauvegardées parmi les Assets.&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="images/NewEmptyScene.png" alt="Nouvelle scène">&lt;/p>
&lt;hr>
&lt;section data-shortcode-section>
&lt;h2 id="gameobject">GameObject&lt;/h2>
&lt;ul>
&lt;li>Objet qui représente un élément d&amp;rsquo;une scène.&lt;/li>
&lt;li>Constitué d&amp;rsquo;un ensemble de &lt;strong>composants&lt;/strong>.&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="images/GameObjectsExamples.png" alt="Exemples de GameObjects">&lt;/p>
&lt;hr>
&lt;h3 id="hiérarchie-des-gameobjects">Hiérarchie des GameObjects&lt;/h3>
&lt;ul>
&lt;li>Création de hiérarchies parent/enfants à plusieurs niveaux en regroupant des GameObjects.&lt;/li>
&lt;li>Permet de refléter des relations de &lt;strong>dépendance&lt;/strong> ou de &lt;strong>composition&lt;/strong> entre objets.&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="images/HierarchyParenting1.png" alt="Hiérarchie des GO">&lt;/p>
&lt;/section>
&lt;hr>
&lt;section data-shortcode-section>
&lt;h2 id="composant">Composant&lt;/h2>
&lt;p>Ajoute un comportement à un GameObject.&lt;/p>
&lt;p>&lt;img src="images/RigidBodyGO.png" alt="Exemples de composants">&lt;/p>
&lt;hr>
&lt;h2 id="le-composant-transform">Le composant Transform&lt;/h2>
&lt;p>Définit la position, la rotation et l&amp;rsquo;échelle d&amp;rsquo;un GameObject.&lt;/p>
&lt;p>&lt;img src="images/TransformExample2.png" alt="Transform 1">&lt;/p>
&lt;hr>
&lt;h2 id="transform-et-hiérarchie">Transform et hiérarchie&lt;/h2>
&lt;ul>
&lt;li>Position, rotation et échelle d&amp;rsquo;un GameObject sont relatives à son parent dans la hiérarchie.&lt;/li>
&lt;li>Les valeurs de Transform sont relatives à celles du GameObject parent (&lt;strong>coordonnées locales&lt;/strong>) ou absolues en l&amp;rsquo;absence de parent (&lt;strong>coordonnées globales&lt;/strong>).&lt;/li>
&lt;/ul>
&lt;/section>
&lt;hr>
&lt;section data-shortcode-section>
&lt;h2 id="mesh">Mesh&lt;/h2>
&lt;p>Maillage géométrique d&amp;rsquo;une forme 3D.&lt;/p>
&lt;p>&lt;img src="images/mesh.png" alt="Mesh">&lt;/p>
&lt;hr>
&lt;h2 id="mesh-renderer">Mesh renderer&lt;/h2>
&lt;p>Composant assurant le rendu d&amp;rsquo;un Mesh à la position définie par le composant Transform du GameObject.&lt;/p>
&lt;p>&lt;img src="images/class-MeshRenderer-0.png" alt="Mesh renderer">&lt;/p>
&lt;/section>
&lt;hr>
&lt;h2 id="rigidbody">RigidBody&lt;/h2>
&lt;p>Composant permettant à un GameObject de réagir selon les lois de la physique :&lt;/p>
&lt;ul>
&lt;li>Gestion de la masse, de la gravité, etc.&lt;/li>
&lt;li>Application de forces.&lt;/li>
&lt;li>Réaction aux collisions.&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="images/Inspector-Rigidbody.png" alt="RigidBody">&lt;/p>
&lt;hr>
&lt;section data-shortcode-section>
&lt;h2 id="collider">Collider&lt;/h2>
&lt;p>Composant définissant la forme d&amp;rsquo;un GameObject pour la gestion des collisions :&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Primitive Collider&lt;/strong> : formes géométriques de base (cube, sphère, cylindre, etc).&lt;/li>
&lt;li>&lt;strong>Mesh Collider&lt;/strong> : forme spécifique définie par un Mesh. Plus coûteux en temps de calcul.&lt;/li>
&lt;/ul>
&lt;p>Par défaut, des GameObjects possédant un Collider ne peuvent pas se chevaucher.&lt;/p>
&lt;hr>
&lt;h2 id="rigidbody-collider">RigidBody Collider&lt;/h2>
&lt;p>GameObject possédant un Collider et un RigidBody.&lt;/p>
&lt;ul>
&lt;li>Soumis aux lois de la physique.&lt;/li>
&lt;li>Déclenche des collisions avec les autres (non-Trigger) Colliders.&lt;/li>
&lt;li>Doit être déplacé en lui appliquand des forces.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="static-collider">Static Collider&lt;/h2>
&lt;p>GameObject possédant un Collider mais pas de RigidBody.&lt;/p>
&lt;ul>
&lt;li>Déclenche des collisions avec les RigidBody Colliders, mais ne bouge pas.&lt;/li>
&lt;li>Ne doit pas être déplacé.&lt;/li>
&lt;li>Destiné aux éléments immobiles de la scène (murs, obstacles, etc).&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="kinematic-rigidbody-collider">Kinematic RigidBody Collider&lt;/h2>
&lt;p>GameObject possédant un Collider et un RigidBody défini comme Kinematic.&lt;/p>
&lt;ul>
&lt;li>N&amp;rsquo;est pas soumis aux lois de la physique.&lt;/li>
&lt;li>Déclenche des collisions avec les RigidBody Colliders, mais ne bouge pas.&lt;/li>
&lt;li>Peut être déplacé en modifiant son Transform.&lt;/li>
&lt;li>Destiné aux éléments animés du décor (portes, objets à récupérer, etc).&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="trigger-collider">Trigger Collider&lt;/h2>
&lt;p>GameObject dont le Collider est défini comme Trigger.&lt;/p>
&lt;p>&lt;img src="images/is-trigger-check-box.jpg" alt="IsTrigger">&lt;/p>
&lt;ul>
&lt;li>Autorise le chevauchement sans déclencher de collision.&lt;/li>
&lt;li>Permet de définir une &lt;strong>zone&lt;/strong> et de réagir lorsque des RigidBody Colliders y pénètrent.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;p>&lt;a href="https://docs.unity3d.com/Manual/CollidersOverview.html">&lt;img src="images/UnityCollisionMatrix.png" alt="Collision Matrix">&lt;/a>&lt;/p>
&lt;/section>
&lt;hr>
&lt;h2 id="prefab">Prefab&lt;/h2>
&lt;ul>
&lt;li>Type d&amp;rsquo;Asset permettant d&amp;rsquo;instancier des GameObjects à partir d&amp;rsquo;un modèle commun.&lt;/li>
&lt;li>Changements d&amp;rsquo;un Prefab appliqués à toutes ses instances.&lt;/li>
&lt;li>Une instance de Prefab peut aussi être modifiée individuellement.&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="images/PrefabWithOverride.png" alt="Prefab">&lt;/p>
&lt;hr>
&lt;h2 id="light">Light&lt;/h2>
&lt;p>Type de GameObject permettant d&amp;rsquo;ajouter une source de lumière à la scène.&lt;/p>
&lt;p>&lt;img src="images/Light-Spot.png" alt="Lights">&lt;/p>
&lt;hr>
&lt;h2 id="camera">Camera&lt;/h2>
&lt;p>Type de GameObject qui calcule la vue de la scène affichée au joueur.&lt;/p>
&lt;p>&lt;img src="images/CameraPerspectiveAndOrtho.jpg" alt="Différentes caméras">&lt;/p>
&lt;hr>
&lt;section data-shortcode-section>
&lt;h2 id="script">Script&lt;/h2>
&lt;ul>
&lt;li>Type d&amp;rsquo;Asset permettant de coder le comportement d&amp;rsquo;un GameObject en langage C# ou UnityScript.&lt;/li>
&lt;li>Doit faire partie des composants du GameObject.&lt;/li>
&lt;li>Peut accéder aux propriétés du GameObject définies par ses autres composants.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="anatomie-dun-script">Anatomie d&amp;rsquo;un script&lt;/h2>
&lt;div class="highlight">&lt;pre style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// ... (directives using)
&lt;/span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>
&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// MonoBehaviour : superclasse de tous les scripts Unity
&lt;/span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>&lt;span style="color:#fb660a;font-weight:bold">public&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">class&lt;/span> MainPlayer : MonoBehaviour {
&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Appelée juste avant le rendu de la première image
&lt;/span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">void&lt;/span> Start() { ... }
&lt;pre>&lt;code>&amp;lt;span style=&amp;quot;color:#080;background-color:#0f140f;font-style:italic&amp;quot;&amp;gt;// Appelée à chaque nouvelle image
&lt;/code>&lt;/pre>
&lt;p>&lt;/span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// L'intervalle de temps entre deux appels peut varier
&lt;/span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">void&lt;/span> Update() { &amp;hellip; }&lt;/p>
&lt;pre>&lt;code>&amp;lt;span style=&amp;quot;color:#080;background-color:#0f140f;font-style:italic&amp;quot;&amp;gt;// Appelée à intervalles réguliers (0.02s par défaut)
&lt;/code>&lt;/pre>
&lt;p>&lt;/span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">void&lt;/span> FixedUpdate() { &amp;hellip; }
}
&lt;/code>&lt;/pre>&lt;/div>&lt;hr>&lt;/p>
&lt;h2 id="déplacements-scriptés">Déplacements scriptés&lt;/h2>
&lt;p>&lt;a href="https://unity3d.com/fr/learn/tutorials/topics/scripting/delta-time">&lt;img src="images/time.deltatime.gif" alt="Time.deltaTtime">&lt;/a>&lt;/p>
&lt;/section>
&lt;hr>
&lt;h2 id="versionnage-dun-projet">Versionnage d&amp;rsquo;un projet&lt;/h2>
&lt;hr>
&lt;h2 id="le-problème">Le problème&lt;/h2>
&lt;ul>
&lt;li>Taille de certains Assets.&lt;/li>
&lt;li>Nombreux fichiers binaires dans un projet : modèles 3D, images, sons, etc.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="les-solutions">Les solutions&lt;/h2>
&lt;ul>
&lt;li>Partage manuel (disque commun, Drive, etc).&lt;/li>
&lt;li>Dépôt Git standard.&lt;/li>
&lt;li>Git LFS.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;section data-shortcode-section>
&lt;h2 id="git-large-file-system">Git Large File System&lt;/h2>
&lt;p>&lt;a href="https://git-lfs.github.com">&lt;img src="images/git-lfs.gif" alt="Git LFS">&lt;/a>&lt;/p>
&lt;hr>
&lt;h2 id="fichier-gitattributes">Fichier .gitattributes&lt;/h2>
&lt;div class="highlight">&lt;pre style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">* &lt;span style="color:#fb660a">text&lt;/span>=auto
&lt;p>&lt;span style="color:#080;background-color:#0f140f;font-style:italic"># Unity files&lt;/span>
*.meta -text -merge=unityamlmerge
*.unity -text -merge=unityamlmerge
*.asset -text -merge=unityamlmerge
*.prefab -text -merge=unityamlmerge&lt;/p>
&lt;p>&lt;span style="color:#080;background-color:#0f140f;font-style:italic"># Image formats&lt;/span>
*.psd &lt;span style="color:#fb660a">filter&lt;/span>=lfs &lt;span style="color:#fb660a">diff&lt;/span>=lfs &lt;span style="color:#fb660a">merge&lt;/span>=lfs -text
*.jpg &lt;span style="color:#fb660a">filter&lt;/span>=lfs &lt;span style="color:#fb660a">diff&lt;/span>=lfs &lt;span style="color:#fb660a">merge&lt;/span>=lfs -text
*.png &lt;span style="color:#fb660a">filter&lt;/span>=lfs &lt;span style="color:#fb660a">diff&lt;/span>=lfs &lt;span style="color:#fb660a">merge&lt;/span>=lfs -text
*.gif &lt;span style="color:#fb660a">filter&lt;/span>=lfs &lt;span style="color:#fb660a">diff&lt;/span>=lfs &lt;span style="color:#fb660a">merge&lt;/span>=lfs -text
*.bmp &lt;span style="color:#fb660a">filter&lt;/span>=lfs &lt;span style="color:#fb660a">diff&lt;/span>=lfs &lt;span style="color:#fb660a">merge&lt;/span>=lfs -text
*.tga &lt;span style="color:#fb660a">filter&lt;/span>=lfs &lt;span style="color:#fb660a">diff&lt;/span>=lfs &lt;span style="color:#fb660a">merge&lt;/span>=lfs -text
*.tiff &lt;span style="color:#fb660a">filter&lt;/span>=lfs &lt;span style="color:#fb660a">diff&lt;/span>=lfs &lt;span style="color:#fb660a">merge&lt;/span>=lfs -text
*.iff &lt;span style="color:#fb660a">filter&lt;/span>=lfs &lt;span style="color:#fb660a">diff&lt;/span>=lfs &lt;span style="color:#fb660a">merge&lt;/span>=lfs -text
*.pict &lt;span style="color:#fb660a">filter&lt;/span>=lfs &lt;span style="color:#fb660a">diff&lt;/span>=lfs &lt;span style="color:#fb660a">merge&lt;/span>=lfs -text
*.dds &lt;span style="color:#fb660a">filter&lt;/span>=lfs &lt;span style="color:#fb660a">diff&lt;/span>=lfs &lt;span style="color:#fb660a">merge&lt;/span>=lfs -text
*.xcf &lt;span style="color:#fb660a">filter&lt;/span>=lfs &lt;span style="color:#fb660a">diff&lt;/span>=lfs &lt;span style="color:#fb660a">merge&lt;/span>=lfs -text&lt;/p>
&lt;p>&lt;span style="color:#080;background-color:#0f140f;font-style:italic"># Audio formats&lt;/span>
*.mp3 &lt;span style="color:#fb660a">filter&lt;/span>=lfs &lt;span style="color:#fb660a">diff&lt;/span>=lfs &lt;span style="color:#fb660a">merge&lt;/span>=lfs -text
*.ogg &lt;span style="color:#fb660a">filter&lt;/span>=lfs &lt;span style="color:#fb660a">diff&lt;/span>=lfs &lt;span style="color:#fb660a">merge&lt;/span>=lfs -text
*.wav &lt;span style="color:#fb660a">filter&lt;/span>=lfs &lt;span style="color:#fb660a">diff&lt;/span>=lfs &lt;span style="color:#fb660a">merge&lt;/span>=lfs -text
*.aiff &lt;span style="color:#fb660a">filter&lt;/span>=lfs &lt;span style="color:#fb660a">diff&lt;/span>=lfs &lt;span style="color:#fb660a">merge&lt;/span>=lfs -text
*.aif &lt;span style="color:#fb660a">filter&lt;/span>=lfs &lt;span style="color:#fb660a">diff&lt;/span>=lfs &lt;span style="color:#fb660a">merge&lt;/span>=lfs -text
*.mod &lt;span style="color:#fb660a">filter&lt;/span>=lfs &lt;span style="color:#fb660a">diff&lt;/span>=lfs &lt;span style="color:#fb660a">merge&lt;/span>=lfs -text
*.it &lt;span style="color:#fb660a">filter&lt;/span>=lfs &lt;span style="color:#fb660a">diff&lt;/span>=lfs &lt;span style="color:#fb660a">merge&lt;/span>=lfs -text
*.s3m &lt;span style="color:#fb660a">filter&lt;/span>=lfs &lt;span style="color:#fb660a">diff&lt;/span>=lfs &lt;span style="color:#fb660a">merge&lt;/span>=lfs -text
*.xm &lt;span style="color:#fb660a">filter&lt;/span>=lfs &lt;span style="color:#fb660a">diff&lt;/span>=lfs &lt;span style="color:#fb660a">merge&lt;/span>=lfs -text&lt;/p>
&lt;p>&lt;span style="color:#080;background-color:#0f140f;font-style:italic"># Video formats&lt;/span>
*.mov &lt;span style="color:#fb660a">filter&lt;/span>=lfs &lt;span style="color:#fb660a">diff&lt;/span>=lfs &lt;span style="color:#fb660a">merge&lt;/span>=lfs -text
*.avi &lt;span style="color:#fb660a">filter&lt;/span>=lfs &lt;span style="color:#fb660a">diff&lt;/span>=lfs &lt;span style="color:#fb660a">merge&lt;/span>=lfs -text
*.asf &lt;span style="color:#fb660a">filter&lt;/span>=lfs &lt;span style="color:#fb660a">diff&lt;/span>=lfs &lt;span style="color:#fb660a">merge&lt;/span>=lfs -text
*.mpg &lt;span style="color:#fb660a">filter&lt;/span>=lfs &lt;span style="color:#fb660a">diff&lt;/span>=lfs &lt;span style="color:#fb660a">merge&lt;/span>=lfs -text
*.mpeg &lt;span style="color:#fb660a">filter&lt;/span>=lfs &lt;span style="color:#fb660a">diff&lt;/span>=lfs &lt;span style="color:#fb660a">merge&lt;/span>=lfs -text
*.mp4 &lt;span style="color:#fb660a">filter&lt;/span>=lfs &lt;span style="color:#fb660a">diff&lt;/span>=lfs &lt;span style="color:#fb660a">merge&lt;/span>=lfs -text&lt;/p>
&lt;p>&lt;span style="color:#080;background-color:#0f140f;font-style:italic"># 3D formats&lt;/span>
*.fbx &lt;span style="color:#fb660a">filter&lt;/span>=lfs &lt;span style="color:#fb660a">diff&lt;/span>=lfs &lt;span style="color:#fb660a">merge&lt;/span>=lfs -text
*.obj &lt;span style="color:#fb660a">filter&lt;/span>=lfs &lt;span style="color:#fb660a">diff&lt;/span>=lfs &lt;span style="color:#fb660a">merge&lt;/span>=lfs -text
*.max &lt;span style="color:#fb660a">filter&lt;/span>=lfs &lt;span style="color:#fb660a">diff&lt;/span>=lfs &lt;span style="color:#fb660a">merge&lt;/span>=lfs -text
*.blend &lt;span style="color:#fb660a">filter&lt;/span>=lfs &lt;span style="color:#fb660a">diff&lt;/span>=lfs &lt;span style="color:#fb660a">merge&lt;/span>=lfs -text
*.dae &lt;span style="color:#fb660a">filter&lt;/span>=lfs &lt;span style="color:#fb660a">diff&lt;/span>=lfs &lt;span style="color:#fb660a">merge&lt;/span>=lfs -text
*.mb &lt;span style="color:#fb660a">filter&lt;/span>=lfs &lt;span style="color:#fb660a">diff&lt;/span>=lfs &lt;span style="color:#fb660a">merge&lt;/span>=lfs -text
*.ma &lt;span style="color:#fb660a">filter&lt;/span>=lfs &lt;span style="color:#fb660a">diff&lt;/span>=lfs &lt;span style="color:#fb660a">merge&lt;/span>=lfs -text
*.3ds &lt;span style="color:#fb660a">filter&lt;/span>=lfs &lt;span style="color:#fb660a">diff&lt;/span>=lfs &lt;span style="color:#fb660a">merge&lt;/span>=lfs -text
*.dfx &lt;span style="color:#fb660a">filter&lt;/span>=lfs &lt;span style="color:#fb660a">diff&lt;/span>=lfs &lt;span style="color:#fb660a">merge&lt;/span>=lfs -text
*.c4d &lt;span style="color:#fb660a">filter&lt;/span>=lfs &lt;span style="color:#fb660a">diff&lt;/span>=lfs &lt;span style="color:#fb660a">merge&lt;/span>=lfs -text
*.lwo &lt;span style="color:#fb660a">filter&lt;/span>=lfs &lt;span style="color:#fb660a">diff&lt;/span>=lfs &lt;span style="color:#fb660a">merge&lt;/span>=lfs -text
*.lwo2 &lt;span style="color:#fb660a">filter&lt;/span>=lfs &lt;span style="color:#fb660a">diff&lt;/span>=lfs &lt;span style="color:#fb660a">merge&lt;/span>=lfs -text
*.abc &lt;span style="color:#fb660a">filter&lt;/span>=lfs &lt;span style="color:#fb660a">diff&lt;/span>=lfs &lt;span style="color:#fb660a">merge&lt;/span>=lfs -text
*.3dm &lt;span style="color:#fb660a">filter&lt;/span>=lfs &lt;span style="color:#fb660a">diff&lt;/span>=lfs &lt;span style="color:#fb660a">merge&lt;/span>=lfs -text&lt;/p>
&lt;p>&lt;span style="color:#080;background-color:#0f140f;font-style:italic"># Build&lt;/span>
*.dll &lt;span style="color:#fb660a">filter&lt;/span>=lfs &lt;span style="color:#fb660a">diff&lt;/span>=lfs &lt;span style="color:#fb660a">merge&lt;/span>=lfs -text
*.pdb &lt;span style="color:#fb660a">filter&lt;/span>=lfs &lt;span style="color:#fb660a">diff&lt;/span>=lfs &lt;span style="color:#fb660a">merge&lt;/span>=lfs -text
*.mdb &lt;span style="color:#fb660a">filter&lt;/span>=lfs &lt;span style="color:#fb660a">diff&lt;/span>=lfs &lt;span style="color:#fb660a">merge&lt;/span>=lfs -text&lt;/p>
&lt;p>&lt;span style="color:#080;background-color:#0f140f;font-style:italic"># Packaging&lt;/span>
*.zip &lt;span style="color:#fb660a">filter&lt;/span>=lfs &lt;span style="color:#fb660a">diff&lt;/span>=lfs &lt;span style="color:#fb660a">merge&lt;/span>=lfs -text
*.7z &lt;span style="color:#fb660a">filter&lt;/span>=lfs &lt;span style="color:#fb660a">diff&lt;/span>=lfs &lt;span style="color:#fb660a">merge&lt;/span>=lfs -text
*.gz &lt;span style="color:#fb660a">filter&lt;/span>=lfs &lt;span style="color:#fb660a">diff&lt;/span>=lfs &lt;span style="color:#fb660a">merge&lt;/span>=lfs -text
*.rar &lt;span style="color:#fb660a">filter&lt;/span>=lfs &lt;span style="color:#fb660a">diff&lt;/span>=lfs &lt;span style="color:#fb660a">merge&lt;/span>=lfs -text
*.tar &lt;span style="color:#fb660a">filter&lt;/span>=lfs &lt;span style="color:#fb660a">diff&lt;/span>=lfs &lt;span style="color:#fb660a">merge&lt;/span>=lfs -text&lt;/p>
&lt;p>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;a href="https://gist.github.com/bpesquet/4e28b431b673addef1774d497b614b33">Source&lt;/a>&lt;/p>&lt;/p>
&lt;hr>
&lt;h2 id="github-for-unity">GitHub For Unity&lt;/h2>
&lt;p>&lt;a href="https://unity.github.com/">https://unity.github.com/&lt;/a>&lt;/p>
&lt;ul>
&lt;li>Extension qui intègre Git et GitHub dans Unity.&lt;/li>
&lt;li>Authentification GitHub, LFS, etc.&lt;/li>
&lt;li>Version 1.0 : encore instable.&lt;/li>
&lt;/ul>
&lt;/section></description></item></channel></rss>