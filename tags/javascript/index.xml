<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>javascript on Baptiste Pesquet</title><link>https://www.bpesquet.fr/tags/javascript/</link><description>Baptiste Pesquet (javascript)</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Wed, 02 Feb 2022 11:09:39 +0100</lastBuildDate><atom:link href="https://www.bpesquet.fr/tags/javascript/index.xml" rel="self" type="application/rss+xml"/><item><title>JavaScript pour le web</title><link>https://www.bpesquet.fr/slides/javascript-web/</link><pubDate>Wed, 02 Feb 2022 11:09:39 +0100</pubDate><guid>https://www.bpesquet.fr/slides/javascript-web/</guid><description>&lt;h2 id="sommaire" >Sommaire
&lt;span>
&lt;a href="#sommaire">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;ul>
&lt;li>Le DOM&lt;/li>
&lt;li>Navigation dans le DOM&lt;/li>
&lt;li>Modification de la structure&lt;/li>
&lt;li>Gestion des évènements&lt;/li>
&lt;li>Manipulation des formulaires&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="le-dom" >Le DOM
&lt;span>
&lt;a href="#le-dom">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;hr>
&lt;h3 id="exemple-de-page-web" >Exemple de page web
&lt;span>
&lt;a href="#exemple-de-page-web">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-html" data-lang="html">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff0007;background-color:#0f140f;font-weight:bold;font-style:italic">&amp;lt;!DOCTYPE html&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;&lt;span style="color:#fb660a;font-weight:bold">html&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">head&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">meta&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">charset&lt;/span>=&lt;span style="color:#0086d2">&amp;#34;utf-8&amp;#34;&lt;/span> /&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">title&lt;/span>&amp;gt;My web page&amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">title&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">head&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">body&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">h1&lt;/span>&amp;gt;My web page&amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">h1&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">p&lt;/span>&amp;gt;Hello! My name&amp;#39;s Baptiste.&amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">p&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">p&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> I live in the great city of
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">a&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">href&lt;/span>=&lt;span style="color:#0086d2">&amp;#34;https://en.wikipedia.org/wiki/Bordeaux&amp;#34;&lt;/span>&amp;gt;Bordeaux&amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">a&lt;/span>&amp;gt;.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">p&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">body&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">html&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="le-document-object-model-dom" >Le Document Object Model (DOM)
&lt;span>
&lt;a href="#le-document-object-model-dom">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;p>Description de la structure d&amp;rsquo;une page sous forme d&amp;rsquo;une arborescence de &lt;strong>noeuds&lt;/strong>.&lt;/p>
&lt;p>&lt;img src="images/chapter13-02.png" alt="DOM example">&lt;/p>
&lt;hr>
&lt;h3 id="types-de-noeuds" >Types de noeuds
&lt;span>
&lt;a href="#types-de-noeuds">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;ul>
&lt;li>&lt;strong>Eléments&lt;/strong> : noeuds structurants pouvant contenir des fils. Correspondent aux balises HTML comme &lt;code>&amp;lt;body&amp;gt;&lt;/code>, &lt;code>&amp;lt;p&amp;gt;&lt;/code>, etc.&lt;/li>
&lt;li>&lt;strong>Texte&lt;/strong> : noeuds contenant uniquement du texte.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="accès-au-dom-avec-javascript" >Accès au DOM avec JavaScript
&lt;span>
&lt;a href="#acc%c3%a8s-au-dom-avec-javascript">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;p>Quand le code JavaScript s&amp;rsquo;exécute dans le contexte d&amp;rsquo;une page web, la variable &lt;code>document&lt;/code> permet d&amp;rsquo;accéder à la racine du DOM.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> h = document.head; &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Accès à l&amp;#39;en-tête de la page
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> b = document.body; &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Accès au corps de la page
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>La propriété &lt;code>nodeType&lt;/code> permet de récupérer le type d&amp;rsquo;un noeud.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">if&lt;/span> (document.body.nodeType === document.ELEMENT_NODE)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h2 id="navigation-dans-le-dom" >Navigation dans le DOM
&lt;span>
&lt;a href="#navigation-dans-le-dom">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;hr>
&lt;h3 id="enfants-et-parent-dun-noeud" >Enfants et parent d&amp;rsquo;un noeud
&lt;span>
&lt;a href="#enfants-et-parent-dun-noeud">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;p>La propriété &lt;code>childNodes&lt;/code> permet d&amp;rsquo;accéder aux enfants d&amp;rsquo;un noeud du DOM sous la forme d&amp;rsquo;une collection ordonnée.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Affiche les noeuds fils du corps de la page
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>document.body.childNodes.forEach((node) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> console.log(node);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>});
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>A l&amp;rsquo;inverse, la propriété &lt;code>parentNode&lt;/code> permet de remonter au noeud parent.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>document.body.childNodes[&lt;span style="color:#0086f7;font-weight:bold">1&lt;/span>].parentNode; &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Accès au noeud &amp;lt;body&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="sélection-par-type-de-balise" >Sélection par type de balise
&lt;span>
&lt;a href="#s%c3%a9lection-par-type-de-balise">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;p>La méthode &lt;code>getElementsByTagName()&lt;/code> renvoie la liste des noeuds correspond à une balise HTML.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Liste des noeuds h2
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> titleElements = document.getElementsByTagName(&lt;span style="color:#0086d2">&amp;#34;h2&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="sélection-par-classe" >Sélection par classe
&lt;span>
&lt;a href="#s%c3%a9lection-par-classe">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;p>La méthode &lt;code>getElementsByClassName()&lt;/code> renvoie la liste des noeuds possédant une certaine classe CSS.&lt;/p>
&lt;p>Comme toutes les méthodes de sélection, elle renvoie une liste de noeuds qui doit être convertie en tableau (par exemple avec &lt;code>Array.from()&lt;/code>) avant de pouvoir être parcourue.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> existingElements = Array.from(document.getElementsByClassName(&lt;span style="color:#0086d2">&amp;#34;exists&amp;#34;&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>existingElements.forEach((element) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> console.log(element);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>});
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="sélection-par-identifiant" >Sélection par identifiant
&lt;span>
&lt;a href="#s%c3%a9lection-par-identifiant">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;p>La méthode &lt;code>getElementById()&lt;/code> renvoie le noeud possédant l&amp;rsquo;identifiant CSS spécifié, ou &lt;code>null&lt;/code> si aucun noeud n&amp;rsquo;est trouvé.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Affiche le noeud identifié par &amp;#34;new&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>console.log(document.getElementById(&lt;span style="color:#0086d2">&amp;#34;new&amp;#34;&lt;/span>));
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="sélection-par-sélecteur-css" >Sélection par sélecteur CSS
&lt;span>
&lt;a href="#s%c3%a9lection-par-s%c3%a9lecteur-css">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;p>Les méthodes &lt;code>querySelectorAll()&lt;/code> et &lt;code>querySelector()&lt;/code> permettent de rechercher des éléments en utilisant un &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors">sélecteur CSS&lt;/a>. La première renvoie une liste, la seconde le premier noeud résultat.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Tous les noeuds paragraphes
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>document.querySelectorAll(&lt;span style="color:#0086d2">&amp;#34;p&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Tous les noeuds paragraphes descendants du noeud identifié par &amp;#34;content&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>document.querySelectorAll(&lt;span style="color:#0086d2">&amp;#34;#content p&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Tous les noeuds de classe &amp;#34;exists&amp;#34; fils du noeud identifié par &amp;#34;ancient&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>document.querySelectorAll(&lt;span style="color:#0086d2">&amp;#34;#ancient &amp;gt; .exists&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Le premier noeud paragraphe
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>document.querySelector(&lt;span style="color:#0086d2">&amp;#34;p&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="méthodes-de-sélection" >Méthodes de sélection
&lt;span>
&lt;a href="#m%c3%a9thodes-de-s%c3%a9lection">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Noeuds cibles&lt;/th>
&lt;th>Méthode&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Plusieurs, par balise HTML&lt;/td>
&lt;td>&lt;code>getElementsByTagName()&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Plusieurs, par classe&lt;/td>
&lt;td>&lt;code>getElementsByClassName()&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Plusieurs&lt;/td>
&lt;td>&lt;code>querySelectorAll()&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Un seul, par identifiant&lt;/td>
&lt;td>&lt;code>getElementById()&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Le premier&lt;/td>
&lt;td>&lt;code>querySelector()&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;hr>
&lt;h3 id="contenu-dun-noeud" >Contenu d&amp;rsquo;un noeud
&lt;span>
&lt;a href="#contenu-dun-noeud">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;p>La propriété &lt;code>innerHTML&lt;/code> renvoie le contenu HTML d&amp;rsquo;un noeud du DOM sous forme d&amp;rsquo;une chaîne de caractères.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>document.getElementById(&lt;span style="color:#0086d2">&amp;#34;content&amp;#34;&lt;/span>).innerHTML;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>La propriété &lt;code>textContent&lt;/code> renvoie le contenu textuel d&amp;rsquo;un noeud du DOM (sans les balises HTML) sous forme d&amp;rsquo;une chaîne de caractères.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>document.getElementById(&lt;span style="color:#0086d2">&amp;#34;content&amp;#34;&lt;/span>).textContent;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="attributs-dun-noeud" >Attributs d&amp;rsquo;un noeud
&lt;span>
&lt;a href="#attributs-dun-noeud">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;p>Les méthodes &lt;code>getAttribute()&lt;/code> et &lt;code>hasAttribute()&lt;/code> permettent de consulter les attributs d&amp;rsquo;un noeud du DOM.&lt;/p>
&lt;p>Certains attributs comme &lt;code>id&lt;/code>, &lt;code>href&lt;/code> ou &lt;code>value&lt;/code> peuvent être accédés directement.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>document.querySelector(&lt;span style="color:#0086d2">&amp;#34;a&amp;#34;&lt;/span>).getAttribute(&lt;span style="color:#0086d2">&amp;#34;href&amp;#34;&lt;/span>); &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Cible du premier noeud &amp;lt;a&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>document.querySelector(&lt;span style="color:#0086d2">&amp;#34;a&amp;#34;&lt;/span>).href; &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Idem
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>document.querySelector(&lt;span style="color:#0086d2">&amp;#34;ul&amp;#34;&lt;/span>).id; &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Identifiant du premier noeud &amp;lt;a&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">if&lt;/span> (document.querySelector(&lt;span style="color:#0086d2">&amp;#34;a&amp;#34;&lt;/span>).hasAttribute(&lt;span style="color:#0086d2">&amp;#34;target&amp;#34;&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">//...
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="classes-dun-noeud" >Classes d&amp;rsquo;un noeud
&lt;span>
&lt;a href="#classes-dun-noeud">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;p>La propriété &lt;code>classList&lt;/code> permet d&amp;rsquo;accéder à la liste des classes CSS d&amp;rsquo;un noeud.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Liste des classes du noeud identifié par &amp;#34;ancient&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> classes = document.getElementById(&lt;span style="color:#0086d2">&amp;#34;ancient&amp;#34;&lt;/span>).classList
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>console.log(classes.length); &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Nombre de classes
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">if&lt;/span> (document.getElementById(&lt;span style="color:#0086d2">&amp;#34;ancient&amp;#34;&lt;/span>).classList.contains(&lt;span style="color:#0086d2">&amp;#34;wonders&amp;#34;&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h2 id="modification-de-la-structure" >Modification de la structure
&lt;span>
&lt;a href="#modification-de-la-structure">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;hr>
&lt;h3 id="modification-dun-noeud" >Modification d&amp;rsquo;un noeud
&lt;span>
&lt;a href="#modification-dun-noeud">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;p>Les propriétés &lt;code>innerHTML&lt;/code>, &lt;code>textContent&lt;/code> et &lt;code>classList&lt;/code> ainsi que la méthode &lt;code>setAttribute()&lt;/code> peuvent permettre de mettre à jour un noeud existant.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">/// Suppression du contenu (y compris les éventuels fils)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>document.getElementById(&lt;span style="color:#0086d2">&amp;#34;languages&amp;#34;&lt;/span>).innerHTML = &lt;span style="color:#0086d2">&amp;#34;&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Ajout d&amp;#39;une chaîne au texte
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>document.querySelector(&lt;span style="color:#0086d2">&amp;#34;h3&amp;#34;&lt;/span>).textContent += &lt;span style="color:#0086d2">&amp;#34; and sons&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> titleElement = document.querySelector(&lt;span style="color:#0086d2">&amp;#34;h3&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>titleElement.classList.remove(&lt;span style="color:#0086d2">&amp;#34;beginning&amp;#34;&lt;/span>); &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Suppression d&amp;#39;une classe
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>titleElement.classList.add(&lt;span style="color:#0086d2">&amp;#34;title&amp;#34;&lt;/span>); &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Ajout d&amp;#39;une classe
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Mise à jour de l&amp;#39;identifiant (deux solutions possibles)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>document.querySelector(&lt;span style="color:#0086d2">&amp;#34;h3&amp;#34;&lt;/span>).setAttribute(&lt;span style="color:#0086d2">&amp;#34;id&amp;#34;&lt;/span>, &lt;span style="color:#0086d2">&amp;#34;title&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>document.querySelector(&lt;span style="color:#0086d2">&amp;#34;h3&amp;#34;&lt;/span>).id = &lt;span style="color:#0086d2">&amp;#34;title&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;section data-shortcode-section>
&lt;h3 id="ajout-dun-nouveau-noeud" >Ajout d&amp;rsquo;un nouveau noeud
&lt;span>
&lt;a href="#ajout-dun-nouveau-noeud">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;p>Il s&amp;rsquo;effectue en 3 étapes :&lt;/p>
&lt;ol>
&lt;li>Création du nouveau noeud&lt;/li>
&lt;li>Définition de ses attributs&lt;/li>
&lt;li>Insertion du noeud dans le DOM&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> pythonElement = document.createElement(&lt;span style="color:#0086d2">&amp;#34;li&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pythonElement.id = &lt;span style="color:#0086d2">&amp;#34;python&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pythonElement.textContent = &lt;span style="color:#0086d2">&amp;#34;Python&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>document.getElementById(&lt;span style="color:#0086d2">&amp;#34;languages&amp;#34;&lt;/span>).appendChild(pythonElement);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="création-du-noeud" >Création du noeud
&lt;span>
&lt;a href="#cr%c3%a9ation-du-noeud">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;p>La méthode &lt;code>createElement()&lt;/code> prend en paramètre un type de balise HTML et renvoie un noeud.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Création d&amp;#39;un noeud élément de liste
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> pythonElement = document.createElement(&lt;span style="color:#0086d2">&amp;#34;li&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="définition-des-attributs-du-noeud" >Définition des attributs du noeud
&lt;span>
&lt;a href="#d%c3%a9finition-des-attributs-du-noeud">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;p>Les propriétés permettant de modifier un noeud (&lt;code>textContent&lt;/code>, &lt;code>classList&lt;/code>, etc) permettent de définir les valeurs des attributs du noeud créé.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>pythonElement.id = &lt;span style="color:#0086d2">&amp;#34;python&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pythonElement.textContent = &lt;span style="color:#0086d2">&amp;#34;Python&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="insertion-du-noeud-dans-le-dom" >Insertion du noeud dans le DOM
&lt;span>
&lt;a href="#insertion-du-noeud-dans-le-dom">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;p>La solution la plus courante est d&amp;rsquo;utiliser la méthode &lt;code>appendChild()&lt;/code> sur un noeud existant. Elle ajoute le nouveau noeud à la fin de la liste de ses fils.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>document.getElementById(&lt;span style="color:#0086d2">&amp;#34;languages&amp;#34;&lt;/span>).appendChild(pythonElement);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>On peut également utiliser &lt;code>insertBefore()&lt;/code> pour ajouter le nouveau noeud avant un noeud fils spécifié.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>document
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .getElementById(&lt;span style="color:#0086d2">&amp;#34;languages&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .insertBefore(pythonElement, document.getElementById(&lt;span style="color:#0086d2">&amp;#34;php&amp;#34;&lt;/span>));
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/section>
&lt;hr>
&lt;h3 id="remplacement-ou-suppression-dun-noeud" >Remplacement ou suppression d&amp;rsquo;un noeud
&lt;span>
&lt;a href="#remplacement-ou-suppression-dun-noeud">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;p>La méthode &lt;code>replaceChild()&lt;/code> permet de remplacer un noeud par un autre.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>document
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .getElementById(&lt;span style="color:#0086d2">&amp;#34;languages&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .replaceChild(pythonElement, document.getElementById(&lt;span style="color:#0086d2">&amp;#34;perl&amp;#34;&lt;/span>));
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>La méthode &lt;code>removeChild()&lt;/code> permet de supprimer un noeud existant.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>document
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .getElementById(&lt;span style="color:#0086d2">&amp;#34;languages&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .removeChild(document.getElementById(&lt;span style="color:#0086d2">&amp;#34;lisp&amp;#34;&lt;/span>));
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="gestion-du-style" >Gestion du style
&lt;span>
&lt;a href="#gestion-du-style">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;p>La propriété &lt;code>style&lt;/code> permet d&amp;rsquo;accéder à l&amp;rsquo;attribut &lt;code>style&lt;/code> du noeud, composé de propriétés CSS (&lt;code>color&lt;/code>, &lt;code>fontFamily&lt;/code>, etc) qu&amp;rsquo;il est possible d&amp;rsquo;exploiter.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> paragraphElement = document.querySelector(&lt;span style="color:#0086d2">&amp;#34;p&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>paragraphElement.style.color = &lt;span style="color:#0086d2">&amp;#34;red&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>paragraphElement.style.fontFamily = &lt;span style="color:#0086d2">&amp;#34;Arial&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>paragraphElement.style.backgroundColor = &lt;span style="color:#0086d2">&amp;#34;black&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>En cas d&amp;rsquo;utilisation d&amp;rsquo;une feuile de style CSS, il faut utiliser la fonction &lt;code>getComputedStyle()&lt;/code> pour accéder à l&amp;rsquo;intégralité des styles d&amp;rsquo;un noeud.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> paragraphStyle = getComputedStyle(document.getElementById(&lt;span style="color:#0086d2">&amp;#34;para&amp;#34;&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>console.log(paragraphStyle.fontStyle);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>console.log(paragraphStyle.color);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h2 id="gestion-des-évènements" >Gestion des évènements
&lt;span>
&lt;a href="#gestion-des-%c3%a9v%c3%a8nements">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;hr>
&lt;h3 id="principe-de-fonctionnement" >Principe de fonctionnement
&lt;span>
&lt;a href="#principe-de-fonctionnement">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;p>Un &lt;strong>gestionnaire d&amp;rsquo;évènement&lt;/strong> est une fonction JavaScript qui va d&amp;rsquo;exécuter lorsqu&amp;rsquo;un évènement apparaît : clic sur un bouton, soumission d&amp;rsquo;un formulaire, survol d&amp;rsquo;une zone avec la souris, etc.&lt;/p>
&lt;p>L&amp;rsquo;ajout de gestionnaires d&amp;rsquo;évènement va améliorer l&amp;rsquo;interactivité de la page web.&lt;/p>
&lt;p>Cette manière d&amp;rsquo;écrire du code est appelée &lt;strong>programmation évènementielle&lt;/strong> : l&amp;rsquo;ordre d&amp;rsquo;exécution des instructions n&amp;rsquo;est plus prédéfini, mais dépend des actions de l&amp;rsquo;utilisateur.&lt;/p>
&lt;hr>
&lt;h3 id="exemple-de-gestionnaire-dévènement" >Exemple de gestionnaire d&amp;rsquo;évènement
&lt;span>
&lt;a href="#exemple-de-gestionnaire-d%c3%a9v%c3%a8nement">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;p>L&amp;rsquo;évènement intercepté est passé en paramètre de la fonction gestionnaire sous la forme d&amp;rsquo;un objet souvent nommé &lt;code>e&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-html" data-lang="html">&lt;span style="display:flex;">&lt;span>&amp;lt;&lt;span style="color:#fb660a;font-weight:bold">button&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">id&lt;/span>=&lt;span style="color:#0086d2">&amp;#34;myButton&amp;#34;&lt;/span>&amp;gt;Cliquez-moi !&amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">button&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> showMessage = (e) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> console.log(&lt;span style="color:#0086d2">`Type d&amp;#39;évènement : &lt;/span>&lt;span style="color:#0086d2">${&lt;/span>e.type&lt;span style="color:#0086d2">}&lt;/span>&lt;span style="color:#0086d2">, cible: &lt;/span>&lt;span style="color:#0086d2">${&lt;/span>e.target&lt;span style="color:#0086d2">}&lt;/span>&lt;span style="color:#0086d2">`&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Affiche une pop-up
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> alert(&lt;span style="color:#0086d2">&amp;#34;Hello!&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Accès au bouton
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> buttonElement = document.getElementById(&lt;span style="color:#0086d2">&amp;#34;myButton&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Gestion du clic via la fonction showMessage()
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>buttonElement.addEventListener(&lt;span style="color:#0086d2">&amp;#34;click&amp;#34;&lt;/span>, showMessage);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="evènements-utilisables" >Evènements utilisables
&lt;span>
&lt;a href="#ev%c3%a8nements-utilisables">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;p>JavaScript permet d&amp;rsquo;exploiter de nombreux évènements sur la page : &lt;code>click&lt;/code>, &lt;code>keypress&lt;/code>, &lt;code>mousedown&lt;/code>, &lt;code>load&lt;/code>, etc.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>document.addEventListener(&lt;span style="color:#0086d2">&amp;#34;keypress&amp;#34;&lt;/span>, (e) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> console.log(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#0086d2">`Vous avez appuyé sur la touche &lt;/span>&lt;span style="color:#0086d2">${&lt;/span>String.fromCharCode(e.charCode)&lt;span style="color:#0086d2">}&lt;/span>&lt;span style="color:#0086d2">`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> );
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>});
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// &amp;#34;window&amp;#34; représente la fenêtre du navigateur affichant la page
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>window.addEventListener(&lt;span style="color:#0086d2">&amp;#34;load&amp;#34;&lt;/span>, (e) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> console.log(&lt;span style="color:#0086d2">&amp;#34;Page web chargée !&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>});
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Affiche un message de confirmation de fermeture
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>window.addEventListener(&lt;span style="color:#0086d2">&amp;#34;beforeunload&amp;#34;&lt;/span>, (e) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> message = &lt;span style="color:#0086d2">&amp;#34;Voulez-vous vraiment quitter ?&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> e.returnValue = message;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">return&lt;/span> message;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>});
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="propagation-des-évènements" >Propagation des évènements
&lt;span>
&lt;a href="#propagation-des-%c3%a9v%c3%a8nements">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;p>Un évènement qui apparaît au niveau d&amp;rsquo;un noeud se propage vers ses noeuds parents, jusqu&amp;rsquo;à arriver à la racine du DOM.&lt;/p>
&lt;p>Appelée sur un objet évènement, la méthode &lt;code>stopPropagation()&lt;/code> permet d&amp;rsquo;interrompre sa propagation.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>document.getElementById(&lt;span style="color:#0086d2">&amp;#34;propa&amp;#34;&lt;/span>).addEventListener(&lt;span style="color:#0086d2">&amp;#34;click&amp;#34;&lt;/span>, (e) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Interrompt la propagation de cet évènement
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> e.stopPropagation();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>});
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="comportement-par-défaut" >Comportement par défaut
&lt;span>
&lt;a href="#comportement-par-d%c3%a9faut">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;p>De nombreux évènements déclenchent des comportements par défaut : clic sur un lien web, clic droit sur la page, etc. Appelée sur un objet évènement, la méthode &lt;code>preventDefault()&lt;/code> annule ce comportement.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-html" data-lang="html">&lt;span style="display:flex;">&lt;span>&amp;lt;&lt;span style="color:#fb660a;font-weight:bold">p&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Du temps à perdre ? &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">a&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">id&lt;/span>=&lt;span style="color:#0086d2">&amp;#34;forbidden&amp;#34;&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">href&lt;/span>=&lt;span style="color:#0086d2">&amp;#34;https://9gag.com/&amp;#34;&lt;/span>&amp;gt;cliquez ici&amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">a&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">p&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>document.getElementById(&lt;span style="color:#0086d2">&amp;#34;forbidden&amp;#34;&lt;/span>).addEventListener(&lt;span style="color:#0086d2">&amp;#34;click&amp;#34;&lt;/span>, (e) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> alert(&lt;span style="color:#0086d2">&amp;#34;Pas une bonne idée&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Annule l&amp;#39;ouverture du lien
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> e.preventDefault();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>});
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h2 id="manipulation-des-formulaires" >Manipulation des formulaires
&lt;span>
&lt;a href="#manipulation-des-formulaires">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;hr>
&lt;h3 id="exemple-de-formulaire" >Exemple de formulaire
&lt;span>
&lt;a href="#exemple-de-formulaire">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-html" data-lang="html">&lt;span style="display:flex;">&lt;span>&amp;lt;&lt;span style="color:#fb660a;font-weight:bold">form&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">h1&lt;/span>&amp;gt;Formulaire d&amp;#39;inscription&amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">h1&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">p&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">label&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">for&lt;/span>=&lt;span style="color:#0086d2">&amp;#34;username&amp;#34;&lt;/span>&amp;gt;Nom d&amp;#39;utilisateur&amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">label&lt;/span>&amp;gt;:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">input&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">type&lt;/span>=&lt;span style="color:#0086d2">&amp;#34;text&amp;#34;&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">name&lt;/span>=&lt;span style="color:#0086d2">&amp;#34;username&amp;#34;&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">id&lt;/span>=&lt;span style="color:#0086d2">&amp;#34;username&amp;#34;&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">required&lt;/span> /&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">span&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">id&lt;/span>=&lt;span style="color:#0086d2">&amp;#34;usernameHelp&amp;#34;&lt;/span>&amp;gt;&amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">span&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">p&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">p&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">label&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">for&lt;/span>=&lt;span style="color:#0086d2">&amp;#34;password&amp;#34;&lt;/span>&amp;gt;Mot de passe&amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">label&lt;/span>&amp;gt;:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">input&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">type&lt;/span>=&lt;span style="color:#0086d2">&amp;#34;password&amp;#34;&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">name&lt;/span>=&lt;span style="color:#0086d2">&amp;#34;password&amp;#34;&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">id&lt;/span>=&lt;span style="color:#0086d2">&amp;#34;password&amp;#34;&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">required&lt;/span> /&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">span&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">id&lt;/span>=&lt;span style="color:#0086d2">&amp;#34;passwordHelp&amp;#34;&lt;/span>&amp;gt;&amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">span&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">p&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">p&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">label&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">for&lt;/span>=&lt;span style="color:#0086d2">&amp;#34;nationality&amp;#34;&lt;/span>&amp;gt;Nationalité&amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">label&lt;/span>&amp;gt;:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">select&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">name&lt;/span>=&lt;span style="color:#0086d2">&amp;#34;nationality&amp;#34;&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">id&lt;/span>=&lt;span style="color:#0086d2">&amp;#34;nationality&amp;#34;&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">option&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">value&lt;/span>=&lt;span style="color:#0086d2">&amp;#34;US&amp;#34;&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">selected&lt;/span>&amp;gt;Américaine&amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">option&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">option&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">value&lt;/span>=&lt;span style="color:#0086d2">&amp;#34;FR&amp;#34;&lt;/span>&amp;gt;Française&amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">option&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">option&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">value&lt;/span>=&lt;span style="color:#0086d2">&amp;#34;ES&amp;#34;&lt;/span>&amp;gt;Espagnole&amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">option&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">option&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">value&lt;/span>=&lt;span style="color:#0086d2">&amp;#34;XX&amp;#34;&lt;/span>&amp;gt;Autre&amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">option&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">select&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">p&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">input&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">type&lt;/span>=&lt;span style="color:#0086d2">&amp;#34;submit&amp;#34;&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">value&lt;/span>=&lt;span style="color:#0086d2">&amp;#34;Envoyer&amp;#34;&lt;/span> /&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">input&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">type&lt;/span>=&lt;span style="color:#0086d2">&amp;#34;reset&amp;#34;&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">value&lt;/span>=&lt;span style="color:#0086d2">&amp;#34;Annuler&amp;#34;&lt;/span> /&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">form&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="gestion-du-focus" >Gestion du focus
&lt;span>
&lt;a href="#gestion-du-focus">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;p>Les évènements &lt;code>focus&lt;/code> et &lt;code>blur&lt;/code> permettent d&amp;rsquo;ajouter du comportement lorsqu&amp;rsquo;un champ du formulaire reçoit ou perd le focus.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> usernameElement = document.getElementById(&lt;span style="color:#0086d2">&amp;#34;username&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Ajoute le texte d&amp;#39;aide quand le champ reçoit le focus
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>usernameElement.addEventListener(&lt;span style="color:#0086d2">&amp;#34;focus&amp;#34;&lt;/span>, (e) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> document.getElementById(&lt;span style="color:#0086d2">&amp;#34;usernameHelp&amp;#34;&lt;/span>).textContent =
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#0086d2">&amp;#34;Ajoutez votre nom d&amp;#39;utilisateur&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>});
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Vide la zone d&amp;#39;aide quand le champ perd le focus
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>usernameElement.addEventListener(&lt;span style="color:#0086d2">&amp;#34;blur&amp;#34;&lt;/span>, (e) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> document.getElementById(&lt;span style="color:#0086d2">&amp;#34;usernameHelp&amp;#34;&lt;/span>).textContent = &lt;span style="color:#0086d2">&amp;#34;&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>});
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="choix-dans-une-liste-déroulante" >Choix dans une liste déroulante
&lt;span>
&lt;a href="#choix-dans-une-liste-d%c3%a9roulante">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;p>L&amp;rsquo;évènement &lt;code>change&lt;/code> sur une liste déroulante permet de gérer le changement de sélection par l&amp;rsquo;utilisateur.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>document.getElementById(&lt;span style="color:#0086d2">&amp;#34;nationality&amp;#34;&lt;/span>).addEventListener(&lt;span style="color:#0086d2">&amp;#34;change&amp;#34;&lt;/span>, (e) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> console.log(&lt;span style="color:#0086d2">&amp;#34;Code de nationalité : &amp;#34;&lt;/span> + e.target.value);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>});
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Les boutions radio et les cases à cocher fonctionnent sur le même principe.&lt;/p>
&lt;hr>
&lt;h3 id="validation-pendant-la-saisie" >Validation pendant la saisie
&lt;span>
&lt;a href="#validation-pendant-la-saisie">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;p>L&amp;rsquo;évènement &lt;code>input&lt;/code> permet de déclencher l&amp;rsquo;exécution de code à chaque modification du texte saisi dans un champ.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Affiche un texte d&amp;#39;aide qui dépend de la longueur du mot de passe saisi
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>document.getElementById(&lt;span style="color:#0086d2">&amp;#34;password&amp;#34;&lt;/span>).addEventListener(&lt;span style="color:#0086d2">&amp;#34;input&amp;#34;&lt;/span>, (e) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> password = e.target.value; &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Texte saisi dans le champ
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">let&lt;/span> helpText = &lt;span style="color:#0086d2">&amp;#34;Trop court&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">let&lt;/span> messageColor = &lt;span style="color:#0086d2">&amp;#34;red&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">if&lt;/span> (password.length &amp;gt;= &lt;span style="color:#0086f7;font-weight:bold">8&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> helpText = &lt;span style="color:#0086d2">&amp;#34;OK&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> messageColor = &lt;span style="color:#0086d2">&amp;#34;green&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> passwordHelpElement = document.getElementById(&lt;span style="color:#0086d2">&amp;#34;passwordHelp&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> passwordHelpElement.textContent = helpText;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> passwordHelpElement.style.color = messageColor;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>});
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="validation-après-soumission" >Validation après soumission
&lt;span>
&lt;a href="#validation-apr%c3%a8s-soumission">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;p>Le noeud correspond à un formulaire dispose d&amp;rsquo;une propriété &lt;code>elements&lt;/code> qui permet d&amp;rsquo;accéder aux champs par leur nom.&lt;/p>
&lt;p>La gestion de l&amp;rsquo;évènement &lt;code>submit&lt;/code> permet de réagir à la soumission du formulaire par l&amp;rsquo;utilisateur.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>document.querySelector(&lt;span style="color:#0086d2">&amp;#34;form&amp;#34;&lt;/span>).addEventListener(&lt;span style="color:#0086d2">&amp;#34;submit&amp;#34;&lt;/span>, (e) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> e.preventDefault(); &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Annule l&amp;#39;envoi du formulaire au serveur web
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Récupération des informations saisies par l&amp;#39;utilisateur
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> username = e.target.elements.username.value;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> password = e.target.elements.password.value;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> nationalityCode = e.target.elements.nationality.value;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// ... (Vérification éventuelles)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>});
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>React Native</title><link>https://www.bpesquet.fr/slides/react-native/</link><pubDate>Wed, 27 Oct 2021 13:48:28 +0200</pubDate><guid>https://www.bpesquet.fr/slides/react-native/</guid><description>&lt;h2 id="sommaire" >Sommaire
&lt;span>
&lt;a href="#sommaire">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;ul>
&lt;li>Introduction&lt;/li>
&lt;li>Composants React Native&lt;/li>
&lt;li>Gestion de l&amp;rsquo;UI&lt;/li>
&lt;li>Gestion de l&amp;rsquo;état&lt;/li>
&lt;li>Applications multi-écrans&lt;/li>
&lt;li>Utilisation d&amp;rsquo;API web&lt;/li>
&lt;li>Persistance locale&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="introduction" >Introduction
&lt;span>
&lt;a href="#introduction">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;hr>
&lt;h3 id="lécosystème-mobile" >L&amp;rsquo;écosystème mobile
&lt;span>
&lt;a href="#l%c3%a9cosyst%c3%a8me-mobile">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;ul>
&lt;li>Absence de monopole.&lt;/li>
&lt;li>Deux poids lourds : Android et iOS.&lt;/li>
&lt;li>Parts de marché stables depuis plusieurs années.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;p>&lt;img src="images/smartphone_market_share_2016.jpg" alt="Smartphone platform market share">&lt;/p>
&lt;hr>
&lt;p>&lt;img src="images/market-share-2015_2019.png" alt="Market share evolution 2015-2019">&lt;/p>
&lt;hr>
&lt;p>&lt;img src="images/os-fragmentation_2018.jpg" alt="Mobile OS Fragmentation">&lt;/p>
&lt;hr>
&lt;section data-shortcode-section>
&lt;h3 id="développement-mobile-natif" >Développement mobile natif
&lt;span>
&lt;a href="#d%c3%a9veloppement-mobile-natif">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;p>Création d&amp;rsquo;applications en utilisant la technologie prévue par le concepteur de l&amp;rsquo;OS.&lt;/p>
&lt;ul>
&lt;li>Android : Java&lt;/li>
&lt;li>IOS : Objective-C ou Swift&lt;/li>
&lt;/ul>
&lt;p class='fragment '
>
Ces technologies sont &lt;strong>incompatibles&lt;/strong>.
&lt;/p>
&lt;hr>
&lt;h3 id="avantages" >Avantages
&lt;span>
&lt;a href="#avantages">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;ul>
&lt;li>Accès à l&amp;rsquo;intégralité des fonctionnalités matérielles et logicielles du terminal mobile.&lt;/li>
&lt;li>Performances optimales.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="inconvénient-majeur-" >Inconvénient (majeur !)
&lt;span>
&lt;a href="#inconv%c3%a9nient-majeur-">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;p>Nécessité de créer puis de faire évoluer une application pour chaque environnement.&lt;/p>
&lt;/section>
&lt;hr>
&lt;section data-shortcode-section>
&lt;h3 id="solutions-hybrides" >Solutions hybrides
&lt;span>
&lt;a href="#solutions-hybrides">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;p>Création d&amp;rsquo;applications mobiles compatibles avec plusieurs OS mobiles grâce à un framework dédié.&lt;/p>
&lt;p>Une application hybride est une application web qui s&amp;rsquo;exécute à l&amp;rsquo;intérieur d&amp;rsquo;un navigateur.&lt;/p>
&lt;p>Exemples : &lt;a href="https://cordova.apache.org">Apache Cordova&lt;/a>, &lt;a href="https://ionicframework.com">Ionic&lt;/a>&lt;/p>
&lt;hr>
&lt;h3 id="avantages" >Avantages
&lt;span>
&lt;a href="#avantages">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;ul>
&lt;li>Fonctionnalités et performances proches de celles d&amp;rsquo;une application native.&lt;/li>
&lt;li>Economies de ressources pour créer l&amp;rsquo;application.&lt;/li>
&lt;li>Une seule base de code : maintenance et évolution facilitées.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="inconvénients" >Inconvénients
&lt;span>
&lt;a href="#inconv%c3%a9nients">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;ul>
&lt;li>Impossible d&amp;rsquo;accéder à certaines fonctionnalités matérielles ou logicielles spécifiques.&lt;/li>
&lt;li>&lt;em>Look&amp;rsquo;n&amp;rsquo;feel&lt;/em> non natif.&lt;/li>
&lt;li>Mauvaises performances dans certains scenarii.&lt;/li>
&lt;/ul>
&lt;/section>
&lt;hr>
&lt;section data-shortcode-section>
&lt;h3 id="développement-natif-multi-plateformes" >Développement natif multi-plateformes
&lt;span>
&lt;a href="#d%c3%a9veloppement-natif-multi-plateformes">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;p>Création d&amp;rsquo;applications mobiles compatibles avec plusieurs OS mobiles grâce à un framework dédié.&lt;/p>
&lt;p>Le framework encapsule les véritables composants natifs de l&amp;rsquo;OS.&lt;/p>
&lt;p>Exemples : &lt;a href="https://facebook.github.io/react-native/">React Native&lt;/a>, &lt;a href="https://weexapp.com/">Weex&lt;/a>, &lt;a href="https://dotnet.microsoft.com/en-us/apps/xamarin">Xamarin&lt;/a>&lt;/p>
&lt;hr>
&lt;h3 id="le-meilleur-des-deux-mondes-" >Le meilleur des deux mondes ?
&lt;span>
&lt;a href="#le-meilleur-des-deux-mondes-">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;p>Combine les avantages du natif (&lt;em>look&amp;rsquo;n&amp;rsquo;feel&lt;/em>, performances) et de l&amp;rsquo;hybride (une seule base de code).&lt;/p>
&lt;p>Limite potentielle : le support de l&amp;rsquo;OS dépend entièrement du framework.&lt;/p>
&lt;/section>
&lt;hr>
&lt;h3 id="react-native" >React Native
&lt;span>
&lt;a href="#react-native">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;p>Framework créé par Facebook, open source depuis 2015.&lt;/p>
&lt;p>Déclinaison mobile du framework JavaScript &lt;a href="https://reactjs.org/">React&lt;/a>.&lt;/p>
&lt;p>&lt;a href="https://reactnative.dev/">&lt;img src="images/reactjs.png" alt="React logo">&lt;/a>&lt;/p>
&lt;hr>
&lt;h3 id="expo" >Expo
&lt;span>
&lt;a href="#expo">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;p>Framework pour faciliter la création et le déploiement d&amp;rsquo;applications React Native.&lt;/p>
&lt;p>&lt;a href="https://expo.dev/">&lt;img src="images/expo_logo.png" alt="Expo logo">&lt;/a>&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://docs.expo.dev/workflow/expo-cli/">Expo CLI&lt;/a> : outil en ligne de commande pour le développement local.&lt;/li>
&lt;li>&lt;a href="https://expo.dev/expo-go">Expo Go&lt;/a> : application mobile à installer sur le terminal cible pour le déploiement.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="création-dune-application" >Création d&amp;rsquo;une application
&lt;span>
&lt;a href="#cr%c3%a9ation-dune-application">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic"># Install expo-cli globally&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic"># (Node.js and Git are prerequisites)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>npm i -g expo-cli
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic"># Create a new app named &amp;#34;appname&amp;#34; in its own subfolder&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic"># Created files are automatically versioned into a Git repository&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic"># The optional -t flag is used to select an Expo app template&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic"># Run npx create-expo-app --template to see the list of available templates.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>npx create-expo-app &amp;lt;appname&amp;gt; -t &amp;lt;expo-template&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic"># Alternative: expo init &amp;lt;appname&amp;gt; -t &amp;lt;expo-template&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>
&lt;p>Workflow &lt;em>managé&lt;/em> : projet entièrement géré par Expo (plus simple).&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Workflow &lt;em>bare&lt;/em> : plus proche d&amp;rsquo;un projet React Native pur.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="déploiement-de-lapplication" >Déploiement de l&amp;rsquo;application
&lt;span>
&lt;a href="#d%c3%a9ploiement-de-lapplication">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>cd &amp;lt;appname&amp;gt; &lt;span style="color:#080;background-color:#0f140f;font-style:italic"># Move into project directory&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>npm start &lt;span style="color:#080;background-color:#0f140f;font-style:italic"># Or &amp;#39;expo start&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Ensuite, scan du QR Code depuis l&amp;rsquo;application Expo Go (Android) ou l&amp;rsquo;appareil photo du smartphone (iOS).&lt;/p>
&lt;p>&lt;img src="images/expo_qrcode.png" alt="Expo QR Code">&lt;/p>
&lt;hr>
&lt;h3 id="détails-sur-le-déploiement" >Détails sur le déploiement
&lt;span>
&lt;a href="#d%c3%a9tails-sur-le-d%c3%a9ploiement">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;ul>
&lt;li>L&amp;rsquo;application est hébergée sur un serveur web local.&lt;/li>
&lt;li>Expo s&amp;rsquo;y connecte pour la récupérer puis la lancer.&lt;/li>
&lt;li>Une interface web de gestion s&amp;rsquo;affiche.&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="images/expo_management.png" alt="Expo Management">&lt;/p>
&lt;hr>
&lt;h3 id="rechargement-dynamique" >Rechargement dynamique
&lt;span>
&lt;a href="#rechargement-dynamique">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;p>&lt;a href="https://openclassrooms.com/fr/courses/4902061-developpez-une-application-mobile-react-native/">&lt;img src="images/expo_reload.jpeg" alt="Live Reload">&lt;/a>&lt;/p>
&lt;hr>
&lt;h3 id="connexion-au-serveur-expo" >Connexion au serveur Expo
&lt;span>
&lt;a href="#connexion-au-serveur-expo">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;p>L&amp;rsquo;application mobile Expo Go doit accéder au serveur web de la machine de développement pour pouvoir lancer l&amp;rsquo;application RN.&lt;/p>
&lt;p>Il existe plusieurs modes de connexion :&lt;/p>
&lt;ul>
&lt;li>&lt;strong>LAN&lt;/strong> : utilisation du réseau Wifi local. Peut poser problème dans certains environnements Wifi sécurisés.&lt;/li>
&lt;li>&lt;strong>Tunnel&lt;/strong> : création d&amp;rsquo;un tunnel avec &lt;a href="https://ngrok.com/">ngrok&lt;/a> pour accéder au serveur local via le web. Nécessite que le terminal mobile dispose d&amp;rsquo;un accès internet.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="utilisation-dun-émulateur" >Utilisation d&amp;rsquo;un émulateur
&lt;span>
&lt;a href="#utilisation-dun-%c3%a9mulateur">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;ul>
&lt;li>Alternative à l&amp;rsquo;emploi d&amp;rsquo;un terminal mobile pour tester l&amp;rsquo;application RN.&lt;/li>
&lt;li>Nécessite l&amp;rsquo;installation de &lt;a href="https://developer.apple.com/xcode/">XCode (iOS)&lt;/a> ou &lt;a href="https://developer.android.com/studio">Android Studio&lt;/a> sur le machine de développement.&lt;/li>
&lt;li>Documentation : &lt;a href="https://docs.expo.io/workflow/ios-simulator/">iOS&lt;/a> | &lt;a href="https://docs.expo.io/workflow/android-studio-emulator/">Android&lt;/a>.&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="images/expo-emulator.png" alt="Expo emulator">&lt;/p>
&lt;hr>
&lt;h3 id="contenu-du-répertoire-créé" >Contenu du répertoire créé
&lt;span>
&lt;a href="#contenu-du-r%c3%a9pertoire-cr%c3%a9%c3%a9">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;p>&lt;img src="images/rn-app-structure.png" alt="Arborescence React Native">&lt;/p>
&lt;hr>
&lt;h3 id="le-fichier-de-configuration-appjson" >Le fichier de configuration app.json
&lt;span>
&lt;a href="#le-fichier-de-configuration-appjson">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">&amp;#34;expo&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">&amp;#34;name&amp;#34;&lt;/span>: &lt;span style="color:#0086d2">&amp;#34;HelloReactNative&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">&amp;#34;slug&amp;#34;&lt;/span>: &lt;span style="color:#0086d2">&amp;#34;HelloReactNative&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">&amp;#34;version&amp;#34;&lt;/span>: &lt;span style="color:#0086d2">&amp;#34;1.0.0&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">&amp;#34;orientation&amp;#34;&lt;/span>: &lt;span style="color:#0086d2">&amp;#34;portrait&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">&amp;#34;icon&amp;#34;&lt;/span>: &lt;span style="color:#0086d2">&amp;#34;./assets/icon.png&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">&amp;#34;userInterfaceStyle&amp;#34;&lt;/span>: &lt;span style="color:#0086d2">&amp;#34;light&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">&amp;#34;splash&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">&amp;#34;image&amp;#34;&lt;/span>: &lt;span style="color:#0086d2">&amp;#34;./assets/splash.png&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">&amp;#34;resizeMode&amp;#34;&lt;/span>: &lt;span style="color:#0086d2">&amp;#34;contain&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">&amp;#34;backgroundColor&amp;#34;&lt;/span>: &lt;span style="color:#0086d2">&amp;#34;#ffffff&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">&amp;#34;updates&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">&amp;#34;fallbackToCacheTimeout&amp;#34;&lt;/span>: &lt;span style="color:#0086f7;font-weight:bold">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">&amp;#34;assetBundlePatterns&amp;#34;&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#0086d2">&amp;#34;**/*&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">&amp;#34;ios&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">&amp;#34;supportsTablet&amp;#34;&lt;/span>: &lt;span style="color:#fb660a;font-weight:bold">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">&amp;#34;android&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">&amp;#34;adaptiveIcon&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">&amp;#34;foregroundImage&amp;#34;&lt;/span>: &lt;span style="color:#0086d2">&amp;#34;./assets/adaptive-icon.png&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">&amp;#34;backgroundColor&amp;#34;&lt;/span>: &lt;span style="color:#0086d2">&amp;#34;#FFFFFF&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">&amp;#34;web&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">&amp;#34;favicon&amp;#34;&lt;/span>: &lt;span style="color:#0086d2">&amp;#34;./assets/favicon.png&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="le-fichier-packagejson" >Le fichier package.json
&lt;span>
&lt;a href="#le-fichier-packagejson">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">&amp;#34;name&amp;#34;&lt;/span>: &lt;span style="color:#0086d2">&amp;#34;helloreactnative&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">&amp;#34;version&amp;#34;&lt;/span>: &lt;span style="color:#0086d2">&amp;#34;1.0.0&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">&amp;#34;main&amp;#34;&lt;/span>: &lt;span style="color:#0086d2">&amp;#34;node_modules/expo/AppEntry.js&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">&amp;#34;scripts&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">&amp;#34;start&amp;#34;&lt;/span>: &lt;span style="color:#0086d2">&amp;#34;expo start&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">&amp;#34;android&amp;#34;&lt;/span>: &lt;span style="color:#0086d2">&amp;#34;expo start --android&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">&amp;#34;ios&amp;#34;&lt;/span>: &lt;span style="color:#0086d2">&amp;#34;expo start --ios&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">&amp;#34;web&amp;#34;&lt;/span>: &lt;span style="color:#0086d2">&amp;#34;expo start --web&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">&amp;#34;dependencies&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">&amp;#34;expo&amp;#34;&lt;/span>: &lt;span style="color:#0086d2">&amp;#34;~47.0.9&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">&amp;#34;expo-status-bar&amp;#34;&lt;/span>: &lt;span style="color:#0086d2">&amp;#34;~1.4.2&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">&amp;#34;react&amp;#34;&lt;/span>: &lt;span style="color:#0086d2">&amp;#34;18.1.0&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">&amp;#34;react-native&amp;#34;&lt;/span>: &lt;span style="color:#0086d2">&amp;#34;0.70.5&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">&amp;#34;devDependencies&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">&amp;#34;@babel/core&amp;#34;&lt;/span>: &lt;span style="color:#0086d2">&amp;#34;^7.12.9&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">&amp;#34;private&amp;#34;&lt;/span>: &lt;span style="color:#fb660a;font-weight:bold">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="le-fichier-principal-appjs" >Le fichier principal App.js
&lt;span>
&lt;a href="#le-fichier-principal-appjs">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-jsx" data-lang="jsx">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> { StatusBar } from &lt;span style="color:#0086d2">&amp;#34;expo-status-bar&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> { StyleSheet, Text, View } from &lt;span style="color:#0086d2">&amp;#34;react-native&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">export&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">default&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">function&lt;/span> App() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">return&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">View&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">style&lt;/span>={styles.container}&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Text&lt;/span>&amp;gt;Open up App.js to start working on your app!&amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">Text&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">StatusBar&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">style&lt;/span>=&lt;span style="color:#0086d2">&amp;#34;auto&amp;#34;&lt;/span> /&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">View&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> );
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> styles = StyleSheet.create({
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> container: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> flex: &lt;span style="color:#0086f7;font-weight:bold">1&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> backgroundColor: &lt;span style="color:#0086d2">&amp;#34;#fff&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> alignItems: &lt;span style="color:#0086d2">&amp;#34;center&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> justifyContent: &lt;span style="color:#0086d2">&amp;#34;center&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>});
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="les-formats-jsx-et-tsx" >Les formats JSX et TSX
&lt;span>
&lt;a href="#les-formats-jsx-et-tsx">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;ul>
&lt;li>Syntaxe introduite pour le framework web &lt;a href="https://reactjs.org/">React&lt;/a>.&lt;/li>
&lt;li>Permet de décrire une UI en intégrant balisage et logique applicative.&lt;/li>
&lt;li>Les accolades &lt;code>{...}&lt;/code> permettent d&amp;rsquo;inclure du code JavaScript dans le code JSX (&lt;a href="https://beta.reactjs.org/learn/javascript-in-jsx-with-curly-braces">plus de détails&lt;/a>).&lt;/li>
&lt;li>TSX : équivalent de JSX pour TypeScript.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-jsx" data-lang="jsx">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// JSX for React (web)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> name = &lt;span style="color:#0086d2">&amp;#34;Clarisse Agbegnenou&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> element = &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">p&lt;/span>&amp;gt;Hello, {name}&amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">p&lt;/span>&amp;gt;;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-jsx" data-lang="jsx">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// JSX for React Native (mobile)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> name = &lt;span style="color:#0086d2">&amp;#34;Clarisse Agbegnenou&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> element = &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Text&lt;/span>&amp;gt;Hello, {name}&amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">Text&lt;/span>&amp;gt;;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h2 id="composants-react-native" >Composants React Native
&lt;span>
&lt;a href="#composants-react-native">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;hr>
&lt;h3 id="la-notion-de-composant" >La notion de composant
&lt;span>
&lt;a href="#la-notion-de-composant">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;ul>
&lt;li>
&lt;p>Les &lt;strong>composants&lt;/strong> sont les blocs de base d&amp;rsquo;une application React (Native).&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Ils permettent de créer une UI sous forme &lt;strong>déclarative&lt;/strong> par assemblage de composants inclus les uns dans les autres.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Ils doivent comporter une fonction qui définit leur rendu visuel.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Le fichier principal &lt;code>App.js&lt;/code> d&amp;rsquo;une application RN doit exporter un composant par défaut.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="composants-fonctions" >Composants fonctions
&lt;span>
&lt;a href="#composants-fonctions">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;ul>
&lt;li>La valeur de retour de la fonction définit leur rendu.&lt;/li>
&lt;li>Syntaxe standard, la plus concise.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-jsx" data-lang="jsx">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> React from &lt;span style="color:#0086d2">&amp;#39;react&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> { Text, View } from &lt;span style="color:#0086d2">&amp;#34;react-native&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// HelloWorldApp is a function component
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> HelloWorldApp = () =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">return&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">View&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff0086;font-weight:bold">style&lt;/span>={{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> flex: &lt;span style="color:#0086f7;font-weight:bold">1&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> justifyContent: &lt;span style="color:#0086d2">&amp;#34;center&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> alignItems: &lt;span style="color:#0086d2">&amp;#34;center&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Text&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">style&lt;/span>={{ fontSize: &lt;span style="color:#0086f7;font-weight:bold">24&lt;/span> }}&amp;gt;Hello from a &lt;span style="color:#fb660a;font-weight:bold">function&lt;/span> component!&amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">Text&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">View&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> );
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">export&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">default&lt;/span> HelloWorldApp;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="composants-classes" >Composants classes
&lt;span>
&lt;a href="#composants-classes">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;ul>
&lt;li>La méthode obligatoire &lt;code>render()&lt;/code> définit leur rendu.&lt;/li>
&lt;li>Syntaxe à privilégier pour les composants les plus complexes.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-jsx" data-lang="jsx">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> React, { Component } from &lt;span style="color:#0086d2">&amp;#34;react&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> { Text, View } from &lt;span style="color:#0086d2">&amp;#34;react-native&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// HelloWorldApp is a class component
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>&lt;span style="color:#fb660a;font-weight:bold">class&lt;/span> HelloWorldApp &lt;span style="color:#fb660a;font-weight:bold">extends&lt;/span> Component {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> render() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">return&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">View&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff0086;font-weight:bold">style&lt;/span>={{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> flex: &lt;span style="color:#0086f7;font-weight:bold">1&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> justifyContent: &lt;span style="color:#0086d2">&amp;#34;center&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> alignItems: &lt;span style="color:#0086d2">&amp;#34;center&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Text&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">style&lt;/span>={{ fontSize: &lt;span style="color:#0086f7;font-weight:bold">24&lt;/span> }}&amp;gt;Hello from a &lt;span style="color:#fb660a;font-weight:bold">class&lt;/span> component!&amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">Text&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">View&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> );
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">export&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">default&lt;/span> HelloWorldApp;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="composants-de-base" >Composants de base
&lt;span>
&lt;a href="#composants-de-base">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;p>Implémentés de manière native par RN sous Android et iOS afin d&amp;rsquo;obtenir un &lt;em>look&amp;rsquo;n&amp;rsquo;feel&lt;/em> et des performances optimaux.&lt;/p>
&lt;p>&lt;a href="https://reactnative.dev/docs/components-and-apis">&lt;img src="images/basic_components.png" alt="React Native core components">&lt;/a>&lt;/p>
&lt;hr>
&lt;h3 id="gestion-du-style" >Gestion du style
&lt;span>
&lt;a href="#gestion-du-style">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;ul>
&lt;li>Propriété &lt;code>style&lt;/code> disponible pour les composants de base.&lt;/li>
&lt;li>Semblable à CSS avec nommage &lt;em>camelCase&lt;/em>.&lt;/li>
&lt;li>En ligne ou externalisé sous forme d&amp;rsquo;un objet créé par la fonction &lt;code>StyleSheet.create&lt;/code>.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-jsx" data-lang="jsx">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> React from &lt;span style="color:#0086d2">&amp;#34;react&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> { StyleSheet, Text, View } from &lt;span style="color:#0086d2">&amp;#34;react-native&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">export&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">default&lt;/span> App = () =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">return&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">View&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">style&lt;/span>={styles.container}&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Text&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">style&lt;/span>={styles.red}&amp;gt;just red&amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">Text&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Text&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">style&lt;/span>={styles.bigblue}&amp;gt;just bigblue&amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">Text&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#080;background-color:#0f140f;font-style:italic">/* Using an array of styles: last element has precedence */&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Text&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">style&lt;/span>={[styles.bigblue, styles.red]}&amp;gt;bigblue, then red&amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">Text&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Text&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">style&lt;/span>={[styles.red, styles.bigblue]}&amp;gt;red, then bigblue&amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">Text&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">View&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> );
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> styles = StyleSheet.create({
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> container: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> flex: &lt;span style="color:#0086f7;font-weight:bold">1&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> alignItems: &lt;span style="color:#0086d2">&amp;#34;center&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> justifyContent: &lt;span style="color:#0086d2">&amp;#34;center&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> bigblue: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> color: &lt;span style="color:#0086d2">&amp;#34;blue&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> fontWeight: &lt;span style="color:#0086d2">&amp;#34;bold&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> fontSize: &lt;span style="color:#0086f7;font-weight:bold">30&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> red: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> color: &lt;span style="color:#0086d2">&amp;#34;red&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>});
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="composants-personnalisés" >Composants personnalisés
&lt;span>
&lt;a href="#composants-personnalis%c3%a9s">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;p>Ils permettent de créer une application par assemblage de composants élémentaires.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-jsx" data-lang="jsx">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> React from &lt;span style="color:#0086d2">&amp;#34;react&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> { StyleSheet, Text, View } from &lt;span style="color:#0086d2">&amp;#34;react-native&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> Cat = () =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">return&lt;/span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Text&lt;/span>&amp;gt;I am a cat!&amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">Text&lt;/span>&amp;gt;;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">export&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">default&lt;/span> App = () =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">return&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">View&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">style&lt;/span>={styles.container}&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Text&lt;/span>&amp;gt;Welcome!&amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">Text&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Cat&lt;/span> /&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Cat&lt;/span> /&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Cat&lt;/span> /&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">View&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> );
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> styles = StyleSheet.create({
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> container: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> flex: &lt;span style="color:#0086f7;font-weight:bold">1&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> alignItems: &lt;span style="color:#0086d2">&amp;#34;center&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> justifyContent: &lt;span style="color:#0086d2">&amp;#34;center&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>});
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="_props_-dun-composant" >&lt;em>Props&lt;/em> d&amp;rsquo;un composant
&lt;span>
&lt;a href="#_props_-dun-composant">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;ul>
&lt;li>Caractéristiques définies au moment de la création, modifiables uniquement par le composant parent.&lt;/li>
&lt;li>Objet composé de propriétés (paires nom/valeur).&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-jsx" data-lang="jsx">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> React from &lt;span style="color:#0086d2">&amp;#34;react&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> { StyleSheet, Text, View } from &lt;span style="color:#0086d2">&amp;#34;react-native&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// This component has two props: &amp;#34;name&amp;#34; and &amp;#34;age&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> Cat = ({ name, age }) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">return&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Text&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> I am {name} the {age} years old cat!
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">Text&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> );
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">export&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">default&lt;/span> App = () =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">return&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">View&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">style&lt;/span>={styles.container}&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Text&lt;/span>&amp;gt;Welcome!&amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">Text&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#080;background-color:#0f140f;font-style:italic">/* We define the values of the props for each cat */&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Cat&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">name&lt;/span>=&lt;span style="color:#0086d2">&amp;#34;Madchat&amp;#34;&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">age&lt;/span>=&lt;span style="color:#0086d2">&amp;#34;5&amp;#34;&lt;/span> /&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Cat&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">name&lt;/span>=&lt;span style="color:#0086d2">&amp;#34;Félicette&amp;#34;&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">age&lt;/span>=&lt;span style="color:#0086d2">&amp;#34;3&amp;#34;&lt;/span> /&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Cat&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">name&lt;/span>=&lt;span style="color:#0086d2">&amp;#34;Fritz&amp;#34;&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">age&lt;/span>=&lt;span style="color:#0086d2">&amp;#34;7&amp;#34;&lt;/span> /&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">View&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> );
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> styles = StyleSheet.create({
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> container: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> flex: &lt;span style="color:#0086f7;font-weight:bold">1&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> alignItems: &lt;span style="color:#0086d2">&amp;#34;center&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> justifyContent: &lt;span style="color:#0086d2">&amp;#34;center&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>});
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="_props_-et-déstructuration" >&lt;em>Props&lt;/em> et déstructuration
&lt;span>
&lt;a href="#_props_-et-d%c3%a9structuration">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;ul>
&lt;li>Les &lt;em>props&lt;/em> peuvent être passées de deux manières équivalentes à un composant function.&lt;/li>
&lt;li>La seconde, plus concise et explicite, est un exemple de &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment">déstructuration d&amp;rsquo;objet&lt;/a>.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-jsx" data-lang="jsx">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> Cat1 = (props) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> name = props.name;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> age = props.age;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> Cat2 = ({ name, age }) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>};
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="les-hooks" >Les hooks
&lt;span>
&lt;a href="#les-hooks">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;ul>
&lt;li>Introduits dans une version récente de React, les &lt;a href="https://reactjs.org/docs/hooks-overview.html">hooks&lt;/a> permettent d&amp;rsquo;écrire du code lié au cycle de vie des composants fonction.&lt;/li>
&lt;li>Exemple : le hook &lt;a href="https://reactjs.org/docs/hooks-state.html">useState&lt;/a> permet d&amp;rsquo;ajouter une variable d&amp;rsquo;état à un composant fonction.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> [&amp;lt;getter&amp;gt;, &amp;lt;setter&amp;gt;] = useState(&amp;lt;initialValue&amp;gt;);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="etat-_state_-dun-composant" >Etat (&lt;em>state&lt;/em>) d&amp;rsquo;un composant
&lt;span>
&lt;a href="#etat-_state_-dun-composant">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;ul>
&lt;li>Etat interne (mémoire), susceptible de changer au cours du temps (&lt;em>mutable&lt;/em>).&lt;/li>
&lt;li>Sa modification entraine une mise à jour de l&amp;rsquo;affichage du composant.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-jsx" data-lang="jsx">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> React, { useState } from &lt;span style="color:#0086d2">&amp;#34;react&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> { StyleSheet, Button, Text, View } from &lt;span style="color:#0086d2">&amp;#34;react-native&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> Counter = () =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Add a variable named &amp;#34;count&amp;#34; to the component state.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Its initial value is zero.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// The setCount function is used to update its value.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> [count, setCount] = useState(&lt;span style="color:#0086f7;font-weight:bold">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">return&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Adjacent JSX elements must be wrapped in an enclosing tag.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Fragments &amp;lt;&amp;gt; and &amp;lt;/&amp;gt; let you do that without using an unnecessary wrapping element like View.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> &amp;lt;&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Button&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff0086;font-weight:bold">title&lt;/span>=&lt;span style="color:#0086d2">&amp;#34;Click me!&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff0086;font-weight:bold">onPress&lt;/span>={() =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Update the state variable
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> setCount(count + &lt;span style="color:#0086f7;font-weight:bold">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;gt;&amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">Button&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#080;background-color:#0f140f;font-style:italic">/* Show the current value of the state variable */&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Text&lt;/span>&amp;gt;You clicked {count} times&amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">Text&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> );
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">export&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">default&lt;/span> App = () =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">return&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">View&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">style&lt;/span>={styles.container}&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Counter&lt;/span> /&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">View&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> );
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> styles = StyleSheet.create({
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> container: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> flex: &lt;span style="color:#0086f7;font-weight:bold">1&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> alignItems: &lt;span style="color:#0086d2">&amp;#34;center&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> justifyContent: &lt;span style="color:#0086d2">&amp;#34;center&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>});
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="cycle-de-vie-dun-composant" >Cycle de vie d&amp;rsquo;un composant
&lt;span>
&lt;a href="#cycle-de-vie-dun-composant">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;p>Les composants RN suivent un cycle de vie bien défini composé d&amp;rsquo;étapes : &lt;strong>montage&lt;/strong>, &lt;strong>rendu&lt;/strong>, &lt;strong>mise à jour&lt;/strong>, &lt;strong>démontage&lt;/strong> et &lt;strong>suppression&lt;/strong>.&lt;/p>
&lt;p>&lt;a href="http://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/">&lt;img src="images/react-lifecycle.png" alt="React lifecycle">&lt;/a>&lt;/p>
&lt;hr>
&lt;h2 id="gestion-de-lui" >Gestion de l&amp;rsquo;UI
&lt;span>
&lt;a href="#gestion-de-lui">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;hr>
&lt;h3 id="gestion-des-dimensions" >Gestion des dimensions
&lt;span>
&lt;a href="#gestion-des-dimensions">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;p>Deux possibilités pour définir la taille des composants :&lt;/p>
&lt;ul>
&lt;li>Dimensions fixes&lt;/li>
&lt;li>Dimensions flexibles&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="dimensions-fixes" >Dimensions fixes
&lt;span>
&lt;a href="#dimensions-fixes">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;p>Utile pour les composants qui doivent toujours être affichés à la même taille.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-jsx" data-lang="jsx">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> React from &lt;span style="color:#0086d2">&amp;#34;react&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> { View } from &lt;span style="color:#0086d2">&amp;#34;react-native&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">export&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">default&lt;/span> App = () =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">return&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">View&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">style&lt;/span>={{ width: &lt;span style="color:#0086f7;font-weight:bold">50&lt;/span>, height: &lt;span style="color:#0086f7;font-weight:bold">50&lt;/span>, backgroundColor: &lt;span style="color:#0086d2">&amp;#34;powderblue&amp;#34;&lt;/span> }} /&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">View&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">style&lt;/span>={{ width: &lt;span style="color:#0086f7;font-weight:bold">100&lt;/span>, height: &lt;span style="color:#0086f7;font-weight:bold">100&lt;/span>, backgroundColor: &lt;span style="color:#0086d2">&amp;#34;skyblue&amp;#34;&lt;/span> }} /&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">View&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">style&lt;/span>={{ width: &lt;span style="color:#0086f7;font-weight:bold">150&lt;/span>, height: &lt;span style="color:#0086f7;font-weight:bold">150&lt;/span>, backgroundColor: &lt;span style="color:#0086d2">&amp;#34;steelblue&amp;#34;&lt;/span> }} /&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> );
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="dimensions-flexibles" >Dimensions flexibles
&lt;span>
&lt;a href="#dimensions-flexibles">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;ul>
&lt;li>
&lt;p>&lt;code>flex:1&lt;/code> =&amp;gt; le composant prend tout l&amp;rsquo;espace disponible, partagé équitablement entre les autres composants d&amp;rsquo;un même parent.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Une valeur de &lt;code>flex&lt;/code> plus élevée donne plus d&amp;rsquo;espace à un composant par rapport aux autres.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-jsx" data-lang="jsx">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> React from &lt;span style="color:#0086d2">&amp;#34;react&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> { View } from &lt;span style="color:#0086d2">&amp;#34;react-native&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">export&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">default&lt;/span> App = () =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">return&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Try removing the `flex: 1` on the parent View.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// The parent will not have dimensions, so the children can&amp;#39;t expand.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// What if you add `height: 300` instead of `flex: 1`?
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">View&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">style&lt;/span>={{ flex: &lt;span style="color:#0086f7;font-weight:bold">1&lt;/span> }}&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#080;background-color:#0f140f;font-style:italic">/* Try changing the flex values to see how children views share the screen space */&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">View&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">style&lt;/span>={{ flex: &lt;span style="color:#0086f7;font-weight:bold">1&lt;/span>, backgroundColor: &lt;span style="color:#0086d2">&amp;#34;powderblue&amp;#34;&lt;/span> }} /&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">View&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">style&lt;/span>={{ flex: &lt;span style="color:#0086f7;font-weight:bold">2&lt;/span>, backgroundColor: &lt;span style="color:#0086d2">&amp;#34;skyblue&amp;#34;&lt;/span> }} /&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">View&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">style&lt;/span>={{ flex: &lt;span style="color:#0086f7;font-weight:bold">3&lt;/span>, backgroundColor: &lt;span style="color:#0086d2">&amp;#34;steelblue&amp;#34;&lt;/span> }} /&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">View&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> );
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="positionnement-avec-flexbox" >Positionnement avec Flexbox
&lt;span>
&lt;a href="#positionnement-avec-flexbox">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;ul>
&lt;li>Mode de mise en page pour les éléments situés à l&amp;rsquo;intérieur d&amp;rsquo;un conteneur.&lt;/li>
&lt;li>Objectif : répartir au mieux l&amp;rsquo;espace disponible.&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="images/flexbox_terminology.png" alt="Flexbox terminology">&lt;/p>
&lt;hr>
&lt;h3 id="flexdirection--flux-des-éléments" >&lt;code>flexDirection&lt;/code> : flux des éléments
&lt;span>
&lt;a href="#flexdirection--flux-des-%c3%a9l%c3%a9ments">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;p>&lt;code>column&lt;/code> (par défaut), &lt;code>row&lt;/code>, &lt;code>column-reverse&lt;/code>, &lt;code>row-reverse&lt;/code>.&lt;/p>
&lt;p>&lt;a href="https://css-tricks.com/snippets/css/a-guide-to-flexbox/">&lt;img src="images/flexbox_flex_direction.png" alt="Flex direction">&lt;/a>&lt;/p>
&lt;hr>
&lt;h3 id="justifycontent--axe-principal" >&lt;code>justifyContent&lt;/code> : axe principal
&lt;span>
&lt;a href="#justifycontent--axe-principal">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;p>&lt;a href="https://css-tricks.com/snippets/css/a-guide-to-flexbox/">&lt;img src="images/flexbox_justify_content.png" alt="Flexbox: justify content">&lt;/a>&lt;/p>
&lt;hr>
&lt;h3 id="alignitems--axe-secondaire" >&lt;code>alignItems&lt;/code> : axe secondaire
&lt;span>
&lt;a href="#alignitems--axe-secondaire">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;p>&lt;a href="https://css-tricks.com/snippets/css/a-guide-to-flexbox/">&lt;img src="images/flexbox_align_items.png" alt="Flexbox: align Items">&lt;/a>&lt;/p>
&lt;hr>
&lt;h3 id="flexbox-en-action" >Flexbox en action
&lt;span>
&lt;a href="#flexbox-en-action">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-jsx" data-lang="jsx">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> React from &lt;span style="color:#0086d2">&amp;#34;react&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> { View, StyleSheet } from &lt;span style="color:#0086d2">&amp;#34;react-native&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">export&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">default&lt;/span> App = () =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">return&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">View&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">style&lt;/span>={styles.container}&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#080;background-color:#0f140f;font-style:italic">/* Individual styles can be combined into an array */&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#080;background-color:#0f140f;font-style:italic">/* Thus, common style properties can be factorized */&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">View&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">style&lt;/span>={[styles.box, styles.box1]} /&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">View&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">style&lt;/span>={[styles.box, styles.box2]} /&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">View&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">style&lt;/span>={[styles.box, styles.box3]} /&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">View&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> );
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> styles = StyleSheet.create({
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> container: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> flex: &lt;span style="color:#0086f7;font-weight:bold">1&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Used to take into account the phone status bar at the top of the screen
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// marginTop: 48,
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> justifyContent: &lt;span style="color:#0086d2">&amp;#34;space-around&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> alignItems: &lt;span style="color:#0086d2">&amp;#34;center&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> box: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> width: &lt;span style="color:#0086f7;font-weight:bold">100&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> height: &lt;span style="color:#0086f7;font-weight:bold">100&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> box1: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> backgroundColor: &lt;span style="color:#0086d2">&amp;#34;powderblue&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> box2: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> backgroundColor: &lt;span style="color:#0086d2">&amp;#34;skyblue&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> box3: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> backgroundColor: &lt;span style="color:#0086d2">&amp;#34;steelblue&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>});
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="saisies-utilisateur" >Saisies utilisateur
&lt;span>
&lt;a href="#saisies-utilisateur">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;p>Le composant &lt;a href="https://reactnative.dev/docs/textinput">TextInput&lt;/a> permet la saisie de texte.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-jsx" data-lang="jsx">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> React, { useState } from &lt;span style="color:#0086d2">&amp;#34;react&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> { StyleSheet, Text, View, TextInput } from &lt;span style="color:#0086d2">&amp;#34;react-native&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">export&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">default&lt;/span> App = () =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Add character count to state
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> [charCount, setCharCount] = useState(&lt;span style="color:#0086f7;font-weight:bold">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">return&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">View&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">style&lt;/span>={styles.container}&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">TextInput&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff0086;font-weight:bold">style&lt;/span>={styles.text}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff0086;font-weight:bold">placeholder&lt;/span>=&lt;span style="color:#0086d2">&amp;#34;Enter some text&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff0086;font-weight:bold">onChangeText&lt;/span>={(text) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Update character count after input changes
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> setCharCount(text.length);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> /&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Text&lt;/span>&amp;gt;Character count: {charCount}&amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">Text&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">View&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> );
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> styles = StyleSheet.create({
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> container: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> flex: &lt;span style="color:#0086f7;font-weight:bold">1&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> alignItems: &lt;span style="color:#0086d2">&amp;#34;center&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> justifyContent: &lt;span style="color:#0086d2">&amp;#34;center&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> text: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> fontSize: &lt;span style="color:#0086f7;font-weight:bold">22&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> paddingBottom: &lt;span style="color:#0086f7;font-weight:bold">10&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>});
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h2 id="gestion-de-létat" >Gestion de l&amp;rsquo;état
&lt;span>
&lt;a href="#gestion-de-l%c3%a9tat">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;hr>
&lt;h3 id="rappels-sur-les-props" >Rappels sur les props
&lt;span>
&lt;a href="#rappels-sur-les-props">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;ul>
&lt;li>
&lt;p>&lt;strong>Props&lt;/strong> = caractéristiques définies au moment de la création du composant.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Les props d&amp;rsquo;un composant sont modifiables uniquement par son composant parent.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="rappels-sur-létat" >Rappels sur l&amp;rsquo;état
&lt;span>
&lt;a href="#rappels-sur-l%c3%a9tat">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;ul>
&lt;li>
&lt;p>&lt;strong>Etat (&lt;em>state&lt;/em>)&lt;/strong> = ensemble des données susceptibles d&amp;rsquo;être modifiées pendant l&amp;rsquo;exécution de l&amp;rsquo;application.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Chaque composant fonction React Native possède un état interne, géré via le hook &lt;code>useState&lt;/code>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Toute modification de l&amp;rsquo;état déclenche un nouveau rendu du composant.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="problématique" >Problématique
&lt;span>
&lt;a href="#probl%c3%a9matique">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;ul>
&lt;li>
&lt;p>La gestion locale de l&amp;rsquo;état devient insuffisante lorsqu&amp;rsquo;un composant doit &lt;strong>accéder à&lt;/strong> ou &lt;strong>modifier&lt;/strong> l&amp;rsquo;état d&amp;rsquo;un autre composant.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Nécessité de partager un &lt;strong>état commun&lt;/strong> entre certains composants.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="solution--_lifting-state-up_" >Solution : &lt;em>&amp;ldquo;lifting state up&amp;rdquo;&lt;/em>
&lt;span>
&lt;a href="#solution--_lifting-state-up_">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;ul>
&lt;li>Remonter l&amp;rsquo;état au niveau du plus proche composant parent commun.&lt;/li>
&lt;li>Définir les actions de modification dans ce composant parent.&lt;/li>
&lt;li>Dans les composants enfants :
&lt;ul>
&lt;li>Remplacer l&amp;rsquo;état local par des propriétés définies par le parent.&lt;/li>
&lt;li>Remplacer les actions locales par des appels aux actions définies dans le parent.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;a href="https://reactjs.org/docs/lifting-state-up.html">Lifting State Up (React)&lt;/a>&lt;/p>
&lt;hr>
&lt;h3 id="exemple-de-remontée-de-létat" >Exemple de remontée de l&amp;rsquo;état
&lt;span>
&lt;a href="#exemple-de-remont%c3%a9e-de-l%c3%a9tat">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;p>&lt;a href="https://github.com/ensc-mobi/TempConverter">https://github.com/ensc-mobi/TempConverter&lt;/a>&lt;/p>
&lt;p>&lt;img src="images/temp-converter.gif" alt="TempConverter demo">&lt;/p>
&lt;hr>
&lt;h3 id="mise-en-oeuvre" >Mise en oeuvre
&lt;span>
&lt;a href="#mise-en-oeuvre">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;p>L&amp;rsquo;état (température et échelle) commun aux deux composants de saisie est remonté dans &lt;code>App&lt;/code>, leur parent commun.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-jsx" data-lang="jsx">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> React, { useState } from &lt;span style="color:#0086d2">&amp;#34;react&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> { StyleSheet, View, Text, TextInput } from &lt;span style="color:#0086d2">&amp;#34;react-native&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Scale names used for display
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> scaleNames = { c: &lt;span style="color:#0086d2">&amp;#34;Celsius&amp;#34;&lt;/span>, f: &lt;span style="color:#0086d2">&amp;#34;Fahrenheit&amp;#34;&lt;/span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Celsius/Fahrenheit conversion functions
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>&lt;span style="color:#fb660a;font-weight:bold">function&lt;/span> toCelsius(fahrenheit) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">return&lt;/span> ((fahrenheit - &lt;span style="color:#0086f7;font-weight:bold">32&lt;/span>) * &lt;span style="color:#0086f7;font-weight:bold">5&lt;/span>) / &lt;span style="color:#0086f7;font-weight:bold">9&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">function&lt;/span> toFahrenheit(celsius) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">return&lt;/span> (celsius * &lt;span style="color:#0086f7;font-weight:bold">9&lt;/span>) / &lt;span style="color:#0086f7;font-weight:bold">5&lt;/span> + &lt;span style="color:#0086f7;font-weight:bold">32&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Component displaying if the water would boil or not, depending on the temperature
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// We choose the Celsius scale for easier comparison with the boiling temperature
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> BoilingResult = ({ tempCelsius }) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">let&lt;/span> message = &lt;span style="color:#0086d2">&amp;#34;&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">if&lt;/span> (!Number.isNaN(tempCelsius)) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> message =
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tempCelsius &amp;gt;= &lt;span style="color:#0086f7;font-weight:bold">100&lt;/span> ? &lt;span style="color:#0086d2">&amp;#34;The water would boil&amp;#34;&lt;/span> : &lt;span style="color:#0086d2">&amp;#34;The water would not boil&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">return&lt;/span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Text&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">style&lt;/span>={styles.text}&amp;gt;{message}&amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">Text&lt;/span>&amp;gt;;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Component for displaying and inputting a temperature in a specific scale
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> TemperatureInput = ({ value, scale, onChange }) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Accessing scaleNames properties through bracket notation
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Property_Accessors
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> placeholder = &lt;span style="color:#0086d2">`Enter temperature in &lt;/span>&lt;span style="color:#0086d2">${&lt;/span>scaleNames[scale]&lt;span style="color:#0086d2">}&lt;/span>&lt;span style="color:#0086d2">`&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">return&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">TextInput&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff0086;font-weight:bold">style&lt;/span>={styles.text}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff0086;font-weight:bold">placeholder&lt;/span>={placeholder}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff0086;font-weight:bold">onChangeText&lt;/span>={(text) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Call callback passed as component prop when input text changes
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> onChange(text);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff0086;font-weight:bold">value&lt;/span>={value}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> /&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> );
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Convert a temperature using a given conversion function
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>&lt;span style="color:#fb660a;font-weight:bold">function&lt;/span> tryConvert(temperature, convert) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> input = parseFloat(temperature);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">if&lt;/span> (Number.isNaN(input)) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">return&lt;/span> &lt;span style="color:#0086d2">&amp;#34;&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Call the conversion function on input
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> output = convert(input);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Keep the output rounded to the third decimal place
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> rounded = Math.round(output * &lt;span style="color:#0086f7;font-weight:bold">1000&lt;/span>) / &lt;span style="color:#0086f7;font-weight:bold">1000&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">return&lt;/span> rounded.toString();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Main component
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>&lt;span style="color:#fb660a;font-weight:bold">export&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">default&lt;/span> App = () =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Common state is lifted here because this component is the closest parent of TemperatureInput components.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// We store only the most recently changed input with its scale.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Temperature is stored as a string to handle missing values.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> [temperature, setTemperature] = useState(&lt;span style="color:#0086d2">&amp;#34;&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> [scale, setScale] = useState(&lt;span style="color:#0086d2">&amp;#34;c&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Compute temperatures in both scales
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> tempCelsius =
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> scale === &lt;span style="color:#0086d2">&amp;#34;f&amp;#34;&lt;/span> ? tryConvert(temperature, toCelsius) : temperature;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> tempFahrenheit =
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> scale === &lt;span style="color:#0086d2">&amp;#34;c&amp;#34;&lt;/span> ? tryConvert(temperature, toFahrenheit) : temperature;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">return&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">View&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">style&lt;/span>={styles.container}&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#080;background-color:#0f140f;font-style:italic">/* Display and input in Celsius degrees */&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">TemperatureInput&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff0086;font-weight:bold">value&lt;/span>={tempCelsius}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff0086;font-weight:bold">scale&lt;/span>=&lt;span style="color:#0086d2">&amp;#34;c&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff0086;font-weight:bold">onChange&lt;/span>={(newTemp) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> setTemperature(newTemp);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> setScale(&lt;span style="color:#0086d2">&amp;#34;c&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> /&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#080;background-color:#0f140f;font-style:italic">/* Display and input in Fahrenheit degrees */&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">TemperatureInput&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff0086;font-weight:bold">value&lt;/span>={tempFahrenheit}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff0086;font-weight:bold">scale&lt;/span>=&lt;span style="color:#0086d2">&amp;#34;f&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff0086;font-weight:bold">onChange&lt;/span>={(newTemp) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> setTemperature(newTemp);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> setScale(&lt;span style="color:#0086d2">&amp;#34;f&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> /&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">BoilingResult&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">tempCelsius&lt;/span>={parseFloat(tempCelsius)} /&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">View&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> );
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> styles = StyleSheet.create({
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> container: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> flex: &lt;span style="color:#0086f7;font-weight:bold">1&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> alignItems: &lt;span style="color:#0086d2">&amp;#34;center&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> justifyContent: &lt;span style="color:#0086d2">&amp;#34;center&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> text: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> fontSize: &lt;span style="color:#0086f7;font-weight:bold">22&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> paddingBottom: &lt;span style="color:#0086f7;font-weight:bold">10&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>});
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="restructuration-du-projet" >Restructuration du projet
&lt;span>
&lt;a href="#restructuration-du-projet">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;ul>
&lt;li>&lt;code>components/&lt;/code> rassemble les définitions des composants élémentaires.&lt;/li>
&lt;li>Ils sont importés par le composant racine défini dans &lt;code>App.js&lt;/code>.&lt;/li>
&lt;li>&lt;code>utils/&lt;/code> et &lt;code>theme/&lt;/code> factorisent les fonctions de conversion et les styles React Native communs.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-txt" data-lang="txt">&lt;span style="display:flex;">&lt;span>MyApp/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── components/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ ├── BoilingResult.js
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ ├── TemperatureInput.js
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── utils/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ ├── temperatureUtils.js
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── theme/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ ├── styles.js
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>└── App.js
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="définition-et-export-des-fonctions-de-conversion" >Définition et export des fonctions de conversion
&lt;span>
&lt;a href="#d%c3%a9finition-et-export-des-fonctions-de-conversion">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;p>Dans le fichier &lt;code>utils/temperatureUtils.js&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Scale names used for display
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>&lt;span style="color:#fb660a;font-weight:bold">export&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> scaleNames = { c: &lt;span style="color:#0086d2">&amp;#34;Celsius&amp;#34;&lt;/span>, f: &lt;span style="color:#0086d2">&amp;#34;Fahrenheit&amp;#34;&lt;/span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Celsius/Fahrenheit conversion functions
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>&lt;span style="color:#fb660a;font-weight:bold">export&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">function&lt;/span> toCelsius(fahrenheit) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">return&lt;/span> ((fahrenheit - &lt;span style="color:#0086f7;font-weight:bold">32&lt;/span>) * &lt;span style="color:#0086f7;font-weight:bold">5&lt;/span>) / &lt;span style="color:#0086f7;font-weight:bold">9&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">export&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">function&lt;/span> toFahrenheit(celsius) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">return&lt;/span> (celsius * &lt;span style="color:#0086f7;font-weight:bold">9&lt;/span>) / &lt;span style="color:#0086f7;font-weight:bold">5&lt;/span> + &lt;span style="color:#0086f7;font-weight:bold">32&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Convert a temperature using a given conversion function
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>&lt;span style="color:#fb660a;font-weight:bold">export&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">function&lt;/span> tryConvert(temperature, convert) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> input = parseFloat(temperature);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">if&lt;/span> (Number.isNaN(input)) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">return&lt;/span> &lt;span style="color:#0086d2">&amp;#34;&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Call the conversion function on input
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> output = convert(input);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Keep the output rounded to the third decimal place:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> rounded = Math.round(output * &lt;span style="color:#0086f7;font-weight:bold">1000&lt;/span>) / &lt;span style="color:#0086f7;font-weight:bold">1000&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">return&lt;/span> rounded.toString();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="définition-et-export-du-composant-de-saisie-de-température" >Définition et export du composant de saisie de température
&lt;span>
&lt;a href="#d%c3%a9finition-et-export-du-composant-de-saisie-de-temp%c3%a9rature">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;p>Dans le fichier &lt;code>components/TemperatureInput.js&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-jsx" data-lang="jsx">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> React from &lt;span style="color:#0086d2">&amp;#34;react&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> { TextInput } from &lt;span style="color:#0086d2">&amp;#34;react-native&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> { scaleNames } from &lt;span style="color:#0086d2">&amp;#34;../utils/temperatureUtils&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> styles from &lt;span style="color:#0086d2">&amp;#34;../theme/styles&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Component for displaying and inputting a temperature in a specific scale
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> TemperatureInput = ({ value, scale, onChange }) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">export&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">default&lt;/span> TemperatureInput;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="définition-du-composant-racine" >Définition du composant racine
&lt;span>
&lt;a href="#d%c3%a9finition-du-composant-racine">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;p>Dans le fichier &lt;code>App.js&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-jsx" data-lang="jsx">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> React, { useState } from &lt;span style="color:#0086d2">&amp;#34;react&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> { View } from &lt;span style="color:#0086d2">&amp;#34;react-native&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> BoilingResult from &lt;span style="color:#0086d2">&amp;#34;./components/BoilingResult&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> TemperatureInput from &lt;span style="color:#0086d2">&amp;#34;./components/TemperatureInput&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> { toCelsius, toFahrenheit, tryConvert } from &lt;span style="color:#0086d2">&amp;#34;./utils/temperatureUtils&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> styles from &lt;span style="color:#0086d2">&amp;#34;./theme/styles&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Main component
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>&lt;span style="color:#fb660a;font-weight:bold">export&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">default&lt;/span> App = () =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>};
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h2 id="applications-multi-écrans" >Applications multi-écrans
&lt;span>
&lt;a href="#applications-multi-%c3%a9crans">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;hr>
&lt;h3 id="react-navigation" >React Navigation
&lt;span>
&lt;a href="#react-navigation">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;ul>
&lt;li>Composant issu de la communauté des développeurs React Native.&lt;/li>
&lt;li>Devenu le standard pour les applications RN multi-vues.&lt;/li>
&lt;/ul>
&lt;p>&lt;a href="https://reactnavigation.org">&lt;img src="images/react_navigation_logo.png" alt="React Navigation logo">&lt;/a>&lt;/p>
&lt;hr>
&lt;h3 id="installation-de-react-navigation" >Installation de react-navigation
&lt;span>
&lt;a href="#installation-de-react-navigation">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;p>Utiliser &lt;code>npx expo install&lt;/code> au lieu de &lt;code>npm install&lt;/code> assure l&amp;rsquo;installation de versions compatibles avec celle d&amp;rsquo;Expo.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic"># Core components and common dependencies&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>npm install @react-navigation/native
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>npx expo install react-native-screens react-native-safe-area-context
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic"># If StackNavigator is used&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>npm install @react-navigation/native-stack
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic"># If BottomTabNavigator is used&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>npm install @react-navigation/bottom-tabs
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="exemple--navigation-par-piles-_stacks_" >Exemple : navigation par piles (&lt;em>stacks&lt;/em>)
&lt;span>
&lt;a href="#exemple--navigation-par-piles-_stacks_">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;p>&lt;a href="https://github.com/ensc-mobi/StackNavigatorDemo">https://github.com/ensc-mobi/StackNavigatorDemo&lt;/a>&lt;/p>
&lt;p>&lt;img src="images/stack-navigator-demo.png" alt="StackNavigator demo">&lt;/p>
&lt;hr>
&lt;h3 id="navigationcontainer" >NavigationContainer
&lt;span>
&lt;a href="#navigationcontainer">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;ul>
&lt;li>Composant racine nécessaire pour utiliser React Navigation.&lt;/li>
&lt;li>Ses descendants directs (composants enfants) sont appelés des &lt;strong>écrans&lt;/strong> (&lt;em>screens&lt;/em>).&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-jsx" data-lang="jsx">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> React from &lt;span style="color:#0086d2">&amp;#34;react&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> { NavigationContainer } from &lt;span style="color:#0086d2">&amp;#34;@react-navigation/native&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">export&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">default&lt;/span> App = () =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">return&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">NavigationContainer&lt;/span>&amp;gt;{&lt;span style="color:#080;background-color:#0f140f;font-style:italic">/* Rest of your app code */&lt;/span>}&amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">NavigationContainer&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> );
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="stacknavigator" >StackNavigator
&lt;span>
&lt;a href="#stacknavigator">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;p>Principe similaire au web : gestion d&amp;rsquo;une pile d&amp;rsquo;écrans avec possibilité de naviguer de l&amp;rsquo;un à l&amp;rsquo;autre.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-jsx" data-lang="jsx">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> React from &lt;span style="color:#0086d2">&amp;#34;react&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> { StyleSheet, View, Text } from &lt;span style="color:#0086d2">&amp;#34;react-native&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> { NavigationContainer } from &lt;span style="color:#0086d2">&amp;#34;@react-navigation/native&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> { createNativeStackNavigator } from &lt;span style="color:#0086d2">&amp;#34;@react-navigation/native-stack&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> HomeScreen = () =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">return&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">View&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">style&lt;/span>={styles.container}&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Text&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">style&lt;/span>={styles.text}&amp;gt;This is the home screen&amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">Text&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">View&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> );
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> Stack = createNativeStackNavigator();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">export&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">default&lt;/span> App = () =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">return&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">NavigationContainer&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Stack.Navigator&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Stack.Screen&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">name&lt;/span>=&lt;span style="color:#0086d2">&amp;#34;Home&amp;#34;&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">component&lt;/span>={HomeScreen} /&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">Stack.Navigator&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">NavigationContainer&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> );
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> styles = StyleSheet.create({
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> container: { flex: &lt;span style="color:#0086f7;font-weight:bold">1&lt;/span>, alignItems: &lt;span style="color:#0086d2">&amp;#34;center&amp;#34;&lt;/span>, justifyContent: &lt;span style="color:#0086d2">&amp;#34;center&amp;#34;&lt;/span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> text: { fontSize: &lt;span style="color:#0086f7;font-weight:bold">18&lt;/span>, paddingBottom: &lt;span style="color:#0086f7;font-weight:bold">10&lt;/span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>});
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="api-de-navigation" >API de navigation
&lt;span>
&lt;a href="#api-de-navigation">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;p>Passé comme &lt;em>prop&lt;/em> d&amp;rsquo;un composant écran, l&amp;rsquo;objet &lt;code>navigation&lt;/code> permet la gestion de la navigation:&lt;/p>
&lt;ul>
&lt;li>&lt;code>navigation.navigate(&amp;quot;RouteName&amp;quot;)&lt;/code> navigue vers un nouvel écran, sauf s&amp;rsquo;il est déjà l&amp;rsquo;écran actuel.&lt;/li>
&lt;li>&lt;code>navigation.push(&amp;quot;RouteName&amp;quot;)&lt;/code> navigue vers un nouvel écran même s&amp;rsquo;il est déjà l&amp;rsquo;écran actuel.&lt;/li>
&lt;li>&lt;code>navigation.goBack()&lt;/code> permet de revenir en arrière dans la navigation.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="exemple-de-navigation" >Exemple de navigation
&lt;span>
&lt;a href="#exemple-de-navigation">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-jsx" data-lang="jsx">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> React from &lt;span style="color:#0086d2">&amp;#34;react&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> { StyleSheet, View, Text, Button } from &lt;span style="color:#0086d2">&amp;#34;react-native&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> { NavigationContainer } from &lt;span style="color:#0086d2">&amp;#34;@react-navigation/native&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> { createNativeStackNavigator } from &lt;span style="color:#0086d2">&amp;#34;@react-navigation/native-stack&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> HomeScreen = ({ navigation }) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">return&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">View&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">style&lt;/span>={styles.container}&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Text&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">style&lt;/span>={styles.text}&amp;gt;This is the home screen&amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">Text&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Button&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff0086;font-weight:bold">title&lt;/span>=&lt;span style="color:#0086d2">&amp;#34;Go to Details&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff0086;font-weight:bold">onPress&lt;/span>={() =&amp;gt; navigation.navigate(&lt;span style="color:#0086d2">&amp;#34;Details&amp;#34;&lt;/span>)}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> /&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">View&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> );
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> DetailsScreen = ({ navigation }) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">return&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">View&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">style&lt;/span>={styles.container}&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Text&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">style&lt;/span>={styles.text}&amp;gt;This is the details screen&amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">Text&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Button&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff0086;font-weight:bold">title&lt;/span>=&lt;span style="color:#0086d2">&amp;#34;Go to Details... again&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff0086;font-weight:bold">onPress&lt;/span>={() =&amp;gt; navigation.push(&lt;span style="color:#0086d2">&amp;#34;Details&amp;#34;&lt;/span>)}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> /&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Button&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">title&lt;/span>=&lt;span style="color:#0086d2">&amp;#34;Go back&amp;#34;&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">onPress&lt;/span>={() =&amp;gt; navigation.goBack()} /&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Button&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">title&lt;/span>=&lt;span style="color:#0086d2">&amp;#34;Go to Home&amp;#34;&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">onPress&lt;/span>={() =&amp;gt; navigation.navigate(&lt;span style="color:#0086d2">&amp;#34;Home&amp;#34;&lt;/span>)} /&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">View&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> );
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> Stack = createNativeStackNavigator();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">export&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">default&lt;/span> App = () =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">return&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">NavigationContainer&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Stack.Navigator&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">initialRouteName&lt;/span>=&lt;span style="color:#0086d2">&amp;#34;Home&amp;#34;&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Stack.Screen&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">name&lt;/span>=&lt;span style="color:#0086d2">&amp;#34;Home&amp;#34;&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">component&lt;/span>={HomeScreen} /&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Stack.Screen&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">name&lt;/span>=&lt;span style="color:#0086d2">&amp;#34;Details&amp;#34;&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">component&lt;/span>={DetailsScreen} /&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">Stack.Navigator&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">NavigationContainer&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> );
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> styles = StyleSheet.create({
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> container: { flex: &lt;span style="color:#0086f7;font-weight:bold">1&lt;/span>, alignItems: &lt;span style="color:#0086d2">&amp;#34;center&amp;#34;&lt;/span>, justifyContent: &lt;span style="color:#0086d2">&amp;#34;center&amp;#34;&lt;/span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> text: { fontSize: &lt;span style="color:#0086f7;font-weight:bold">18&lt;/span>, paddingBottom: &lt;span style="color:#0086f7;font-weight:bold">10&lt;/span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>});
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="passage-de-paramètres-entre-écrans" >Passage de paramètres entre écrans
&lt;span>
&lt;a href="#passage-de-param%c3%a8tres-entre-%c3%a9crans">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;p>&lt;code>navigation.navigate&lt;/code> permet de transmettre des données d&amp;rsquo;un écran à l&amp;rsquo;autre sous la forme d&amp;rsquo;un objet JavaScript.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Navigate to &amp;#34;RouteName&amp;#34;, passing some parameters
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>navigation.navigate(&lt;span style="color:#0086d2">&amp;#34;RouteName&amp;#34;&lt;/span>, { &lt;span style="color:#080;background-color:#0f140f;font-style:italic">/* params go here */&lt;/span> })
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>L&amp;rsquo;écran d&amp;rsquo;arrivée peut lire les paramètres grâce à la propriété &lt;code>params&lt;/code> du &lt;em>prop&lt;/em> &lt;code>route&lt;/code>.&lt;/p>
&lt;p>Ces paramètres sont équivalents à ceux d&amp;rsquo;une URL. Ils ne doivent pas contenir les données métiers de l&amp;rsquo;application (plutôt gérés via l&amp;rsquo;état).&lt;/p>
&lt;hr>
&lt;h3 id="exemple-de-passage-de-paramètres" >Exemple de passage de paramètres
&lt;span>
&lt;a href="#exemple-de-passage-de-param%c3%a8tres">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-jsx" data-lang="jsx">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> React from &lt;span style="color:#0086d2">&amp;#34;react&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> { StyleSheet, View, Text, Button } from &lt;span style="color:#0086d2">&amp;#34;react-native&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> { NavigationContainer } from &lt;span style="color:#0086d2">&amp;#34;@react-navigation/native&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> { createNativeStackNavigator } from &lt;span style="color:#0086d2">&amp;#34;@react-navigation/native-stack&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> HomeScreen = ({ navigation }) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">return&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">View&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">style&lt;/span>={styles.container}&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Text&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">style&lt;/span>={styles.text}&amp;gt;This is the home screen&amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">Text&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Button&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff0086;font-weight:bold">title&lt;/span>=&lt;span style="color:#0086d2">&amp;#34;Go to Details&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff0086;font-weight:bold">onPress&lt;/span>={() =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Navigate to the Details route with 2 params
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> navigation.navigate(&lt;span style="color:#0086d2">&amp;#34;Details&amp;#34;&lt;/span>, {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> itemId: &lt;span style="color:#0086f7;font-weight:bold">86&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> otherParam: &lt;span style="color:#0086d2">&amp;#34;anything you want here&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> });
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> /&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">View&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> );
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> DetailsScreen = ({ navigation, route }) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Get the params
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> { itemId, otherParam } = route.params;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">return&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">View&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">style&lt;/span>={styles.container}&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Text&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">style&lt;/span>={styles.text}&amp;gt;This is the details screen&amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">Text&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#080;background-color:#0f140f;font-style:italic">/* Convert params to JSON strings before display */&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Text&lt;/span>&amp;gt;itemId: {JSON.stringify(itemId)}&amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">Text&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Text&lt;/span>&amp;gt;otherParam: {JSON.stringify(otherParam)}&amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">Text&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Button&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff0086;font-weight:bold">title&lt;/span>=&lt;span style="color:#0086d2">&amp;#34;Go to Details... again&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff0086;font-weight:bold">onPress&lt;/span>={() =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Navigate to Details again with one param
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> navigation.push(&lt;span style="color:#0086d2">&amp;#34;Details&amp;#34;&lt;/span>, {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> itemId: Math.floor(Math.random() * &lt;span style="color:#0086f7;font-weight:bold">100&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> });
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> /&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Button&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">title&lt;/span>=&lt;span style="color:#0086d2">&amp;#34;Go back&amp;#34;&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">onPress&lt;/span>={() =&amp;gt; navigation.goBack()} /&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Button&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">title&lt;/span>=&lt;span style="color:#0086d2">&amp;#34;Go to Home&amp;#34;&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">onPress&lt;/span>={() =&amp;gt; navigation.navigate(&lt;span style="color:#0086d2">&amp;#34;Home&amp;#34;&lt;/span>)} /&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">View&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> );
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> Stack = createNativeStackNavigator();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">export&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">default&lt;/span> App = () =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">return&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">NavigationContainer&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Stack.Navigator&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">initialRouteName&lt;/span>=&lt;span style="color:#0086d2">&amp;#34;Home&amp;#34;&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Stack.Screen&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">name&lt;/span>=&lt;span style="color:#0086d2">&amp;#34;Home&amp;#34;&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">component&lt;/span>={HomeScreen} /&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Stack.Screen&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">name&lt;/span>=&lt;span style="color:#0086d2">&amp;#34;Details&amp;#34;&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">component&lt;/span>={DetailsScreen} /&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">Stack.Navigator&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">NavigationContainer&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> );
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> styles = StyleSheet.create({
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> container: { flex: &lt;span style="color:#0086f7;font-weight:bold">1&lt;/span>, alignItems: &lt;span style="color:#0086d2">&amp;#34;center&amp;#34;&lt;/span>, justifyContent: &lt;span style="color:#0086d2">&amp;#34;center&amp;#34;&lt;/span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> text: { fontSize: &lt;span style="color:#0086f7;font-weight:bold">18&lt;/span>, paddingBottom: &lt;span style="color:#0086f7;font-weight:bold">10&lt;/span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>});
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="en-tête-des-écrans" >En-tête des écrans
&lt;span>
&lt;a href="#en-t%c3%aate-des-%c3%a9crans">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;p>La &lt;em>prop&lt;/em> &lt;code>screenOptions&lt;/code> de &lt;code>StackNavigator&lt;/code> permet de configurer l&amp;rsquo;en-tête commun à tous les écrans. La couleur de la barre de statut du téléphone peut être harmonisée grâce au composant &lt;a href="https://reactnavigation.org/docs/status-bar/">StatusBar&lt;/a>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-jsx" data-lang="jsx">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> React from &lt;span style="color:#0086d2">&amp;#34;react&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> { StyleSheet, View, Text, Button, StatusBar } from &lt;span style="color:#0086d2">&amp;#34;react-native&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> { NavigationContainer } from &lt;span style="color:#0086d2">&amp;#34;@react-navigation/native&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> { createNativeStackNavigator } from &lt;span style="color:#0086d2">&amp;#34;@react-navigation/native-stack&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// [...]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> Stack = createNativeStackNavigator();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">export&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">default&lt;/span> App = () =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">return&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">NavigationContainer&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">StatusBar&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">barStyle&lt;/span>=&lt;span style="color:#0086d2">&amp;#34;light-content&amp;#34;&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">backgroundColor&lt;/span>=&lt;span style="color:#0086d2">&amp;#34;#f4511e&amp;#34;&lt;/span> /&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Stack.Navigator&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff0086;font-weight:bold">initialRouteName&lt;/span>=&lt;span style="color:#0086d2">&amp;#34;Home&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff0086;font-weight:bold">screenOptions&lt;/span>={{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> headerStyle: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> backgroundColor: &lt;span style="color:#0086d2">&amp;#34;#f4511e&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> headerTintColor: &lt;span style="color:#0086d2">&amp;#34;#fff&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> headerTitleStyle: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> fontWeight: &lt;span style="color:#0086d2">&amp;#34;bold&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Stack.Screen&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff0086;font-weight:bold">name&lt;/span>=&lt;span style="color:#0086d2">&amp;#34;Home&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff0086;font-weight:bold">component&lt;/span>={HomeScreen}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff0086;font-weight:bold">options&lt;/span>={{ title: &lt;span style="color:#0086d2">&amp;#34;My home&amp;#34;&lt;/span> }}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> /&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Stack.Screen&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">name&lt;/span>=&lt;span style="color:#0086d2">&amp;#34;Details&amp;#34;&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">component&lt;/span>={DetailsScreen} /&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">Stack.Navigator&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">NavigationContainer&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> );
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> styles = StyleSheet.create({
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> container: { flex: &lt;span style="color:#0086f7;font-weight:bold">1&lt;/span>, alignItems: &lt;span style="color:#0086d2">&amp;#34;center&amp;#34;&lt;/span>, justifyContent: &lt;span style="color:#0086d2">&amp;#34;center&amp;#34;&lt;/span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> text: { fontSize: &lt;span style="color:#0086f7;font-weight:bold">18&lt;/span>, paddingBottom: &lt;span style="color:#0086f7;font-weight:bold">10&lt;/span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>});
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="restructuration-du-projet-1" >Restructuration du projet
&lt;span>
&lt;a href="#restructuration-du-projet-1">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;ul>
&lt;li>&lt;code>screens/&lt;/code> stocke les composants définissant chaque écran de l&amp;rsquo;application.&lt;/li>
&lt;li>&lt;code>navigation/&lt;/code> stocke les composants qui organisent la navigation entre les écrans.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-txt" data-lang="txt">&lt;span style="display:flex;">&lt;span>MyApp/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── screens/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ ├── DetailsScreen.js
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ ├── HomeScreen.js
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── navigation/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ ├── RootStackNavigator.js
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── theme/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ ├── colors.js
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ ├── styles.js
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>└── App.js
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="exemple--navigation-par-onglets" >Exemple : navigation par onglets
&lt;span>
&lt;a href="#exemple--navigation-par-onglets">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;p>&lt;a href="https://github.com/ensc-mobi/TabNavigatorDemo">https://github.com/ensc-mobi/TabNavigatorDemo&lt;/a>&lt;/p>
&lt;p>&lt;img src="images/tab-navigator-demo.png" alt="BottomTabNavigator demo">&lt;/p>
&lt;hr>
&lt;h3 id="tabnavigator" >TabNavigator
&lt;span>
&lt;a href="#tabnavigator">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;p>Affichage d&amp;rsquo;onglets en bas de l&amp;rsquo;écran.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-jsx" data-lang="jsx">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> React from &lt;span style="color:#0086d2">&amp;#34;react&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> { StyleSheet, Text, View } from &lt;span style="color:#0086d2">&amp;#34;react-native&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> Ionicons from &lt;span style="color:#0086d2">&amp;#34;react-native-vector-icons/Ionicons&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> { NavigationContainer } from &lt;span style="color:#0086d2">&amp;#34;@react-navigation/native&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> { createBottomTabNavigator } from &lt;span style="color:#0086d2">&amp;#34;@react-navigation/bottom-tabs&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> HomeScreen = () =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">return&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">View&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">style&lt;/span>={styles.container}&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Text&lt;/span>&amp;gt;This is the home screen&amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">Text&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">View&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> );
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> SettingsScreen = () =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">return&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">View&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">style&lt;/span>={styles.container}&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Text&lt;/span>&amp;gt;This is the settings screen&amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">Text&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">View&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> );
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> Tab = createBottomTabNavigator();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">export&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">default&lt;/span> App = () =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">return&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">NavigationContainer&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Tab.Navigator&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Tab.Screen&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">name&lt;/span>=&lt;span style="color:#0086d2">&amp;#34;Home&amp;#34;&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">component&lt;/span>={HomeScreen} /&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Tab.Screen&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">name&lt;/span>=&lt;span style="color:#0086d2">&amp;#34;Settings&amp;#34;&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">component&lt;/span>={SettingsScreen} /&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">Tab.Navigator&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">NavigationContainer&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> );
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> styles = StyleSheet.create({
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> container: { flex: &lt;span style="color:#0086f7;font-weight:bold">1&lt;/span>, justifyContent: &lt;span style="color:#0086d2">&amp;#34;center&amp;#34;&lt;/span>, alignItems: &lt;span style="color:#0086d2">&amp;#34;center&amp;#34;&lt;/span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>});
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="paramétrage-de-lapparence" >Paramétrage de l&amp;rsquo;apparence
&lt;span>
&lt;a href="#param%c3%a9trage-de-lapparence">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;p>Réalisé grâce à la &lt;em>prop&lt;/em> &lt;code>screenOptions&lt;/code> de &lt;code>TabNavigator&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-jsx" data-lang="jsx">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> React from &lt;span style="color:#0086d2">&amp;#34;react&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> { StyleSheet, Text, View, Button, StatusBar } from &lt;span style="color:#0086d2">&amp;#34;react-native&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> Ionicons from &lt;span style="color:#0086d2">&amp;#34;react-native-vector-icons/Ionicons&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> { NavigationContainer } from &lt;span style="color:#0086d2">&amp;#34;@react-navigation/native&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> { createBottomTabNavigator } from &lt;span style="color:#0086d2">&amp;#34;@react-navigation/bottom-tabs&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// [...]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> Tab = createBottomTabNavigator();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">export&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">default&lt;/span> App = () =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">return&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">NavigationContainer&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">StatusBar&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">barStyle&lt;/span>=&lt;span style="color:#0086d2">&amp;#34;light-content&amp;#34;&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">backgroundColor&lt;/span>=&lt;span style="color:#0086d2">&amp;#34;#f4511e&amp;#34;&lt;/span> /&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Tab.Navigator&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff0086;font-weight:bold">screenOptions&lt;/span>={({ route }) =&amp;gt; ({
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Icons will be different if the tab is focused
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> tabBarIcon: ({ focused, color, size }) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">let&lt;/span> iconName;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">if&lt;/span> (route.name === &lt;span style="color:#0086d2">&amp;#34;Home&amp;#34;&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> iconName = focused
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ? &lt;span style="color:#0086d2">&amp;#34;ios-information-circle&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> : &lt;span style="color:#0086d2">&amp;#34;ios-information-circle-outline&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#fb660a;font-weight:bold">else&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">if&lt;/span> (route.name === &lt;span style="color:#0086d2">&amp;#34;Settings&amp;#34;&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> iconName = focused ? &lt;span style="color:#0086d2">&amp;#34;ios-list&amp;#34;&lt;/span> : &lt;span style="color:#0086d2">&amp;#34;ios-list-outline&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// You can return any component that you like here!
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">return&lt;/span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Ionicons&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">name&lt;/span>={iconName} &lt;span style="color:#ff0086;font-weight:bold">size&lt;/span>={size} &lt;span style="color:#ff0086;font-weight:bold">color&lt;/span>={color} /&amp;gt;;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tabBarActiveTintColor: &lt;span style="color:#0086d2">&amp;#34;tomato&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tabBarInactiveTintColor: &lt;span style="color:#0086d2">&amp;#34;gray&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> headerStyle: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> backgroundColor: &lt;span style="color:#0086d2">&amp;#34;#f4511e&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> headerTintColor: &lt;span style="color:#0086d2">&amp;#34;#fff&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> headerTitleStyle: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> fontWeight: &lt;span style="color:#0086d2">&amp;#34;bold&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> })}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Tab.Screen&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">name&lt;/span>=&lt;span style="color:#0086d2">&amp;#34;Home&amp;#34;&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">component&lt;/span>={HomeScreen} /&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Tab.Screen&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">name&lt;/span>=&lt;span style="color:#0086d2">&amp;#34;Settings&amp;#34;&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">component&lt;/span>={SettingsScreen} /&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">Tab.Navigator&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">NavigationContainer&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> );
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> styles = StyleSheet.create({
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> container: { flex: &lt;span style="color:#0086f7;font-weight:bold">1&lt;/span>, justifyContent: &lt;span style="color:#0086d2">&amp;#34;center&amp;#34;&lt;/span>, alignItems: &lt;span style="color:#0086d2">&amp;#34;center&amp;#34;&lt;/span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> text: { fontSize: &lt;span style="color:#0086f7;font-weight:bold">18&lt;/span>, paddingBottom: &lt;span style="color:#0086f7;font-weight:bold">10&lt;/span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>});
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="navigation-entre-onglets" >Navigation entre onglets
&lt;span>
&lt;a href="#navigation-entre-onglets">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;ul>
&lt;li>API identique à la navigation entre les écrans d&amp;rsquo;un &lt;code>StackNavigator&lt;/code>.&lt;/li>
&lt;li>L&amp;rsquo;objet &lt;code>navigation&lt;/code> doit être passé comme &lt;em>prop&lt;/em> de l&amp;rsquo;écran.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-jsx" data-lang="jsx">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> React from &lt;span style="color:#0086d2">&amp;#34;react&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> { StyleSheet, Text, View, Button } from &lt;span style="color:#0086d2">&amp;#34;react-native&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> Ionicons from &lt;span style="color:#0086d2">&amp;#34;react-native-vector-icons/Ionicons&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> { NavigationContainer } from &lt;span style="color:#0086d2">&amp;#34;@react-navigation/native&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> { createBottomTabNavigator } from &lt;span style="color:#0086d2">&amp;#34;@react-navigation/bottom-tabs&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> HomeScreen = ({ navigation }) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">return&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">View&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">style&lt;/span>={styles.container}&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Text&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">style&lt;/span>={styles.text}&amp;gt;This is the home screen&amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">Text&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Button&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff0086;font-weight:bold">title&lt;/span>=&lt;span style="color:#0086d2">&amp;#34;Go to Settings&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff0086;font-weight:bold">onPress&lt;/span>={() =&amp;gt; navigation.navigate(&lt;span style="color:#0086d2">&amp;#34;Settings&amp;#34;&lt;/span>)}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> /&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">View&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> );
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> SettingsScreen = ({ navigation }) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">return&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">View&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">style&lt;/span>={styles.container}&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Text&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">style&lt;/span>={styles.text}&amp;gt;This is the settings screen&amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">Text&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Button&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">title&lt;/span>=&lt;span style="color:#0086d2">&amp;#34;Go to Home&amp;#34;&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">onPress&lt;/span>={() =&amp;gt; navigation.navigate(&lt;span style="color:#0086d2">&amp;#34;Home&amp;#34;&lt;/span>)} /&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">View&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> );
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> Tab = createBottomTabNavigator();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">export&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">default&lt;/span> App = () =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">return&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">NavigationContainer&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Tab.Navigator&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff0086;font-weight:bold">screenOptions&lt;/span>={({ route }) =&amp;gt; ({
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tabBarIcon: ({ focused, color, size }) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">let&lt;/span> iconName;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">if&lt;/span> (route.name === &lt;span style="color:#0086d2">&amp;#34;Home&amp;#34;&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> iconName = focused
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ? &lt;span style="color:#0086d2">&amp;#34;ios-information-circle&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> : &lt;span style="color:#0086d2">&amp;#34;ios-information-circle-outline&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#fb660a;font-weight:bold">else&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">if&lt;/span> (route.name === &lt;span style="color:#0086d2">&amp;#34;Settings&amp;#34;&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> iconName = focused ? &lt;span style="color:#0086d2">&amp;#34;ios-list&amp;#34;&lt;/span> : &lt;span style="color:#0086d2">&amp;#34;ios-list-outline&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// You can return any component that you like here!
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">return&lt;/span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Ionicons&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">name&lt;/span>={iconName} &lt;span style="color:#ff0086;font-weight:bold">size&lt;/span>={size} &lt;span style="color:#ff0086;font-weight:bold">color&lt;/span>={color} /&amp;gt;;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tabBarActiveTintColor: &lt;span style="color:#0086d2">&amp;#34;tomato&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tabBarInactiveTintColor: &lt;span style="color:#0086d2">&amp;#34;gray&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> })}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Tab.Screen&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">name&lt;/span>=&lt;span style="color:#0086d2">&amp;#34;Home&amp;#34;&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">component&lt;/span>={HomeScreen} /&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Tab.Screen&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">name&lt;/span>=&lt;span style="color:#0086d2">&amp;#34;Settings&amp;#34;&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">component&lt;/span>={SettingsScreen} /&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">Tab.Navigator&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">NavigationContainer&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> );
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> styles = StyleSheet.create({
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> container: { flex: &lt;span style="color:#0086f7;font-weight:bold">1&lt;/span>, justifyContent: &lt;span style="color:#0086d2">&amp;#34;center&amp;#34;&lt;/span>, alignItems: &lt;span style="color:#0086d2">&amp;#34;center&amp;#34;&lt;/span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> text: { fontSize: &lt;span style="color:#0086f7;font-weight:bold">18&lt;/span>, paddingBottom: &lt;span style="color:#0086f7;font-weight:bold">10&lt;/span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>});
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="affichage-de-piles-dans-les-onglets" >Affichage de piles dans les onglets
&lt;span>
&lt;a href="#affichage-de-piles-dans-les-onglets">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-jsx" data-lang="jsx">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> React from &lt;span style="color:#0086d2">&amp;#34;react&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> { StyleSheet, Text, View, Button, StatusBar } from &lt;span style="color:#0086d2">&amp;#34;react-native&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> Ionicons from &lt;span style="color:#0086d2">&amp;#34;react-native-vector-icons/Ionicons&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> { NavigationContainer } from &lt;span style="color:#0086d2">&amp;#34;@react-navigation/native&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> { createNativeStackNavigator } from &lt;span style="color:#0086d2">&amp;#34;@react-navigation/native-stack&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> { createBottomTabNavigator } from &lt;span style="color:#0086d2">&amp;#34;@react-navigation/bottom-tabs&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> HomeScreen = ({ navigation }) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">return&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">View&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">style&lt;/span>={styles.container}&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Text&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">style&lt;/span>={styles.text}&amp;gt;This is the home screen&amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">Text&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Button&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff0086;font-weight:bold">title&lt;/span>=&lt;span style="color:#0086d2">&amp;#34;Go to Details&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff0086;font-weight:bold">onPress&lt;/span>={() =&amp;gt; navigation.navigate(&lt;span style="color:#0086d2">&amp;#34;Details&amp;#34;&lt;/span>)}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> /&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">View&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> );
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> DetailsScreen = () =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">return&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">View&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">style&lt;/span>={styles.container}&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Text&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">style&lt;/span>={styles.text}&amp;gt;This is the details screen&amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">Text&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">View&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> );
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> SettingsScreen = () =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">return&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">View&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">style&lt;/span>={styles.container}&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Text&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">style&lt;/span>={styles.text}&amp;gt;This is the settings screen&amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">Text&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">View&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> );
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Screen stack for home tab
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> HomeStack = createNativeStackNavigator();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> HomeStackNavigator = () =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">return&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">HomeStack.Navigator&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">initialRouteName&lt;/span>=&lt;span style="color:#0086d2">&amp;#34;Home&amp;#34;&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">screenOptions&lt;/span>={screenOptions}&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">HomeStack.Screen&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff0086;font-weight:bold">name&lt;/span>=&lt;span style="color:#0086d2">&amp;#34;Home&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff0086;font-weight:bold">component&lt;/span>={HomeScreen}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff0086;font-weight:bold">options&lt;/span>={{ title: &lt;span style="color:#0086d2">&amp;#34;My home&amp;#34;&lt;/span> }}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> /&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">HomeStack.Screen&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">name&lt;/span>=&lt;span style="color:#0086d2">&amp;#34;Details&amp;#34;&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">component&lt;/span>={DetailsScreen} /&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">HomeStack.Navigator&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> );
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Screen stack for settings tab
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> SettingsStack = createNativeStackNavigator();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> SettingsStackNavigator = () =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">return&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">SettingsStack.Navigator&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff0086;font-weight:bold">initialRouteName&lt;/span>=&lt;span style="color:#0086d2">&amp;#34;Home&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff0086;font-weight:bold">screenOptions&lt;/span>={screenOptions}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">SettingsStack.Screen&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">name&lt;/span>=&lt;span style="color:#0086d2">&amp;#34;Settings&amp;#34;&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">component&lt;/span>={SettingsScreen} /&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">SettingsStack.Navigator&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> );
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> Tab = createBottomTabNavigator();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">export&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">default&lt;/span> App = () =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">return&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">NavigationContainer&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">StatusBar&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">barStyle&lt;/span>=&lt;span style="color:#0086d2">&amp;#34;light-content&amp;#34;&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">backgroundColor&lt;/span>=&lt;span style="color:#0086d2">&amp;#34;#f4511e&amp;#34;&lt;/span> /&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Tab.Navigator&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff0086;font-weight:bold">screenOptions&lt;/span>={({ route }) =&amp;gt; ({
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Icons will be different if the tab is focused
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> tabBarIcon: ({ focused, color, size }) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">let&lt;/span> iconName;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">if&lt;/span> (route.name === &lt;span style="color:#0086d2">&amp;#34;HomeStack&amp;#34;&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> iconName = focused
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ? &lt;span style="color:#0086d2">&amp;#34;ios-information-circle&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> : &lt;span style="color:#0086d2">&amp;#34;ios-information-circle-outline&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#fb660a;font-weight:bold">else&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">if&lt;/span> (route.name === &lt;span style="color:#0086d2">&amp;#34;SettingsStack&amp;#34;&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> iconName = focused ? &lt;span style="color:#0086d2">&amp;#34;ios-list&amp;#34;&lt;/span> : &lt;span style="color:#0086d2">&amp;#34;ios-list-outline&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// You can return any component that you like here!
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">return&lt;/span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Ionicons&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">name&lt;/span>={iconName} &lt;span style="color:#ff0086;font-weight:bold">size&lt;/span>={size} &lt;span style="color:#ff0086;font-weight:bold">color&lt;/span>={color} /&amp;gt;;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tabBarActiveTintColor: &lt;span style="color:#0086d2">&amp;#34;tomato&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tabBarInactiveTintColor: &lt;span style="color:#0086d2">&amp;#34;gray&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Hiding tab navigator header to show only stack header
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> headerShown: &lt;span style="color:#fb660a;font-weight:bold">false&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> })}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Tab.Screen&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">name&lt;/span>=&lt;span style="color:#0086d2">&amp;#34;HomeStack&amp;#34;&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">component&lt;/span>={HomeStackNavigator} /&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Tab.Screen&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">name&lt;/span>=&lt;span style="color:#0086d2">&amp;#34;SettingsStack&amp;#34;&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">component&lt;/span>={SettingsStackNavigator} /&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">Tab.Navigator&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">NavigationContainer&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> );
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> styles = StyleSheet.create({
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> container: { flex: &lt;span style="color:#0086f7;font-weight:bold">1&lt;/span>, justifyContent: &lt;span style="color:#0086d2">&amp;#34;center&amp;#34;&lt;/span>, alignItems: &lt;span style="color:#0086d2">&amp;#34;center&amp;#34;&lt;/span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> text: { fontSize: &lt;span style="color:#0086f7;font-weight:bold">18&lt;/span>, paddingBottom: &lt;span style="color:#0086f7;font-weight:bold">10&lt;/span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>});
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Common stack header options
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> screenOptions = {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> headerStyle: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> backgroundColor: &lt;span style="color:#0086d2">&amp;#34;#f4511e&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> headerTintColor: &lt;span style="color:#0086d2">&amp;#34;#fff&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> headerTitleStyle: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> fontWeight: &lt;span style="color:#0086d2">&amp;#34;bold&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="restructuration-du-projet-2" >Restructuration du projet
&lt;span>
&lt;a href="#restructuration-du-projet-2">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-txt" data-lang="txt">&lt;span style="display:flex;">&lt;span>MyApp/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── screens/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ ├── DetailsScreen.js
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ ├── HomeScreen.js
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ ├── SettingsScreen.js
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── navigation/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ ├── HomeStackNavigator.js
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ ├── SettingsStackNavigator.js
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ ├── RootTabNavigator.js
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── theme/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ ├── colors.js
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ ├── styles.js
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>└── App.js
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="autres-possibilités-de-react-navigation" >Autres possibilités de react-navigation
&lt;span>
&lt;a href="#autres-possibilit%c3%a9s-de-react-navigation">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;ul>
&lt;li>&lt;a href="https://reactnavigation.org/docs/drawer-based-navigation">Navigation par menu accordéon&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://reactnavigation.org/docs/modal">Ecran modal&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://reactnavigation.org/docs/auth-flow">Gestion de l&amp;rsquo;authentification&lt;/a>&lt;/li>
&lt;li>&amp;hellip;&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="utilisation-dapi-web" >Utilisation d&amp;rsquo;API web
&lt;span>
&lt;a href="#utilisation-dapi-web">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;hr>
&lt;h3 id="la-notion-dapi" >La notion d&amp;rsquo;API
&lt;span>
&lt;a href="#la-notion-dapi">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;p>Une &lt;strong>API&lt;/strong> (&lt;em>Application Programming Interface&lt;/em>) est un point d&amp;rsquo;entrée programmatique dans un système.&lt;/p>
&lt;p>Elle fournit un moyen d&amp;rsquo;interagir avec ce système.&lt;/p>
&lt;p>Les API permettent aux développeurs d&amp;rsquo;intégrer des services externes dans leurs applications.&lt;/p>
&lt;hr>
&lt;h3 id="spécificités-des-api-web" >Spécificités des API web
&lt;span>
&lt;a href="#sp%c3%a9cificit%c3%a9s-des-api-web">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;p>Une &lt;strong>API web&lt;/strong> (appelée parfois service web) est une API accessible via les technologies du web : HTTP ou HTTPS.&lt;/p>
&lt;p>Les API web utilisent le plus souvent le format de donnée &lt;strong>JSON&lt;/strong>.&lt;/p>
&lt;p>Certaines sont librement utilisables, d&amp;rsquo;autres nécessitent une authentification du client.&lt;/p>
&lt;hr>
&lt;h3 id="exemples-dapi-web" >Exemples d&amp;rsquo;API web
&lt;span>
&lt;a href="#exemples-dapi-web">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;ul>
&lt;li>&lt;a href="https://pokeapi.co/">PokéAPI&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://swapi.dev/">Star Wars API&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://en.wikipedia.org/w/api.php?">Wikipedia&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://developer.spotify.com/documentation/web-api/">Spotify&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.omdbapi.com/">OMDb API&lt;/a>&lt;/li>
&lt;li>&amp;hellip;&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="outils-pour-la-gestion-des-api-web" >Outils pour la gestion des API web
&lt;span>
&lt;a href="#outils-pour-la-gestion-des-api-web">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;ul>
&lt;li>&lt;a href="https://www.getpostman.com/">Postman&lt;/a>&lt;/li>
&lt;li>Extension &lt;a href="https://addons.mozilla.org/fr/firefox/addon/restclient/">RESTClient&lt;/a> pour Firefox&lt;/li>
&lt;li>&lt;a href="https://insomnia.rest/">Insomnia&lt;/a>&lt;/li>
&lt;li>&amp;hellip;&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="exemple-dutilisation-dune-api" >Exemple d&amp;rsquo;utilisation d&amp;rsquo;une API
&lt;span>
&lt;a href="#exemple-dutilisation-dune-api">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;p>&lt;a href="https://github.com/ensc-mobi/RandomBeer">https://github.com/ensc-mobi/RandomBeer&lt;/a>&lt;/p>
&lt;p>&lt;img src="images/random_beer.png" alt="Random Beer app">&lt;/p>
&lt;hr>
&lt;h3 id="appels-réseau-asynchrones-avec-fetch" >Appels réseau asynchrones avec &lt;code>fetch&lt;/code>
&lt;span>
&lt;a href="#appels-r%c3%a9seau-asynchrones-avec-fetch">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;p>Une &lt;a href="https://web.dev/promises/">promesse&lt;/a> (&lt;em>promise&lt;/em>) est un objet qui encapsule une opération dont le résultat n&amp;rsquo;est pas encore connu.&lt;/p>
&lt;p>La fonction JavaScript &lt;a href="https://developers.google.com/web/updates/2015/03/introduction-to-fetch">fetch()&lt;/a> exploite les possibilités des promesses.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Envoie une requête HTTP asynchrone vers l&amp;#39;URL spécifiée
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>fetch(url)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .then(() =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Code appelé ultérieurement si la requête réussit
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> })
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#fb660a;font-weight:bold">catch&lt;/span>(() =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Code appelé ultérieurement si la requête échoue
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> });
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="accès-à-une-ressource-distante" >Accès à une ressource distante
&lt;span>
&lt;a href="#acc%c3%a8s-%c3%a0-une-ressource-distante">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Envoi d&amp;#39;une requête HTTP asynchrone vers l&amp;#39;URL spécifiée
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// La réponse reçue ici contient des données JSON
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>fetch(&lt;span style="color:#0086d2">&amp;#34;http://my-api-url&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Accès au contenu JSON de la réponse
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> .then((response) =&amp;gt; response.json())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .then((content) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Utilisation du contenu de la réponse
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// `content` est un objet ou un tableau JavaScript
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> })
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#fb660a;font-weight:bold">catch&lt;/span>((error) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> console.error(error);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> });
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="mise-à-jour-dune-ressource-distante" >Mise à jour d&amp;rsquo;une ressource distante
&lt;span>
&lt;a href="#mise-%c3%a0-jour-dune-ressource-distante">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>fetch(&lt;span style="color:#0086d2">&amp;#34;https://mywebsite.com/endpoint/&amp;#34;&lt;/span>, {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> method: &lt;span style="color:#0086d2">&amp;#34;POST&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> headers: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Accept: &lt;span style="color:#0086d2">&amp;#34;application/json&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#0086d2">&amp;#34;Content-Type&amp;#34;&lt;/span>: &lt;span style="color:#0086d2">&amp;#34;application/json&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> body: JSON.stringify({
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> firstParam: &lt;span style="color:#0086d2">&amp;#34;yourValue&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> secondParam: &lt;span style="color:#0086d2">&amp;#34;yourOtherValue&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>});
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="appels-réseau-asynchrones-avec-asyncawait" >Appels réseau asynchrones avec &lt;code>async/await&lt;/code>
&lt;span>
&lt;a href="#appels-r%c3%a9seau-asynchrones-avec-asyncawait">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;p>Les fonctions utilisant &lt;code>await&lt;/code> doivent être déclarées avec le mot-clé &lt;code>async&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Cette fonction renvoie une promesse
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> fetchRemoteApi = &lt;span style="color:#fb660a;font-weight:bold">async&lt;/span> () =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">try&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Envoi d&amp;#39;une requête HTTP asynchrone vers l&amp;#39;URL spécifiée
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// La réponse reçue ici contient des données JSON
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> response = &lt;span style="color:#fb660a;font-weight:bold">await&lt;/span> fetch(&lt;span style="color:#0086d2">&amp;#34;http://my-api-url&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Accès au contenu JSON de la réponse
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> content = &lt;span style="color:#fb660a;font-weight:bold">await&lt;/span> response.json();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Utilisation du contenu de la réponse
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// `content` est un objet ou un tableau JavaScript
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> } &lt;span style="color:#fb660a;font-weight:bold">catch&lt;/span> (e) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Gestion de l&amp;#39;erreur
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>fetchRemoteApi();
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="exécution-de-code-à-linitialisation-dun-composant" >Exécution de code à l&amp;rsquo;initialisation d&amp;rsquo;un composant
&lt;span>
&lt;a href="#ex%c3%a9cution-de-code-%c3%a0-linitialisation-dun-composant">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;ul>
&lt;li>Le hook &lt;a href="https://reactjs.org/docs/hooks-effect.html">useEffect&lt;/a> permet de déclencher des traitements à certains moments du cycle de vie d&amp;rsquo;un composant.&lt;/li>
&lt;li>Par défaut, le code associé est appelé à chaque réaffichage du composant. On peut définir une liste des variables dont le changement déclenche une nouvelle exécution du code du &lt;code>hook&lt;/code>.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>useEffect(() =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Code exécuté uniquement au chargement (mounting) du composant
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>}, []);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="affichage-pendant-le-chargement" >Affichage pendant le chargement
&lt;span>
&lt;a href="#affichage-pendant-le-chargement">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;ul>
&lt;li>Le composant &lt;a href="https://reactnative.dev/docs/activityindicator">ActivityIndicator&lt;/a> permet d&amp;rsquo;afficher un &lt;em>spinner&lt;/em> pendant les actions potentiellement longues (chargements réseau, etc).&lt;/li>
&lt;li>Il est souvent associé à un booléen &lt;code>loading&lt;/code> ajouté à l&amp;rsquo;état du composant.&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="images/spinner.gif" alt="ActivityIndicator spinner">&lt;/p>
&lt;hr>
&lt;h3 id="mise-en-oeuvre-1" >Mise en oeuvre
&lt;span>
&lt;a href="#mise-en-oeuvre-1">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-jsx" data-lang="jsx">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> React, { useEffect } from &lt;span style="color:#0086d2">&amp;#34;react&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> { useState } from &lt;span style="color:#0086d2">&amp;#34;react&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> StyleSheet,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Text,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> View,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ActivityIndicator,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> TouchableOpacity,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>} from &lt;span style="color:#0086d2">&amp;#34;react-native&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// API endpoint
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> rootEndpoint = &lt;span style="color:#0086d2">&amp;#34;https://api.punkapi.com/v2&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// fetch API for a random beer
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> fetchRandomBeer = &lt;span style="color:#fb660a;font-weight:bold">async&lt;/span> () =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> response = &lt;span style="color:#fb660a;font-weight:bold">await&lt;/span> fetch(&lt;span style="color:#0086d2">`&lt;/span>&lt;span style="color:#0086d2">${&lt;/span>rootEndpoint&lt;span style="color:#0086d2">}&lt;/span>&lt;span style="color:#0086d2">/beers/random`&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> beers = &lt;span style="color:#fb660a;font-weight:bold">await&lt;/span> response.json();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Access first element of returned beer array
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">return&lt;/span> beers[&lt;span style="color:#0086f7;font-weight:bold">0&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">export&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">default&lt;/span> App = () =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Define state
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> [loading, setLoading] = useState(&lt;span style="color:#fb660a;font-weight:bold">true&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> [error, setError] = useState(&lt;span style="color:#fb660a;font-weight:bold">false&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> [beerName, setBeerName] = useState(&lt;span style="color:#0086d2">&amp;#34;&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> [beerDescription, setBeerDescription] = useState(&lt;span style="color:#0086d2">&amp;#34;&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Load a new beer
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> loadBeer = &lt;span style="color:#fb660a;font-weight:bold">async&lt;/span> () =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> setLoading(&lt;span style="color:#fb660a;font-weight:bold">true&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> setError(&lt;span style="color:#fb660a;font-weight:bold">false&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">try&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> beer = &lt;span style="color:#fb660a;font-weight:bold">await&lt;/span> fetchRandomBeer();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Update state
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> setBeerName(beer.name);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> setBeerDescription(beer.description);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#fb660a;font-weight:bold">catch&lt;/span> (e) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> setError(&lt;span style="color:#fb660a;font-weight:bold">true&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> setLoading(&lt;span style="color:#fb660a;font-weight:bold">false&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// The empty array [] prevents the effect from running at each re-render
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> useEffect(() =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// More details; https://www.robinwieruch.de/react-hooks-fetch-data/
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> loadBeer();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }, []);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">if&lt;/span> (loading) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">return&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">View&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">style&lt;/span>={styles.container}&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">ActivityIndicator&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">size&lt;/span>=&lt;span style="color:#0086d2">&amp;#34;large&amp;#34;&lt;/span> /&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">View&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> );
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">if&lt;/span> (error) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">return&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">View&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">style&lt;/span>={styles.container}&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Text&lt;/span>&amp;gt;Something went wrong :\&amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">Text&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">View&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> );
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">return&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">View&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">style&lt;/span>={styles.container}&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Text&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">style&lt;/span>={styles.name}&amp;gt;{beerName}&amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">Text&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Text&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">style&lt;/span>={styles.description}&amp;gt;{beerDescription}&amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">Text&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#080;background-color:#0f140f;font-style:italic">/* Add a button to fetch another beer */&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">TouchableOpacity&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff0086;font-weight:bold">style&lt;/span>={styles.button}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff0086;font-weight:bold">onPress&lt;/span>={() =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> loadBeer();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Text&lt;/span>&amp;gt;Grab a &lt;span style="color:#fb660a;font-weight:bold">new&lt;/span> beer!&amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">Text&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">TouchableOpacity&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">View&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> );
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> styles = StyleSheet.create({
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> container: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> flex: &lt;span style="color:#0086f7;font-weight:bold">1&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> justifyContent: &lt;span style="color:#0086d2">&amp;#34;center&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> margin: &lt;span style="color:#0086f7;font-weight:bold">30&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> fontSize: &lt;span style="color:#0086f7;font-weight:bold">18&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> fontWeight: &lt;span style="color:#0086d2">&amp;#34;700&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> marginBottom: &lt;span style="color:#0086f7;font-weight:bold">10&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> description: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> marginBottom: &lt;span style="color:#0086f7;font-weight:bold">10&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> button: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> borderWidth: &lt;span style="color:#0086f7;font-weight:bold">1&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> borderColor: &lt;span style="color:#0086d2">&amp;#34;black&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> borderRadius: &lt;span style="color:#0086f7;font-weight:bold">3&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> padding: &lt;span style="color:#0086f7;font-weight:bold">5&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> justifyContent: &lt;span style="color:#0086d2">&amp;#34;center&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> alignItems: &lt;span style="color:#0086d2">&amp;#34;center&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>});
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="restructuration-du-projet-3" >Restructuration du projet
&lt;span>
&lt;a href="#restructuration-du-projet-3">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;p>&lt;code>api/&lt;/code> rassemble les définitions des appels réseau asynchrones.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-txt" data-lang="txt">&lt;span style="display:flex;">&lt;span>MyApp/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── api/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ ├── punkapi.js
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── theme/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ ├── styles.js
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>└── App.js
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h2 id="persistance-locale" >Persistance locale
&lt;span>
&lt;a href="#persistance-locale">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;hr>
&lt;h3 id="besoin" >Besoin
&lt;span>
&lt;a href="#besoin">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;ul>
&lt;li>Les applications mobiles doivent souvent enregistrer une partie de leurs données (préférences utilisateurs, dernières informations consultées, etc) dans la mémoire de stockage du téléphone/tablette.&lt;/li>
&lt;li>Plusieurs solutions existent pour cela.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="exemple-de-stockage-local" >Exemple de stockage local
&lt;span>
&lt;a href="#exemple-de-stockage-local">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;p>&lt;a href="https://github.com/ensc-mobi/ShowerThoughts">https://github.com/ensc-mobi/ShowerThoughts&lt;/a>&lt;/p>
&lt;p>&lt;img src="images/showerthoughts.png" alt="Show thoughts">&lt;/p>
&lt;hr>
&lt;h3 id="stockage-local-avec-asyncstorage" >Stockage local avec &lt;code>AsyncStorage&lt;/code>
&lt;span>
&lt;a href="#stockage-local-avec-asyncstorage">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;ul>
&lt;li>Le composant &lt;a href="https://react-native-async-storage.github.io/async-storage/">AsyncStorage&lt;/a> permet de stocker localement des données sous forme de paires nom/valeur.&lt;/li>
&lt;li>Il gère des valeurs de type chaîne, ou objet après sérialisation JSON.&lt;/li>
&lt;li>Son API est basée sur les promesses et donc asynchrone.&lt;/li>
&lt;li>Il doit être ajouté au projet :&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>npx expo install @react-native-async-storage/async-storage
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="ecriture-de-données" >Ecriture de données
&lt;span>
&lt;a href="#ecriture-de-donn%c3%a9es">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;p>&lt;code>setItem&lt;/code> permet à la fois d&amp;rsquo;ajouter de nouveaux éléments et de modifier des éléments existants.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> AsyncStorage from &lt;span style="color:#0086d2">&amp;#34;@react-native-async-storage/async-storage&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> storeString = &lt;span style="color:#fb660a;font-weight:bold">async&lt;/span> (value) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">try&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">await&lt;/span> AsyncStorage.setItem(&lt;span style="color:#0086d2">&amp;#34;my_storage_key&amp;#34;&lt;/span>, value);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#fb660a;font-weight:bold">catch&lt;/span> (e) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Saving error
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> storeObject = &lt;span style="color:#fb660a;font-weight:bold">async&lt;/span> (value) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">try&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> jsonValue = JSON.stringify(value)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">await&lt;/span> AsyncStorage.setItem(&lt;span style="color:#0086d2">&amp;#34;my_storage_key&amp;#34;&lt;/span>, jsonValue)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#fb660a;font-weight:bold">catch&lt;/span> (e) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Saving error
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="lecture-de-données" >Lecture de données
&lt;span>
&lt;a href="#lecture-de-donn%c3%a9es">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;p>&lt;code>getItem&lt;/code> renvoie une promesse qui réussit si la valeur associée à la clé est trouvée, ou renvoie &lt;code>null&lt;/code> dans le cas contraire.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> AsyncStorage from &lt;span style="color:#0086d2">&amp;#34;@react-native-async-storage/async-storage&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> getString = &lt;span style="color:#fb660a;font-weight:bold">async&lt;/span> () =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">try&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> value = &lt;span style="color:#fb660a;font-weight:bold">await&lt;/span> AsyncStorage.getItem(&lt;span style="color:#0086d2">&amp;#34;my_storage_key&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">if&lt;/span> (value !== &lt;span style="color:#fb660a;font-weight:bold">null&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// value previously stored
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#fb660a;font-weight:bold">catch&lt;/span> (e) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Error reading value
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> getObject = &lt;span style="color:#fb660a;font-weight:bold">async&lt;/span> () =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">try&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> jsonValue = &lt;span style="color:#fb660a;font-weight:bold">await&lt;/span> AsyncStorage.getItem(&lt;span style="color:#0086d2">&amp;#34;my_storage_key&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">return&lt;/span> jsonValue != &lt;span style="color:#fb660a;font-weight:bold">null&lt;/span> ? JSON.parse(jsonValue) : &lt;span style="color:#fb660a;font-weight:bold">null&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#fb660a;font-weight:bold">catch&lt;/span> (e) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Error reading value
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="mise-en-oeuvre-2" >Mise en oeuvre
&lt;span>
&lt;a href="#mise-en-oeuvre-2">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;ul>
&lt;li>Les données sont chargées depuis le stockage local uniquement au démarrage de l&amp;rsquo;application.&lt;/li>
&lt;li>La validation de la saisie déclenche la sauvegarde locale, puis la mise à jour de l&amp;rsquo;état.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-jsx" data-lang="jsx">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> React, { useEffect, useState } from &lt;span style="color:#0086d2">&amp;#34;react&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> { StyleSheet, Text, View, TextInput, FlatList } from &lt;span style="color:#0086d2">&amp;#34;react-native&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> AsyncStorage from &lt;span style="color:#0086d2">&amp;#34;@react-native-async-storage/async-storage&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// AsyncStorage key used for storing ideas
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> STORAGE_KEY = &lt;span style="color:#0086d2">&amp;#34;ASYNC_STORAGE_IDEAS&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">export&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">default&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">function&lt;/span> App() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Value of the text input
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> [input, setInput] = useState(&lt;span style="color:#0086d2">&amp;#34;&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Ideas list, initially empty
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> [ideas, setIdeas] = useState([]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Clear local storage
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> resetIdeas = &lt;span style="color:#fb660a;font-weight:bold">async&lt;/span> () =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> console.log(&lt;span style="color:#0086d2">&amp;#34;Removing ideas from local storage...&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">try&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">await&lt;/span> AsyncStorage.multiRemove([STORAGE_KEY]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#fb660a;font-weight:bold">catch&lt;/span> (e) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> console.error(&lt;span style="color:#0086d2">&amp;#34;Failed to clear ideas&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Save ideas array parameter to local storage
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> saveIdeas = &lt;span style="color:#fb660a;font-weight:bold">async&lt;/span> (newIdeas) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> console.log(&lt;span style="color:#0086d2">`Saving ideas [&lt;/span>&lt;span style="color:#0086d2">${&lt;/span>newIdeas&lt;span style="color:#0086d2">}&lt;/span>&lt;span style="color:#0086d2">] to local storage...`&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">try&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Turn ideas array into a JSON string
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> jsonIdeas = JSON.stringify(newIdeas);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Store ideas string
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">await&lt;/span> AsyncStorage.setItem(STORAGE_KEY, jsonIdeas);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#fb660a;font-weight:bold">catch&lt;/span> (e) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> console.error(&lt;span style="color:#0086d2">&amp;#34;Failed to save ideas&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Load ideas from local storage
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> loadIdeas = &lt;span style="color:#fb660a;font-weight:bold">async&lt;/span> () =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> console.log(&lt;span style="color:#0086d2">&amp;#34;Loading ideas from local storage...&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">try&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Load ideas string
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> jsonIdeas = &lt;span style="color:#fb660a;font-weight:bold">await&lt;/span> AsyncStorage.getItem(STORAGE_KEY);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">if&lt;/span> (jsonIdeas !== &lt;span style="color:#fb660a;font-weight:bold">null&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Turn stored JSON string into an array, and set it as ideas array
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> setIdeas(JSON.parse(jsonIdeas));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#fb660a;font-weight:bold">catch&lt;/span> (e) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> console.error(&lt;span style="color:#0086d2">&amp;#34;Failed to load ideas&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Load ideas only during initial component mounting
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> useEffect(() =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Uncomment to clear ideas from local storage
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// resetIdeas();
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> loadIdeas();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }, []);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">return&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">View&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">style&lt;/span>={styles.container}&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">TextInput&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff0086;font-weight:bold">style&lt;/span>={styles.input}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff0086;font-weight:bold">placeholder&lt;/span>=&lt;span style="color:#0086d2">&amp;#34;Enter your newest brilliant idea&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> // &lt;span style="color:#ff0086;font-weight:bold">Display&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">input&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">value&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff0086;font-weight:bold">value&lt;/span>={input}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff0086;font-weight:bold">onChangeText&lt;/span>={(text) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Update input value
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> setInput(text);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff0086;font-weight:bold">onSubmitEditing&lt;/span>={() =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">if&lt;/span> (!input) &lt;span style="color:#fb660a;font-weight:bold">return&lt;/span>; &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Don&amp;#39;t submit if empty
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Creating a new ideas array with input (new idea) at the end
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> newIdeas = [...ideas, input];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> saveIdeas(newIdeas);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Update state
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> setIdeas(newIdeas);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Reset input value
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> setInput(&lt;span style="color:#0086d2">&amp;#34;&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> /&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">FlatList&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff0086;font-weight:bold">style&lt;/span>={styles.list}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff0086;font-weight:bold">data&lt;/span>={ideas}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff0086;font-weight:bold">renderItem&lt;/span>={({ item }) =&amp;gt; &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Text&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">style&lt;/span>={styles.item}&amp;gt;- {item}&amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">Text&lt;/span>&amp;gt;}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff0086;font-weight:bold">keyExtractor&lt;/span>={(item) =&amp;gt; item}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;gt;&amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">FlatList&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">View&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> );
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> styles = StyleSheet.create({
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> container: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> flex: &lt;span style="color:#0086f7;font-weight:bold">1&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> marginTop: &lt;span style="color:#0086f7;font-weight:bold">30&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> input: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> backgroundColor: &lt;span style="color:#0086d2">&amp;#34;whitesmoke&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> padding: &lt;span style="color:#0086f7;font-weight:bold">10&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> marginBottom: &lt;span style="color:#0086f7;font-weight:bold">10&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> list: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> marginLeft: &lt;span style="color:#0086f7;font-weight:bold">10&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> marginRight: &lt;span style="color:#0086f7;font-weight:bold">10&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> item: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> padding: &lt;span style="color:#0086f7;font-weight:bold">5&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>});
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="restructuration-du-projet-4" >Restructuration du projet
&lt;span>
&lt;a href="#restructuration-du-projet-4">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-txt" data-lang="txt">&lt;span style="display:flex;">&lt;span>MyApp/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── components/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ ├── Input.js
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── utils/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ ├── localStorage.js
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── theme/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ ├── styles.js
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>└── App.js
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Le langage JavaScript</title><link>https://www.bpesquet.fr/slides/javascript/</link><pubDate>Mon, 16 Dec 2019 21:50:46 +0100</pubDate><guid>https://www.bpesquet.fr/slides/javascript/</guid><description>&lt;h2 id="sommaire" >Sommaire
&lt;span>
&lt;a href="#sommaire">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;ul>
&lt;li>Pourquoi JavaScript ?&lt;/li>
&lt;li>Syntaxe du langage&lt;/li>
&lt;li>Environnement de travail&lt;/li>
&lt;li>TypeScript&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="pourquoi-javascript-" >Pourquoi JavaScript ?
&lt;span>
&lt;a href="#pourquoi-javascript-">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;hr>
&lt;h3 id="javascript-is-eating-the-world" >JavaScript is eating the world
&lt;span>
&lt;a href="#javascript-is-eating-the-world">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;p>&lt;img src="images/thus-javascript-is-eating-the-world.jpg" alt="JS is eating the world">&lt;/p>
&lt;hr>
&lt;h3 id="un-pré-requis-essentiel" >Un pré-requis essentiel
&lt;span>
&lt;a href="#un-pr%c3%a9-requis-essentiel">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;p>La majorité des solutions mobiles multi-plateformes est basée sur JavaScript.&lt;/p>
&lt;p>&lt;img src="images/mobile_logos.png" alt="Frameworks multi-plateformes">&lt;/p>
&lt;hr>
&lt;h3 id="un-langage-modernisé" >Un langage modernisé
&lt;span>
&lt;a href="#un-langage-modernis%c3%a9">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;p>JavaScript est normalisé sous le nom &lt;strong>ECMAScript&lt;/strong>.&lt;/p>
&lt;p>&lt;img src="images/js_history.png" alt="ECMAScript releases">&lt;/p>
&lt;p>La norme &lt;strong>ES2015&lt;/strong> (ou ES6) a apporté de très nombreuses améliorations au langage.&lt;/p>
&lt;hr>
&lt;h2 id="syntaxe-du-langage" >Syntaxe du langage
&lt;span>
&lt;a href="#syntaxe-du-langage">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;hr>
&lt;h3 id="déclaration-de-variables" >Déclaration de variables
&lt;span>
&lt;a href="#d%c3%a9claration-de-variables">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;p>JavaScript est un langage à typage &lt;strong>dynamique&lt;/strong>.&lt;/p>
&lt;p>&lt;code>let&lt;/code> et &lt;code>const&lt;/code> remplacent avantageusement &lt;code>var&lt;/code> pour la déclaration des variables.&lt;/p>
&lt;p>La valeur d&amp;rsquo;une variable déclarée avec &lt;code>const&lt;/code> ne peut plus être modifiée.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">let&lt;/span> a = &lt;span style="color:#0086f7;font-weight:bold">3.14&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>a = &lt;span style="color:#0086f7;font-weight:bold">6.28&lt;/span>; &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// OK
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> b = &lt;span style="color:#0086f7;font-weight:bold">3.14&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>b = &lt;span style="color:#0086f7;font-weight:bold">6.28&lt;/span>; &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Erreur!
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="chaînes-de-caractères" >Chaînes de caractères
&lt;span>
&lt;a href="#cha%c3%aenes-de-caract%c3%a8res">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;p>Créées avec des guillemets simples (&lt;code>'...'&lt;/code>) ou doubles (&lt;code>&amp;quot;...&amp;quot;&lt;/code>).&lt;/p>
&lt;p>&lt;strong>Litéraux de modèle&lt;/strong>: chaînes créées entre &lt;em>backticks&lt;/em> (`) et permettant d&amp;rsquo;intégrer des expressions.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> country = &lt;span style="color:#0086d2">&amp;#34;France&amp;#34;&lt;/span>; &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// or &amp;#39;France&amp;#39;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>console.log(&lt;span style="color:#0086d2">`I live in &lt;/span>&lt;span style="color:#0086d2">${&lt;/span>country&lt;span style="color:#0086d2">}&lt;/span>&lt;span style="color:#0086d2">`&lt;/span>); &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// &amp;#34;I live in France&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="déclaration-de-fonctions" >Déclaration de fonctions
&lt;span>
&lt;a href="#d%c3%a9claration-de-fonctions">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">function&lt;/span> sayHello(name) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> message = &lt;span style="color:#0086d2">`Hello, &lt;/span>&lt;span style="color:#0086d2">${&lt;/span>name&lt;span style="color:#0086d2">}&lt;/span>&lt;span style="color:#0086d2">!`&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">return&lt;/span> message;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>console.log(sayHello(&lt;span style="color:#0086d2">&amp;#34;Richard&amp;#34;&lt;/span>)); &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// &amp;#34;Hello, Richard!&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="expressions-fonction" >Expressions fonction
&lt;span>
&lt;a href="#expressions-fonction">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;p>Permettent de créer des fonctions anonymes.&lt;/p>
&lt;p>La valeur d&amp;rsquo;une variable JavaScript peut être une fonction.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> hello = &lt;span style="color:#fb660a;font-weight:bold">function&lt;/span> (name) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> message = &lt;span style="color:#0086d2">`Hello, &lt;/span>&lt;span style="color:#0086d2">${&lt;/span>name&lt;span style="color:#0086d2">}&lt;/span>&lt;span style="color:#0086d2">!`&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">return&lt;/span> message;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>console.log(hello(&lt;span style="color:#0086d2">&amp;#34;Richard&amp;#34;&lt;/span>)); &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// &amp;#34;Hello, Richard!&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="fonctions-fléchées" >Fonctions fléchées
&lt;span>
&lt;a href="#fonctions-fl%c3%a9ch%c3%a9es">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;p>&amp;ldquo;&lt;em>Fat arrow functions&lt;/em>&amp;rdquo;.&lt;/p>
&lt;p>Syntaxe plus concise pour créer des fonctions anonymes.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> hello = (name) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> message = &lt;span style="color:#0086d2">`Hello, &lt;/span>&lt;span style="color:#0086d2">${&lt;/span>name&lt;span style="color:#0086d2">}&lt;/span>&lt;span style="color:#0086d2">!`&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">return&lt;/span> message;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Syntaxe alternative encore plus concise
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// const hello = name =&amp;gt; `Hello, ${name}!`;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>console.log(hello(&lt;span style="color:#0086d2">&amp;#34;Richard&amp;#34;&lt;/span>)); &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// &amp;#34;Hello, Richard!&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="tableaux" >Tableaux
&lt;span>
&lt;a href="#tableaux">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;p>Plusieurs syntaxes existent pour les parcourir.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> movies = [&lt;span style="color:#0086d2">&amp;#34;The Wolf of Wall Street&amp;#34;&lt;/span>, &lt;span style="color:#0086d2">&amp;#34;Zootopia&amp;#34;&lt;/span>, &lt;span style="color:#0086d2">&amp;#34;Babysitting&amp;#34;&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>console.log(movies.length); &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// 3
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">for&lt;/span> (&lt;span style="color:#fb660a;font-weight:bold">let&lt;/span> i = &lt;span style="color:#0086f7;font-weight:bold">0&lt;/span>; i &amp;lt; movies.length; i++) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Use movies[i] to access each array element one by one
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>movies.forEach((movie) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Use movie to access each array element one by one
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>});
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">for&lt;/span> (&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> movie &lt;span style="color:#fb660a;font-weight:bold">of&lt;/span> movies) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Use movie to access each array element one by one
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="objets" >Objets
&lt;span>
&lt;a href="#objets">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;ul>
&lt;li>JavaScript permet de créer des objets sans classe!&lt;/li>
&lt;li>Un &lt;strong>objet litéral&lt;/strong> JavaScript est défini grâce à des accolades &lt;code>{...}&lt;/code>.&lt;/li>
&lt;li>Il regroupe un ensemble de &lt;strong>propriétés&lt;/strong> (paires nom/valeur).&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Création d&amp;#39;un objet litéral
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> pen = {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> type: &lt;span style="color:#0086d2">&amp;#34;ballpoint&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> color: &lt;span style="color:#0086d2">&amp;#34;blue&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> brand: &lt;span style="color:#0086d2">&amp;#34;Bic&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Modifcation de la valeur d&amp;#39;une propriété
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>pen.color = &lt;span style="color:#0086d2">&amp;#34;red&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>console.log(pen.type); &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// &amp;#34;ballpoint&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>console.log(pen.color); &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// &amp;#34;red&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>console.log(pen.brand); &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// &amp;#34;Bic&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="création-dobjets-à-partir-de-variables" >Création d&amp;rsquo;objets à partir de variables
&lt;span>
&lt;a href="#cr%c3%a9ation-dobjets-%c3%a0-partir-de-variables">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> firstName = &lt;span style="color:#0086d2">&amp;#34;Baptiste&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> lastName = &lt;span style="color:#0086d2">&amp;#34;Pesquet&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> twitterHandle = &lt;span style="color:#0086d2">&amp;#34;@bpesquet&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> teacher = { firstName, lastName, twitterHandle };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>console.log(teacher.firstName); &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// &amp;#34;Baptiste&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>console.log(teacher.lastName); &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// &amp;#34;Pesquet&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>console.log(teacher.twitterHandle); &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// &amp;#34;@bpesquet&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="déstructuration-dobjets" >Déstructuration d&amp;rsquo;objets
&lt;span>
&lt;a href="#d%c3%a9structuration-dobjets">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> pen = {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> type: &lt;span style="color:#0086d2">&amp;#34;ballpoint&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> color: &lt;span style="color:#0086d2">&amp;#34;blue&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> brand: &lt;span style="color:#0086d2">&amp;#34;Bic&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Accès à 2 des propriétés de l&amp;#39;objet
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> { color, brand } = pen;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>console.log(color); &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// &amp;#34;blue&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>console.log(brand); &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// &amp;#34;Bic&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="déstructuration-de-tableaux" >Déstructuration de tableaux
&lt;span>
&lt;a href="#d%c3%a9structuration-de-tableaux">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> primaryColors = [&lt;span style="color:#0086d2">&amp;#34;red&amp;#34;&lt;/span>, &lt;span style="color:#0086d2">&amp;#34;green&amp;#34;&lt;/span>, &lt;span style="color:#0086d2">&amp;#34;blue&amp;#34;&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> [red, green, blue] = primaryColors;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>console.log(red); &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// &amp;#34;red&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>console.log(green); &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// &amp;#34;red&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>console.log(blue); &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// &amp;#34;blue&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="opérateur-de-décomposition-_spread_" >Opérateur de décomposition (&amp;quot;&lt;em>spread&lt;/em>&amp;quot;)
&lt;span>
&lt;a href="#op%c3%a9rateur-de-d%c3%a9composition-_spread_">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;p>Permet de développer une valeur itérable (chaîne, tableau&amp;hellip;).&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> chaine = &lt;span style="color:#0086d2">&amp;#34;foo bar&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>console.log(chaine); &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// &amp;#34;foo bar&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>console.log([...chaine]); &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// [&amp;#34;f&amp;#34;, &amp;#34;o&amp;#34;, &amp;#34;o&amp;#34;, &amp;#34; &amp;#34;, &amp;#34;b&amp;#34;, &amp;#34;a&amp;#34;, &amp;#34;r&amp;#34;]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> numbers = [&lt;span style="color:#0086d2">&amp;#34;one&amp;#34;&lt;/span>, &lt;span style="color:#0086d2">&amp;#34;two&amp;#34;&lt;/span>, &lt;span style="color:#0086d2">&amp;#34;three&amp;#34;&lt;/span>, &lt;span style="color:#0086d2">&amp;#34;four&amp;#34;&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> [one, two, ...rest] = numbers;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>console.log(one); &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// &amp;#34;one&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>console.log(two); &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// &amp;#34;two&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>console.log(rest); &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// [&amp;#34;three&amp;#34;, &amp;#34;four&amp;#34;]
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="notion-de-méthode" >Notion de méthode
&lt;span>
&lt;a href="#notion-de-m%c3%a9thode">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;p>La valeur d&amp;rsquo;une propriété peut être une donnée ou une fonction. Dans le second cas, la propriété est une &lt;strong>méthode&lt;/strong>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> aurora = {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: &lt;span style="color:#0086d2">&amp;#34;Aurora&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> health: &lt;span style="color:#0086f7;font-weight:bold">150&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> strength: &lt;span style="color:#0086f7;font-weight:bold">25&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Renvoie la description du personnage
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> describe() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">return&lt;/span> &lt;span style="color:#0086d2">`&lt;/span>&lt;span style="color:#0086d2">${&lt;/span>&lt;span style="color:#fb660a;font-weight:bold">this&lt;/span>.name&lt;span style="color:#0086d2">}&lt;/span>&lt;span style="color:#0086d2"> has &lt;/span>&lt;span style="color:#0086d2">${&lt;/span>&lt;span style="color:#fb660a;font-weight:bold">this&lt;/span>.health&lt;span style="color:#0086d2">}&lt;/span>&lt;span style="color:#0086d2"> health points
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#0086d2"> and &lt;/span>&lt;span style="color:#0086d2">${&lt;/span>&lt;span style="color:#fb660a;font-weight:bold">this&lt;/span>.strength&lt;span style="color:#0086d2">}&lt;/span>&lt;span style="color:#0086d2"> as strength`&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="classes" >Classes
&lt;span>
&lt;a href="#classes">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">class&lt;/span> Character {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> constructor(name, health, strength) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">this&lt;/span>.name = name;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">this&lt;/span>.health = health;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">this&lt;/span>.strength = strength;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> describe() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">return&lt;/span> &lt;span style="color:#0086d2">`&lt;/span>&lt;span style="color:#0086d2">${&lt;/span>&lt;span style="color:#fb660a;font-weight:bold">this&lt;/span>.name&lt;span style="color:#0086d2">}&lt;/span>&lt;span style="color:#0086d2"> has &lt;/span>&lt;span style="color:#0086d2">${&lt;/span>&lt;span style="color:#fb660a;font-weight:bold">this&lt;/span>.health&lt;span style="color:#0086d2">}&lt;/span>&lt;span style="color:#0086d2"> health points
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#0086d2"> and &lt;/span>&lt;span style="color:#0086d2">${&lt;/span>&lt;span style="color:#fb660a;font-weight:bold">this&lt;/span>.strength&lt;span style="color:#0086d2">}&lt;/span>&lt;span style="color:#0086d2"> as strength`&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> aurora = &lt;span style="color:#fb660a;font-weight:bold">new&lt;/span> Character(&lt;span style="color:#0086d2">&amp;#34;Aurora&amp;#34;&lt;/span>, &lt;span style="color:#0086f7;font-weight:bold">150&lt;/span>, &lt;span style="color:#0086f7;font-weight:bold">25&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>console.log(aurora.describe());
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="modules-et-imports" >Modules et imports
&lt;span>
&lt;a href="#modules-et-imports">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;p>JavaScript supporte la notion de &lt;strong>module&lt;/strong> pour factoriser des éléments réutilisables.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Importe l&amp;#39;élément exporté par défaut par le module
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> React from &lt;span style="color:#0086d2">&amp;#34;react-native&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Importe d&amp;#39;autres éléments exportés grâce à leur nom
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> { View, Text, Image } from &lt;span style="color:#0086d2">&amp;#34;react-native&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Importe à la fois l&amp;#39;élément par défaut et d&amp;#39;autres éléments
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> React, { View, Text, Image } from &lt;span style="color:#0086d2">&amp;#34;react-native&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="programmation-asynchrone" >Programmation asynchrone
&lt;span>
&lt;a href="#programmation-asynchrone">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;p>JavaScript supporte la programmation asynchrone basée sur des &lt;strong>promesses&lt;/strong> (&lt;em>promises&lt;/em>). Une promesse représente une opération dont le résultat n&amp;rsquo;est pas encore disponible.&lt;/p>
&lt;p>La programmation asynchrone évite de bloquer le &lt;em>thread&lt;/em> courant en cas d&amp;rsquo;opération longue ou incertaine, comme par exemple un appel réseau.&lt;/p>
&lt;hr>
&lt;h3 id="fonctionnement-dune-promesse" >Fonctionnement d&amp;rsquo;une promesse
&lt;span>
&lt;a href="#fonctionnement-dune-promesse">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;p>&lt;a href="https://javascript.info/promise-basics">&lt;img src="images/promise.png" alt="Promise">&lt;/a>&lt;/p>
&lt;p>Le mot-clé &lt;code>then()&lt;/code> permet de définir le traitement de la promesse sous la forme d&amp;rsquo;une fonction.&lt;/p>
&lt;hr>
&lt;h3 id="exemple-dutilisation-dune-promessehttpscodepeniobpesquetpenvyepwjreditors0012" >&lt;a href="https://codepen.io/bpesquet/pen/vYePWjr?editors=0012">Exemple d&amp;rsquo;utilisation d&amp;rsquo;une promesse&lt;/a>
&lt;span>
&lt;a href="#exemple-dutilisation-dune-promessehttpscodepeniobpesquetpenvyepwjreditors0012">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">function&lt;/span> resolveAfter2Seconds() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">return&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">new&lt;/span> Promise((resolve) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Wait for 2 seconds before resolving promise
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> setTimeout(() =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> resolve(&lt;span style="color:#0086d2">&amp;#34;Success!&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }, &lt;span style="color:#0086f7;font-weight:bold">2000&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> });
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Doesn&amp;#39;t work: result is not yet available!
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>console.log(resolveAfter2Seconds());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Wait for the result to be available, then output it
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>resolveAfter2Seconds().then((result) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> console.log(result); &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// &amp;#34;Success!&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>});
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="async-et-await" >async et await
&lt;span>
&lt;a href="#async-et-await">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;p>Le mot-clé &lt;code>await&lt;/code> interrompt l&amp;rsquo;exécution (sans bloquer le &lt;em>thread&lt;/em> courant) jusqu&amp;rsquo;à ce que le résultat d&amp;rsquo;une promesse soit disponible. Les fonctions utilisant &lt;code>await&lt;/code> doivent être déclarées avec le mot-clé &lt;code>async&lt;/code>.&lt;/p>
&lt;p>&lt;code>async&lt;/code> et &lt;code>await&lt;/code> constituent une syntaxe alternative pour les appels asynchrones en JavaScript.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Wait for the result to be available, then output it
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>&lt;span style="color:#fb660a;font-weight:bold">async&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">function&lt;/span> asyncCall() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> result = &lt;span style="color:#fb660a;font-weight:bold">await&lt;/span> resolveAfter2Seconds();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> console.log(result); &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// &amp;#34;Success!&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>asyncCall();
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="plus-de-détails-sur-javascript" >Plus de détails sur JavaScript
&lt;span>
&lt;a href="#plus-de-d%c3%a9tails-sur-javascript">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;p>&lt;a href="https://developer.mozilla.org/fr/docs/Web/JavaScript">Mozilla Developer Network&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://thejsway.net">The JavaScript Way&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://github.com/getify/You-Dont-Know-JS">You Don&amp;rsquo;t Know JS Yet&lt;/a>&lt;/p>
&lt;hr>
&lt;h2 id="environnement-de-travail" >Environnement de travail
&lt;span>
&lt;a href="#environnement-de-travail">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;hr>
&lt;p>&lt;img src="images/node-logo.png" alt="Node logo">&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Plate-forme JavaScript basée sur le moteur d&amp;rsquo;exécution V8 de Chrome.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Permet de créer des applications JS hors du navigateur (serveur, mobile, etc).&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Supporte un riche écosystème de librairies en tout genre installables sous forme de &lt;strong>packages&lt;/strong>.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="gestion-des-dépendances" >Gestion des dépendances
&lt;span>
&lt;a href="#gestion-des-d%c3%a9pendances">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;p>Le standard historique est &lt;a href="https://www.npmjs.com/">npm&lt;/a>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>npm init &lt;span style="color:#080;background-color:#0f140f;font-style:italic"># Create a minimal package.json file&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic"># Shorter version: npm i {package name}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>npm install {package name} &lt;span style="color:#080;background-color:#0f140f;font-style:italic"># Install {package name} locally&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>npm install -g {package name} &lt;span style="color:#080;background-color:#0f140f;font-style:italic"># Install {package name} globally&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>npm install &lt;span style="color:#080;background-color:#0f140f;font-style:italic"># Install all packages listed in package.json&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>npm update &lt;span style="color:#080;background-color:#0f140f;font-style:italic"># Update local packages to latest version&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>npm update -g &lt;span style="color:#080;background-color:#0f140f;font-style:italic"># Update global packages to latest version&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>npm list &lt;span style="color:#080;background-color:#0f140f;font-style:italic"># List locally installed packages&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>npm list -g &lt;span style="color:#080;background-color:#0f140f;font-style:italic"># List globally installed packages&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic"># Execute a command from a package&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>npx {command} {command-arg}...
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Autre possibilité : &lt;a href="https://yarnpkg.com/lang/en/">yarn&lt;/a> (plus récent).&lt;/p>
&lt;hr>
&lt;h3 id="le-fichier-packagejson" >Le fichier package.json
&lt;span>
&lt;a href="#le-fichier-packagejson">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;ul>
&lt;li>Associé à un fichier verrou &lt;code>package-lock.json&lt;/code>.&lt;/li>
&lt;li>Utilisé par &lt;strong>npm/yarn&lt;/strong> pour télécharger et installer les dépendances dans le sous-répertoire &lt;code>node_modules/&lt;/code> du projet.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">&amp;#34;name&amp;#34;&lt;/span>: &lt;span style="color:#0086d2">&amp;#34;helloreactnative&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">&amp;#34;version&amp;#34;&lt;/span>: &lt;span style="color:#0086d2">&amp;#34;1.0.0&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">&amp;#34;main&amp;#34;&lt;/span>: &lt;span style="color:#0086d2">&amp;#34;node_modules/expo/AppEntry.js&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">&amp;#34;scripts&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">&amp;#34;start&amp;#34;&lt;/span>: &lt;span style="color:#0086d2">&amp;#34;expo start&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">&amp;#34;android&amp;#34;&lt;/span>: &lt;span style="color:#0086d2">&amp;#34;expo start --android&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">&amp;#34;ios&amp;#34;&lt;/span>: &lt;span style="color:#0086d2">&amp;#34;expo start --ios&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">&amp;#34;web&amp;#34;&lt;/span>: &lt;span style="color:#0086d2">&amp;#34;expo start --web&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">&amp;#34;dependencies&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">&amp;#34;expo&amp;#34;&lt;/span>: &lt;span style="color:#0086d2">&amp;#34;~47.0.9&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">&amp;#34;expo-status-bar&amp;#34;&lt;/span>: &lt;span style="color:#0086d2">&amp;#34;~1.4.2&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">&amp;#34;react&amp;#34;&lt;/span>: &lt;span style="color:#0086d2">&amp;#34;18.1.0&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">&amp;#34;react-native&amp;#34;&lt;/span>: &lt;span style="color:#0086d2">&amp;#34;0.70.5&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">&amp;#34;devDependencies&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">&amp;#34;@babel/core&amp;#34;&lt;/span>: &lt;span style="color:#0086d2">&amp;#34;^7.12.9&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">&amp;#34;private&amp;#34;&lt;/span>: &lt;span style="color:#fb660a;font-weight:bold">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="versionnage-des-dépendances" >Versionnage des dépendances
&lt;span>
&lt;a href="#versionnage-des-d%c3%a9pendances">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;p>Versionnage sémantique &lt;strong>X.Y.Z&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>X = version majeure (changements potentiellement non rétrocompatibles).&lt;/li>
&lt;li>Y = version mineure.&lt;/li>
&lt;li>Z = patch.&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>^1.1.1&lt;/strong> équivaut à $\geq$ 1.1.1 et $&amp;lt;$ 2.0.0&lt;/p>
&lt;p>&lt;strong>~1.1.1&lt;/strong> équivaut à $\geq$ 1.1.1 et $&amp;lt;$ 1.2.0&lt;/p>
&lt;p>&lt;strong>1.1.1&lt;/strong> cible une version exacte.&lt;/p>
&lt;hr>
&lt;h3 id="formatage-automatique-du-code" >Formatage automatique du code
&lt;span>
&lt;a href="#formatage-automatique-du-code">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;p>&lt;a href="https://prettier.io/">Prettier&lt;/a> est un outil extrêmement utile.&lt;/p>
&lt;p>&lt;a href="https://prettier.io/">&lt;img src="images/prettier-logo-light.png" alt="Prettier logo">&lt;/a>&lt;/p>
&lt;hr>
&lt;h3 id="analyse-du-code" >Analyse du code
&lt;span>
&lt;a href="#analyse-du-code">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;p>&lt;a href="https://eslint.org/">ESLint&lt;/a> est l&amp;rsquo;outil le plus utilisé. Sa configuration se fait via un fichier &lt;code>.eslintrc.json&lt;/code> stocké à la racine du projet.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">&amp;#34;root&amp;#34;&lt;/span>: &lt;span style="color:#fb660a;font-weight:bold">true&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">&amp;#34;env&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">&amp;#34;node&amp;#34;&lt;/span>: &lt;span style="color:#fb660a;font-weight:bold">true&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">&amp;#34;es2016&amp;#34;&lt;/span>: &lt;span style="color:#fb660a;font-weight:bold">true&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">&amp;#34;browser&amp;#34;&lt;/span>: &lt;span style="color:#fb660a;font-weight:bold">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">&amp;#34;rules&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">&amp;#34;no-console&amp;#34;&lt;/span>: &lt;span style="color:#0086f7;font-weight:bold">0&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">&amp;#34;eqeqeq&amp;#34;&lt;/span>: &lt;span style="color:#0086d2">&amp;#34;warn&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">&amp;#34;no-cond-assign&amp;#34;&lt;/span>: &lt;span style="color:#0086f7;font-weight:bold">0&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">&amp;#34;no-unused-vars&amp;#34;&lt;/span>: &lt;span style="color:#0086f7;font-weight:bold">1&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">&amp;#34;no-extra-semi&amp;#34;&lt;/span>: &lt;span style="color:#0086d2">&amp;#34;warn&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">&amp;#34;semi&amp;#34;&lt;/span>: &lt;span style="color:#0086d2">&amp;#34;warn&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">&amp;#34;extends&amp;#34;&lt;/span>: &lt;span style="color:#0086d2">&amp;#34;eslint:recommended&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">&amp;#34;parserOptions&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">&amp;#34;ecmaFeatures&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">&amp;#34;experimentalObjectRestSpread&amp;#34;&lt;/span>: &lt;span style="color:#fb660a;font-weight:bold">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="transpilation-du-code" >Transpilation du code
&lt;span>
&lt;a href="#transpilation-du-code">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;ul>
&lt;li>&lt;a href="https://babeljs.io/">Babel&lt;/a> transforme le code JavaScript ES2015+ en code ES5 compatible avec tous les environnements d&amp;rsquo;exécution JS.&lt;/li>
&lt;li>Il permet d&amp;rsquo;utiliser sereinement les dernières évolutions du langage.&lt;/li>
&lt;li>Il est utilisé en arrière-plan par de nombreux outils de l&amp;rsquo;écosystème JS.&lt;/li>
&lt;/ul>
&lt;p>&lt;a href="https://babeljs.io/">&lt;img src="images/Babel-Javascript-compiler.png" alt="Babel logo">&lt;/a>&lt;/p>
&lt;hr>
&lt;h2 id="typescript" >TypeScript
&lt;span>
&lt;a href="#typescript">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;hr>
&lt;h3 id="des-types-pour-javascript" >Des types pour JavaScript
&lt;span>
&lt;a href="#des-types-pour-javascript">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;p>&lt;a href="https://www.typescriptlang.org/">TypeScript&lt;/a> est un sur-ensemble syntaxique de JavaScript qui permet un typage statique optionnel du code.&lt;/p>
&lt;p>Créé à l&amp;rsquo;origine par Microsoft, il est libre et open source.&lt;/p>
&lt;p>&lt;img src="images/typescript.png" alt="TypeScript logo">&lt;/p>
&lt;hr>
&lt;h3 id="installation-et-utilisation" >Installation et utilisation
&lt;span>
&lt;a href="#installation-et-utilisation">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;p>TS est supporté par la plupart des éditeurs de code.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic"># Install TypeScript globally&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>npm i -g typescript
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic"># The TS compiler produces a pure JS version of the TS file&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>tsc my_typescript_file.ts
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="annotations-de-type" >Annotations de type
&lt;span>
&lt;a href="#annotations-de-type">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;p>Elles permettent de préciser les &lt;em>contrats&lt;/em> des fonctions ou des méthodes.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-ts" data-lang="ts">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// This function is meant to receive an input of type string
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>&lt;span style="color:#fb660a;font-weight:bold">function&lt;/span> hello(person: &lt;span style="color:#cdcaa9;font-weight:bold">string&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">return&lt;/span> &lt;span style="color:#0086d2">&amp;#34;Hello, &amp;#34;&lt;/span> + person;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> user = &lt;span style="color:#0086d2">&amp;#34;Jane Doe&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Uncomment to see TS error checking in action
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">//const user = [0, 1, 2];
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>console.log(hello(user)); &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// &amp;#34;Hello, Jane Doe&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="interfaces" >Interfaces
&lt;span>
&lt;a href="#interfaces">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;p>Elles permettent de définir des structures de données complexes.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-ts" data-lang="ts">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Describes objects that have a firstName and lastName field
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>&lt;span style="color:#fb660a;font-weight:bold">interface&lt;/span> Person {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> firstName: &lt;span style="color:#cdcaa9;font-weight:bold">string&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> lastName: &lt;span style="color:#cdcaa9;font-weight:bold">string&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">function&lt;/span> hello(person: &lt;span style="color:#cdcaa9;font-weight:bold">Person&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">return&lt;/span> &lt;span style="color:#0086d2">&amp;#34;Hello, &amp;#34;&lt;/span> + person.firstName + &lt;span style="color:#0086d2">&amp;#34; &amp;#34;&lt;/span> + person.lastName;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// ... (see next slides)
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="duck-typing" >Duck typing
&lt;span>
&lt;a href="#duck-typing">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;blockquote>
&lt;p>&amp;ldquo;If it walks like a duck and quacks like a duck, then it must be a duck.&amp;rdquo;&lt;/p>
&lt;/blockquote>
&lt;p>TS se base sur la structure concrète des objets, et non sur l&amp;rsquo;implémentation explicite d&amp;rsquo;une interface.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-ts" data-lang="ts">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// This object is structurally compatible with the Person interface
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> user = { firstName: &lt;span style="color:#0086d2">&amp;#34;Jane&amp;#34;&lt;/span>, lastName: &lt;span style="color:#0086d2">&amp;#34;Doe&amp;#34;&lt;/span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>console.log(hello(user)); &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// &amp;#34;Hello, Jane Doe&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="définition-de-classes" >Définition de classes
&lt;span>
&lt;a href="#d%c3%a9finition-de-classes">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;p>TS supporte les définitions de classes apportées par les versions ES2015+ de JS.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-ts" data-lang="ts">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">class&lt;/span> Student {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> fullName: &lt;span style="color:#cdcaa9;font-weight:bold">string&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// The public argument implicitly creates properties
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">constructor&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">public&lt;/span> firstName: &lt;span style="color:#cdcaa9;font-weight:bold">string&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">public&lt;/span> middleInitial: &lt;span style="color:#cdcaa9;font-weight:bold">string&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">public&lt;/span> lastName: &lt;span style="color:#cdcaa9;font-weight:bold">string&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">this&lt;/span>.fullName = firstName + &lt;span style="color:#0086d2">&amp;#34; &amp;#34;&lt;/span> + middleInitial + &lt;span style="color:#0086d2">&amp;#34; &amp;#34;&lt;/span> + lastName;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="utilisation-de-classes" >Utilisation de classes
&lt;span>
&lt;a href="#utilisation-de-classes">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;p>Classes et interfaces TS sont compatibles. Le développeur peut ainsi choisir le bon niveau d&amp;rsquo;abstraction.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-ts" data-lang="ts">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> user = &lt;span style="color:#fb660a;font-weight:bold">new&lt;/span> Student(&lt;span style="color:#0086d2">&amp;#34;Jane&amp;#34;&lt;/span>, &lt;span style="color:#0086d2">&amp;#34;M.&amp;#34;&lt;/span>, &lt;span style="color:#0086d2">&amp;#34;Doe&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>console.log(hello(user)); &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// &amp;#34;Hello, Jane Doe&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>How to launch your own open source book that’s popular and profitable</title><link>https://www.bpesquet.fr/posts/how-to-launch-your-own-open-source-book/</link><pubDate>Tue, 03 Oct 2017 20:29:18 +0000</pubDate><guid>https://www.bpesquet.fr/posts/how-to-launch-your-own-open-source-book/</guid><description>&lt;p>&lt;img src="images/1.jpeg" alt="A Soyuz rocket launched from the Baikonur cosmodrome in Kazakhstan">&lt;/p>
&lt;p>I am the author of &lt;a href="https://github.com/bpesquet/thejsway">The JavaScript Way&lt;/a>, a self-published open source book for learning to code. Despite the lack of any initial audience, it topped GitHub trending charts worldwide during its launch.&lt;/p>
&lt;p>This is the story of this unexpected success.&lt;/p>
&lt;h2 id="project-inception" >Project inception
&lt;span>
&lt;a href="#project-inception">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;p>At the beginning of this project, I &lt;a href="https://www.bpesquet.fr/posts/walk-this-javascript-way/">explained&lt;/a> why I started it and went over some of my initial choices. In short:&lt;/p>
&lt;ul>
&lt;li>There was a need for a book teaching modern JavaScript to beginners.&lt;/li>
&lt;li>I decided to self-publish this book and write it in the open on &lt;a href="https://github.com">GitHub&lt;/a>. Doing so, I was hoping to reach as many people as possible. Also, to leverage the great &lt;a href="https://en.wikipedia.org/wiki/Open-source_model">collaborative model&lt;/a> that is at the heart of open source.&lt;/li>
&lt;li>The book would have a Creative Commons &lt;a href="https://creativecommons.org/licenses/by-nc-sa/4.0/">BY-NC-SA&lt;/a> license. It allows anyone to share or build upon my work as long as some rules are observed. In particular, no commercial purposes outside of mine are allowed.&lt;/li>
&lt;/ul>
&lt;p>Also, some key factors in the decision were:&lt;/p>
&lt;ul>
&lt;li>Text is still a great medium to convey knowledge. So, the choice of a book instead of some video-based material.&lt;/li>
&lt;li>I already authored two online courses on the same topic (&lt;a href="https://openclassrooms.com/courses/learn-the-basics-of-javascript">here&lt;/a> and &lt;a href="https://openclassrooms.com/courses/use-javascript-on-the-web">there&lt;/a>). The feedback for them has been very positive, so I knew that I had some pretty solid content at hand.&lt;/li>
&lt;li>I wanted to hone my JavaScript skills, and knew firsthand that teaching something is a great way to master it.&lt;/li>
&lt;/ul>
&lt;p>What I lacked was an initial audience, something often seen as a critical asset for this kind of project. Since someone has to start somewhere, I went on anyway.&lt;/p>
&lt;h2 id="choosing-a-business-model" >Choosing a business model
&lt;span>
&lt;a href="#choosing-a-business-model">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;p>Every creator faces the same dilemma. How to share your work with the world that would make an impact and also be profitable? There is no definitive answer to this age-old question.&lt;/p>
&lt;p>The digital revolution has turned things upside down for authors. It has lowered the distribution and sharing costs to zero. In our “reputation economy”, content creators must battle to gain consumer attention. As a new player in this field, meeting success will be very difficult if all your content sits behind a paywall. Some of it &lt;em>has&lt;/em> to be available for free.&lt;/p>
&lt;p>For authors, the most common marketing tactic is now to split your work into several parts. The first one free, gives potential customers a glimpse of your content and style. In the hope that hooked up customers will buy the other parts.&lt;/p>
&lt;p>Kyle Simpson’s alternative &lt;a href="https://github.com/getify/You-Dont-Know-JS/blob/master/CONTRIBUTING.md#reading-experience-chaptersection-links-etc">choice&lt;/a> for its quite successful &lt;a href="https://github.com/getify/You-Dont-Know-JS">You Don’t Know JS&lt;/a> book series appealed to me. Like him, I decided to give away the entire book content for free, but let users pay for a better reading experience through the ebook version.&lt;/p>
&lt;p>Taking example from &lt;a href="https://leanpub.com/rprogramming">another self-published bestseller&lt;/a>, I chose to include coding exercises and projects right into the book, but sell their solutions as an extra.&lt;/p>
&lt;p>This “hybrid” business model seemed a reasonable balance between openness and potential profit.&lt;/p>
&lt;h2 id="building-an-audience-or-not" >Building an audience (or not)
&lt;span>
&lt;a href="#building-an-audience-or-not">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;p>Another common marketing advice is building some audience through a mailing list, using some existing content (for example, your own blog) as a magnet.&lt;/p>
&lt;p>I don’t like this approach very much and didn’t want to bother my readers with any subscription.&lt;/p>
&lt;p>I also considered launching a crowdfunding campaign. Without any initial audience, this seemed to me as a lot of work for a very uncertain outcome, so I shied away from it. Maybe next time!&lt;/p>
&lt;h2 id="tools-and-process" >Tools and process
&lt;span>
&lt;a href="#tools-and-process">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;p>The very best file format for authoring &lt;em>any&lt;/em> book (not only technical ones) is &lt;strong>plain text&lt;/strong>. No need for a dedicated editor. No interoperability issue. The ability to use a &lt;a href="https://en.wikipedia.org/wiki/Version_control">version control&lt;/a> system like &lt;a href="https://git-scm.com/">Git&lt;/a> to keep track of changes.&lt;/p>
&lt;p>Among the various text-based markup languages available. I chose &lt;a href="https://en.wikipedia.org/wiki/Markdown">Markdown&lt;/a> because I already knew and liked its syntax. Markdown is also a first-class citizen on GitHub, which was essential for this project.&lt;/p>
&lt;p>A self-published author needs a toolchain to transform the raw manuscript files into various ebook formats (PDF, EPUB, MOBI). For me, the &lt;a href="https://leanpub.com">Leanpub&lt;/a> platform ticked all the boxes: Markdown support, integration with GitHub and a fair royalty structure (90% minus 50 cents per sale).&lt;/p>
&lt;p>I used the free text editor &lt;a href="https://code.visualstudio.com/">Visual Studio Code&lt;/a> for authoring the book files on my computer. It has great Markdown support out of the box and a very convenient side-by-side file preview (see image below). Extensions like &lt;a href="https://marketplace.visualstudio.com/items?itemName=mdickin.markdown-shortcuts">Markdown Shortcuts&lt;/a> and &lt;a href="https://marketplace.visualstudio.com/items?itemName=DavidAnson.vscode-markdownlint">markdownlint&lt;/a> can be installed to become even more productive.&lt;/p>
&lt;p>&lt;img src="images/2.png" alt="image">&lt;/p>
&lt;p>After all tools were chosen, I drafted the book outline (a very important first step) using my previous courses as a basis. Then I dived into the writing process.&lt;/p>
&lt;h2 id="early-publishing" >Early publishing
&lt;span>
&lt;a href="#early-publishing">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;p>Leanpub’s motto is “Publish early, publish often”. The platform empowers you to publish early drafts of your work. Receive feedback and create traction, enabling an &lt;a href="https://en.wikipedia.org/wiki/Minimum_viable_product">MVP&lt;/a>-like approach to book authoring.&lt;/p>
&lt;p>It’s a great idea on paper… Which unfortunately didn’t work at all for me. One month after the writing process started, I made the book public on Leanpub. By that time, the ebook price was $0, so anyone could get it for free.&lt;/p>
&lt;p>I told my personal network about it, &lt;a href="https://twitter.com/bpesquet/status/836354787616641024">twitted&lt;/a> about it, submitted it to &lt;a href="https://www.reddit.com/r/javascript/comments/5wmw8q/the_javascript_way_a_new_book_for_learning_modern/">Reddit&lt;/a> and &lt;a href="https://news.ycombinator.com/item?id=13749641">Hacker News&lt;/a>. I also reached out to other book authors or prominent individuals. I also reached out to Kyle Simpson, &lt;a href="https://www.robinwieruch.de/">Robin Wieruch&lt;/a> and freeCodeCamp’s &lt;a href="https://twitter.com/ossia">Quincy Larson&lt;/a>, looking for advice and support.&lt;/p>
&lt;p>The outcome was a mixed bag. A few GitHub stars, a handful of messages on Twitter and Reddit. An HN thread that went out-of-topic and got buried. Execution was poor, the lack of any initial audience was too much of a disadvantage there.&lt;/p>
&lt;p>A majority of comments were like “Ping me back when it’s finished”. People may not want to invest time to read in-progress books, which is understandable after all.&lt;/p>
&lt;p>But, individual responses from Kyle, Robin and Quincy were hearthwarming. They played a big role in keeping me motivated. I’m very thankful to them.&lt;/p>
&lt;h2 id="the-writing-phase" >The writing phase
&lt;span>
&lt;a href="#the-writing-phase">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;p>Even after this underwhelming early launch, I was still convinced that my book was worth something. I didn’t want to give up after having already spent dozens of hours on it. Using an unchanged book outline, I went for a no-feedback route and kept on writing all by myself until the book got finished.&lt;/p>
&lt;p>That was the hardest part. Spending countless hours, day after day, only to see things take shape very slow. Inevitably, doubts surface: how could it ever succeed? Is this all a giant waste of time? Why am I inflicting this to myself?&lt;/p>
&lt;p>The key to overcome these obstacles is &lt;strong>putting the right amount of pressure on yourself&lt;/strong>. If your time commitment is too scarce, you will lose motivation and give up. But, trying to move forward too fast, neglecting other important aspects of your life along the way, is risky on many levels.&lt;/p>
&lt;p>After all, this was only a side project. Low risk, low pressure! Self-publishing means I had no deadlines to meet, which can be both a blessing and a curse. I tried to use this to my advantage: I was free to invest time in something I believed into, but at my own pace.&lt;/p>
&lt;p>I found a reasonable balance (about 10–15 hours a week) between work, personal life and the writing process. Limited long and hazardous breaks. This &lt;a href="https://open.buffer.com/side-projects-creative-hobbies/">article on side projects&lt;/a> gives useful advice to keep things going during this phase.&lt;/p>
&lt;p>&lt;img src="images/3.png" alt="My commit statistics on GitHub during the writing phase">&lt;/p>
&lt;p>Luckily, I had some existing material to build upon. Some experience writing content on my own… And also a very understanding spouse ;)&lt;/p>
&lt;h2 id="launch-day" >Launch day!
&lt;span>
&lt;a href="#launch-day">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;p>After eight months of steady work and a few last hours feverishly spent fixing things here and there, my book was ready at last!&lt;/p>
&lt;p>The upside of writing in a vacuum like I did is that your book launch becomes a pretty big event. After such a huge time investment, it’s a great feeling (and also a huge relief) to show your finished creation to the world.&lt;/p>
&lt;p>For lack of anything better, I reused my previous launch strategy. &lt;a href="https://twitter.com/bpesquet/status/890564975596630017">Twitter&lt;/a>, &lt;a href="https://www.reddit.com/r/javascript/comments/6poszc/the_javascript_way_a_new_book_for_learning_modern/">Reddit&lt;/a> and &lt;a href="https://news.ycombinator.com/item?id=14865043">Hacker News&lt;/a> (&lt;a href="https://www.quora.com/When-is-the-best-time-to-post-on-Hacker-News-to-get-and-stay-long-on-the-front-page">timing submissions&lt;/a> for most visibility). Also, the same nice people that kept me motivated after the early launch.&lt;/p>
&lt;p>To my astonishment, the result was this time overwhelmingly positive. Kyle Simpson and Quincy Larson kindly tweeted about the book to their dozens of thousands of followers.&lt;/p>
&lt;blockquote class="twitter-tweet">&lt;p lang="en" dir="ltr">Pretty excited about this new book by &lt;a href="https://twitter.com/bpesquet?ref_src=twsrc%5Etfw">@bpesquet&lt;/a> called &amp;quot;The JavaScript Way&amp;quot;: &lt;a href="https://t.co/lbbzQNwL4e">https://t.co/lbbzQNwL4e&lt;/a> Looks like a great companion to &lt;a href="https://twitter.com/YDKJS?ref_src=twsrc%5Etfw">@YDKJS&lt;/a>!&lt;/p>&amp;mdash; You Don&amp;#39;t Know JS Yet (@YDKJS) &lt;a href="https://twitter.com/YDKJS/status/890594260226949125?ref_src=twsrc%5Etfw">July 27, 2017&lt;/a>&lt;/blockquote>
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script>
&lt;p>Hour after hour, I watched in awe of disbelief as rave comments and retweets piled into my inbox. I finally knew that my book would have an impact.&lt;/p>
&lt;p>Launch is also the blissful moment where the magic of open source happens. People can read and share your book for free. Creating traction without any marketing effort. But they can also improve its quality through contributions using GitHub &lt;a href="https://guides.github.com/features/issues/">issues&lt;/a> and &lt;a href="https://help.github.com/articles/about-pull-requests/">pull requests&lt;/a>.&lt;/p>
&lt;p>Since I’m not an English native and didn’t have an editor by my side to proof check the content. I knew that my book contained many typos and errors at launch. I hoped people would help to spot and correct them, and wasn’t disappointed.&lt;/p>
&lt;p>Here are a few figures gathered two days after launch:&lt;/p>
&lt;ul>
&lt;li>The book repository on GitHub had more than &lt;strong>51k views&lt;/strong> from &lt;strong>17k unique visitors&lt;/strong>. The bulk of this traffic came from Hacker News, followed by Reddit.&lt;/li>
&lt;li>It gained more than &lt;strong>2,400 stars&lt;/strong>, and becoming the &lt;strong>#1 trending repo&lt;/strong>worldwide for a day.&lt;/li>
&lt;li>The Hacker News story climbed to &lt;strong>#5 rank&lt;/strong> on the front page, generating more than a hundred comments.&lt;/li>
&lt;li>Readers submitted &lt;strong>30 pull requests&lt;/strong>, correcting many of the book’s initial mistakes. Small typos for the most part, but also grammatical improvements and even a few coding errors.&lt;/li>
&lt;li>I already received &lt;strong>two translation requests&lt;/strong>, to Spanish and Chinese.&lt;/li>
&lt;/ul>
&lt;p>All in all, far more than what I could dream of.&lt;/p>
&lt;h2 id="financial-outcome" >Financial outcome
&lt;span>
&lt;a href="#financial-outcome">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;p>Can an open source book be profitable after all? Of course, it’s too soon to tell. Two days after launch, it became Leanpub’s bestselling book of the week, with more than &lt;strong>$1,000&lt;/strong> in royalties.&lt;/p>
&lt;p>&lt;img src="images/4.png" alt="Leanpub royalties dashboard two days after launch">&lt;/p>
&lt;p>Profitability was not the reason this project was started in the first place. Yet the hybrid pricing model, with free sources and paid ebook/corrections, will ultimately contribute to the book’s reputation while making for some welcome passive income.&lt;/p>
&lt;p>Later on, I may create a paperback version of the book (Maybe &lt;a href="https://www.createspace.com/">Amazon CreateSpace&lt;/a>) if there is any demand for it. An interactive online course offering a richer user experience is already under way.&lt;/p>
&lt;p>Most importantly, I have the deep satisfaction of having contributed something meaningful to the community. Thousands of people around the world will use my book to learn to code, improve at JavaScript and it may change their lives for the better.&lt;/p>
&lt;p>And that is priceless.&lt;/p>
&lt;h2 id="conclusion" >Conclusion
&lt;span>
&lt;a href="#conclusion">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;p>It wasn’t all roses, but self-publishing a successful open source book without any prior audience is definitely possible.&lt;/p>
&lt;p>I hope this little story has entertained you. I also hope it might inspire you to start a creative project on your own, be it a book or something completely different.&lt;/p>
&lt;p>I look forward to see what you will achieve!&lt;/p></description></item><item><title>Walk This (JavaScript) Way</title><link>https://www.bpesquet.fr/posts/walk-this-javascript-way/</link><pubDate>Mon, 27 Feb 2017 23:15:37 +0000</pubDate><guid>https://www.bpesquet.fr/posts/walk-this-javascript-way/</guid><description>&lt;p>&lt;img src="images/1.jpeg" alt="Run DMC and Aerosmith">&lt;/p>
&lt;p>So I’ve decided to go ahead and write a &lt;a href="https://hackernoon.com/tagged/book">book&lt;/a> about &lt;a href="https://hackernoon.com/tagged/javascript">JavaScript&lt;/a>. It’s called &lt;strong>The JavaScript Way&lt;/strong> and is available through &lt;a href="https://leanpub.com/thejsway">Leanpub&lt;/a> and &lt;a href="https://github.com/bpesquet/thejsway">GitHub&lt;/a> (more on that later).&lt;/p>
&lt;h2 id="but-why" >But… Why?
&lt;span>
&lt;a href="#but-why">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;p>It’s true there are tons of learning resources about JS. However, many are outdated and teach obsolete practices. Many others cover advanced topics like design patterns, language internals, or frameworks that are of little interest to newcomers.&lt;/p>
&lt;p>I’m starting this project because I think there is room for a beginner-centric book teaching modern JavaScript. I hope to make it a useful companion for anyone wishing to (re)discover the many facets of JS.&lt;/p>
&lt;h2 id="design-and-content" >Design and content
&lt;span>
&lt;a href="#design-and-content">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;p>The book is targeted towards JavaScript newcomers: complete beginners with no programming experience whatsoever or “switchers” coming from another language background. It won’t be a in-depth study of JavaScript (which is &lt;a href="https://github.com/getify/You-Dont-Know-JS">already existing&lt;/a>, by the way). I’ll try to keep it as beginner-friendly as possible while covering some advanced concepts and good practices.&lt;/p>
&lt;p>It was pretty obvious from the start that the book would be written entirely using the more future-proof and often easier to explain ES6/ES2015 standard. As I want to keep things simple, many tricky and primarily ES5-related topics like &lt;a href="https://developer.mozilla.org/en-US/docs/Glossary/Hoisting">hoisting&lt;/a> or &lt;a href="http://bjorn.tipling.com/all-this">&lt;em>this&lt;/em> behavior&lt;/a> won’t be covered.&lt;/p>
&lt;p>As a teacher myself, I know that real learning comes from practicing. Each book chapter will be accompanied by a series of exercises to put the newly acquired skills into practice.&lt;/p>
&lt;p>I also know that students don’t like to lose hours configuring their environment before getting their feet wet. So there won’t be any complex setup: throughout the book, all you’ll need is a JavaScript playground (&lt;a href="http://codepen.io">CodePen&lt;/a> and &lt;a href="http://gomix.com">Gomix&lt;/a> are the recommended ones) for coding along.&lt;/p>
&lt;h2 id="publication" >Publication
&lt;span>
&lt;a href="#publication">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;p>After much afterthought, I’ve decided to self-publish my book through &lt;a href="https://leanpub.com/thejsway">Leanpub&lt;/a> and to make its source code available on &lt;a href="https://github.com/bpesquet/thejsway">GitHub&lt;/a>.&lt;/p>
&lt;p>I’d like to reach as many people as possible, regardless of wealth. I also hope to leverage the open source collaborative model to improve and validate the content.&lt;/p>
&lt;p>The chosen license, Creative Commons &lt;a href="https://creativecommons.org/licenses/by-nc-sa/4.0/">BY-NC-SA&lt;/a>, lets anyone share or build upon this work for non-commercial purposes, as long as it is properly attributed and using the same license.&lt;/p>
&lt;h2 id="lets-roll" >Let’s roll!
&lt;span>
&lt;a href="#lets-roll">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;p>Publishing a book is a lot of work, but also a pretty exciting journey. Thanks for reading this, and I hope you’ll soon join me on the JavaScript Way.&lt;/p></description></item><item><title>Pourquoi JavaScript est devenu essentiel</title><link>https://www.bpesquet.fr/posts/pourquoi-javascript-est-devenu-essentiel/</link><pubDate>Wed, 17 Feb 2016 09:42:35 +0000</pubDate><guid>https://www.bpesquet.fr/posts/pourquoi-javascript-est-devenu-essentiel/</guid><description>&lt;p>&lt;a href="http://somethingkindawierd.com/presentations/native-javascript/presentation/index.html">&lt;img src="images/1.jpeg" alt="Eating the world">&lt;/a>&lt;/p>
&lt;p>Pour plusieurs générations de développeurs et d’enseignants en informatique, le langage JavaScript a une image fortement négative. Mal fichu, plein de limitations et de défauts. il serait tout juste bon à animer des pages Web et rien de plus.&lt;/p>
&lt;p>Tout cela était vrai à l’époque où JavaScript n’était qu’un langage de script peu standardisé et cantonné au petit monde des navigateurs Web.&lt;/p>
&lt;p>Mais les choses ont changé.&lt;/p>
&lt;p>Je résume ici les principaux arguments développés dans l’excellent article &lt;a href="https://medium.com/triled-engineering/why-you-should-embrace-javascript-64b2b8209145#.geu6ljwjh">Why you should embrace JavaScript&lt;/a> de &lt;a href="https://medium.com/u/326ef1bd6e31">Maarten Huijsmans&lt;/a>, dont je vous recommande la lecture.&lt;/p>
&lt;ul>
&lt;li>Unique langage de programmation reconnu par tous les navigateurs Web, JavaScript est maintenant implanté côté serveur grâce à &lt;a href="https://nodejs.org/">Node.js&lt;/a> et pour le développement d’applications mobiles multi-plateformes, avec des outils comme &lt;a href="https://cordova.apache.org/">Cordova&lt;/a>, &lt;a href="http://ionic.io/">Ionic&lt;/a> ou &lt;a href="https://facebook.github.io/react-native/">React Native&lt;/a>. On le retrouve dans le monde du stockage de données (&lt;a href="https://www.mongodb.org/">MongoDB&lt;/a>) et dans celui, encore en chantier, des objets connectés.&lt;/li>
&lt;li>Les optimisations réalisées pour accélérer le rendu des sites Web dans les navigateurs ont boosté les performances du langage.&lt;/li>
&lt;li>Il dispose d’un foisonnant écosystème de composants centré autour de la plate-forme &lt;a href="https://www.npmjs.com/">npm&lt;/a> et d’une immense communauté de développeurs.&lt;/li>
&lt;li>Ses défauts de jeunesse sont peu à peu gommés par les évolutions du langage, et notamment la norme &lt;a href="https://babeljs.io/docs/learn-es2015/">ES6/ES2015&lt;/a>.&lt;/li>
&lt;/ul>
&lt;p>On peut ajouter d’autres aspects qui jouent en faveur de JavaScript.&lt;/p>
&lt;ul>
&lt;li>Une fois ses spécificités digérées, le langage JavaScript s’avère riche et peut offrir une belle expérience de développement. De nombreux outils sont apparus pour faciliter la vie (et donc augmenter la productivité) du développeur JavaScript : détection d’erreurs et de maladresses dans le code, débogage, optimisation, etc. Lisez &lt;a href="https://medium.com/javascript-scene/must-see-javascript-dev-tools-that-put-other-dev-tools-to-shame-aca6d3e3d925#.h2bej6zam">cet article&lt;/a> d’&lt;a href="https://medium.com/u/c359511de780">Eric Elliott&lt;/a> pour découvrir des outils essentiels tels que &lt;a href="http://babeljs.io/">Babel&lt;/a> ou &lt;a href="http://eslint.org/">ESLint&lt;/a>.&lt;/li>
&lt;li>Maîtriser JavaScript est nécessaire pour créer les applications Web de demain. Tous les services modernes qui offrent sur le Web une &lt;a href="https://fr.wikipedia.org/wiki/Exp%C3%A9rience_utilisateur">expérience utilisateur&lt;/a> proche de celle d’une application native (&lt;a href="https://fr.wikipedia.org/wiki/Google_Documents">Google Docs&lt;/a>, &lt;a href="https://www.uber.com/">Uber&lt;/a>, &lt;a href="http://www.airbnb.com/">AirBnb&lt;/a>…) font un usage intensif de JavaScript, souvent par le biais de &lt;em>frameworks&lt;/em> comme &lt;a href="https://angularjs.org/">AngularJS&lt;/a> ou de librairies comme &lt;a href="https://facebook.github.io/react/">React&lt;/a>.&lt;/li>
&lt;li>Pour les développeurs, le marché français de l’emploi avant bac+5 est centré sur le Web. A l’heure actuelle, la compétence en JavaScript est recherchée par de nombreux employeurs : c’est donc un atout précieux pour l’employabilité.&lt;/li>
&lt;/ul>
&lt;p>Qu’on le veuille ou non, JavaScript est partout. L’ignorer, c’est laisser le monde du développement logiciel avancer sans vous. Le combattre, c’est gaspiller du temps et de l’énergie.&lt;/p>
&lt;p>Et si vous l’adoptiez plutôt ?&lt;/p></description></item></channel></rss>