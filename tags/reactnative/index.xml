<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>reactnative on Baptiste Pesquet</title><link>https://www.bpesquet.fr/tags/reactnative/</link><description>Baptiste Pesquet (reactnative)</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Wed, 27 Oct 2021 13:48:28 +0200</lastBuildDate><atom:link href="https://www.bpesquet.fr/tags/reactnative/index.xml" rel="self" type="application/rss+xml"/><item><title>React Native</title><link>https://www.bpesquet.fr/slides/react-native/</link><pubDate>Wed, 27 Oct 2021 13:48:28 +0200</pubDate><guid>https://www.bpesquet.fr/slides/react-native/</guid><description>&lt;h2 id="sommaire" >Sommaire
&lt;span>
&lt;a href="#sommaire">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;ul>
&lt;li>Introduction&lt;/li>
&lt;li>Composants React Native&lt;/li>
&lt;li>Gestion de l&amp;rsquo;UI&lt;/li>
&lt;li>Gestion de l&amp;rsquo;état&lt;/li>
&lt;li>Applications multi-écrans&lt;/li>
&lt;li>Utilisation d&amp;rsquo;API web&lt;/li>
&lt;li>Persistance locale&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="introduction" >Introduction
&lt;span>
&lt;a href="#introduction">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;hr>
&lt;h3 id="lécosystème-mobile" >L&amp;rsquo;écosystème mobile
&lt;span>
&lt;a href="#l%c3%a9cosyst%c3%a8me-mobile">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;ul>
&lt;li>Absence de monopole.&lt;/li>
&lt;li>Deux poids lourds : Android et iOS.&lt;/li>
&lt;li>Parts de marché stables depuis plusieurs années.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;p>&lt;img src="images/smartphone_market_share_2016.jpg" alt="Smartphone platform market share">&lt;/p>
&lt;hr>
&lt;p>&lt;img src="images/market-share-2015_2019.png" alt="Market share evolution 2015-2019">&lt;/p>
&lt;hr>
&lt;p>&lt;img src="images/os-fragmentation_2018.jpg" alt="Mobile OS Fragmentation">&lt;/p>
&lt;hr>
&lt;section data-shortcode-section>
&lt;h3 id="développement-mobile-natif" >Développement mobile natif
&lt;span>
&lt;a href="#d%c3%a9veloppement-mobile-natif">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;p>Création d&amp;rsquo;applications en utilisant la technologie prévue par le concepteur de l&amp;rsquo;OS.&lt;/p>
&lt;ul>
&lt;li>Android : Java&lt;/li>
&lt;li>IOS : Objective-C ou Swift&lt;/li>
&lt;/ul>
&lt;p class='fragment '
>
Ces technologies sont &lt;strong>incompatibles&lt;/strong>.
&lt;/p>
&lt;hr>
&lt;h3 id="avantages" >Avantages
&lt;span>
&lt;a href="#avantages">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;ul>
&lt;li>Accès à l&amp;rsquo;intégralité des fonctionnalités matérielles et logicielles du terminal mobile.&lt;/li>
&lt;li>Performances optimales.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="inconvénient-majeur-" >Inconvénient (majeur !)
&lt;span>
&lt;a href="#inconv%c3%a9nient-majeur-">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;p>Nécessité de créer puis de faire évoluer une application pour chaque environnement.&lt;/p>
&lt;/section>
&lt;hr>
&lt;section data-shortcode-section>
&lt;h3 id="solutions-hybrides" >Solutions hybrides
&lt;span>
&lt;a href="#solutions-hybrides">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;p>Création d&amp;rsquo;applications mobiles compatibles avec plusieurs OS mobiles grâce à un framework dédié.&lt;/p>
&lt;p>Une application hybride est une application web qui s&amp;rsquo;exécute à l&amp;rsquo;intérieur d&amp;rsquo;un navigateur.&lt;/p>
&lt;p>Exemples : &lt;a href="https://cordova.apache.org">Apache Cordova&lt;/a>, &lt;a href="https://ionicframework.com">Ionic&lt;/a>&lt;/p>
&lt;hr>
&lt;h3 id="avantages" >Avantages
&lt;span>
&lt;a href="#avantages">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;ul>
&lt;li>Fonctionnalités et performances proches de celles d&amp;rsquo;une application native.&lt;/li>
&lt;li>Economies de ressources pour créer l&amp;rsquo;application.&lt;/li>
&lt;li>Une seule base de code : maintenance et évolution facilitées.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="inconvénients" >Inconvénients
&lt;span>
&lt;a href="#inconv%c3%a9nients">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;ul>
&lt;li>Impossible d&amp;rsquo;accéder à certaines fonctionnalités matérielles ou logicielles spécifiques.&lt;/li>
&lt;li>&lt;em>Look&amp;rsquo;n&amp;rsquo;feel&lt;/em> non natif.&lt;/li>
&lt;li>Mauvaises performances dans certains scenarii.&lt;/li>
&lt;/ul>
&lt;/section>
&lt;hr>
&lt;section data-shortcode-section>
&lt;h3 id="développement-natif-multi-plateformes" >Développement natif multi-plateformes
&lt;span>
&lt;a href="#d%c3%a9veloppement-natif-multi-plateformes">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;p>Création d&amp;rsquo;applications mobiles compatibles avec plusieurs OS mobiles grâce à un framework dédié.&lt;/p>
&lt;p>Le framework encapsule les véritables composants natifs de l&amp;rsquo;OS.&lt;/p>
&lt;p>Exemples : &lt;a href="https://facebook.github.io/react-native/">React Native&lt;/a>, &lt;a href="https://weexapp.com/">Weex&lt;/a>, &lt;a href="https://dotnet.microsoft.com/en-us/apps/xamarin">Xamarin&lt;/a>&lt;/p>
&lt;hr>
&lt;h3 id="le-meilleur-des-deux-mondes-" >Le meilleur des deux mondes ?
&lt;span>
&lt;a href="#le-meilleur-des-deux-mondes-">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;p>Combine les avantages du natif (&lt;em>look&amp;rsquo;n&amp;rsquo;feel&lt;/em>, performances) et de l&amp;rsquo;hybride (une seule base de code).&lt;/p>
&lt;p>Limite potentielle : le support de l&amp;rsquo;OS dépend entièrement du framework.&lt;/p>
&lt;/section>
&lt;hr>
&lt;h3 id="react-native" >React Native
&lt;span>
&lt;a href="#react-native">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;p>Framework créé par Facebook, open source depuis 2015.&lt;/p>
&lt;p>Déclinaison mobile du framework JavaScript &lt;a href="https://reactjs.org/">React&lt;/a>.&lt;/p>
&lt;p>&lt;a href="https://reactnative.dev/">&lt;img src="images/reactjs.png" alt="React logo">&lt;/a>&lt;/p>
&lt;hr>
&lt;h3 id="expo" >Expo
&lt;span>
&lt;a href="#expo">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;p>Framework pour faciliter la création et le déploiement d&amp;rsquo;applications React Native.&lt;/p>
&lt;p>&lt;a href="https://expo.dev/">&lt;img src="images/expo_logo.png" alt="Expo logo">&lt;/a>&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://docs.expo.dev/workflow/expo-cli/">Expo CLI&lt;/a> : outil en ligne de commande pour le développement local.&lt;/li>
&lt;li>&lt;a href="https://expo.dev/expo-go">Expo Go&lt;/a> : application mobile à installer sur le terminal cible pour le déploiement.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="création-dune-application" >Création d&amp;rsquo;une application
&lt;span>
&lt;a href="#cr%c3%a9ation-dune-application">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic"># Install expo-cli globally&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic"># (Node.js and Git are prerequisites)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>npm i -g expo-cli
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic"># Create a new app named &amp;#34;appname&amp;#34; in its own subfolder&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic"># Created files are automatically versioned into a Git repository&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic"># The optional -t flag is used to select an Expo app template&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic"># Run npx create-expo-app --template to see the list of available templates.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>npx create-expo-app &amp;lt;appname&amp;gt; -t &amp;lt;expo-template&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic"># Alternative: expo init &amp;lt;appname&amp;gt; -t &amp;lt;expo-template&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>
&lt;p>Workflow &lt;em>managé&lt;/em> : projet entièrement géré par Expo (plus simple).&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Workflow &lt;em>bare&lt;/em> : plus proche d&amp;rsquo;un projet React Native pur.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="déploiement-de-lapplication" >Déploiement de l&amp;rsquo;application
&lt;span>
&lt;a href="#d%c3%a9ploiement-de-lapplication">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>cd &amp;lt;appname&amp;gt; &lt;span style="color:#080;background-color:#0f140f;font-style:italic"># Move into project directory&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>npm start &lt;span style="color:#080;background-color:#0f140f;font-style:italic"># Or &amp;#39;expo start&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Ensuite, scan du QR Code depuis l&amp;rsquo;application Expo Go (Android) ou l&amp;rsquo;appareil photo du smartphone (iOS).&lt;/p>
&lt;p>&lt;img src="images/expo_qrcode.png" alt="Expo QR Code">&lt;/p>
&lt;hr>
&lt;h3 id="détails-sur-le-déploiement" >Détails sur le déploiement
&lt;span>
&lt;a href="#d%c3%a9tails-sur-le-d%c3%a9ploiement">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;ul>
&lt;li>L&amp;rsquo;application est hébergée sur un serveur web local.&lt;/li>
&lt;li>Expo s&amp;rsquo;y connecte pour la récupérer puis la lancer.&lt;/li>
&lt;li>Une interface web de gestion s&amp;rsquo;affiche.&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="images/expo_management.png" alt="Expo Management">&lt;/p>
&lt;hr>
&lt;h3 id="rechargement-dynamique" >Rechargement dynamique
&lt;span>
&lt;a href="#rechargement-dynamique">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;p>&lt;a href="https://openclassrooms.com/fr/courses/4902061-developpez-une-application-mobile-react-native/">&lt;img src="images/expo_reload.jpeg" alt="Live Reload">&lt;/a>&lt;/p>
&lt;hr>
&lt;h3 id="connexion-au-serveur-expo" >Connexion au serveur Expo
&lt;span>
&lt;a href="#connexion-au-serveur-expo">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;p>L&amp;rsquo;application mobile Expo Go doit accéder au serveur web de la machine de développement pour pouvoir lancer l&amp;rsquo;application RN.&lt;/p>
&lt;p>Il existe plusieurs modes de connexion :&lt;/p>
&lt;ul>
&lt;li>&lt;strong>LAN&lt;/strong> : utilisation du réseau Wifi local. Peut poser problème dans certains environnements Wifi sécurisés.&lt;/li>
&lt;li>&lt;strong>Tunnel&lt;/strong> : création d&amp;rsquo;un tunnel avec &lt;a href="https://ngrok.com/">ngrok&lt;/a> pour accéder au serveur local via le web. Nécessite que le terminal mobile dispose d&amp;rsquo;un accès internet.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="utilisation-dun-émulateur" >Utilisation d&amp;rsquo;un émulateur
&lt;span>
&lt;a href="#utilisation-dun-%c3%a9mulateur">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;ul>
&lt;li>Alternative à l&amp;rsquo;emploi d&amp;rsquo;un terminal mobile pour tester l&amp;rsquo;application RN.&lt;/li>
&lt;li>Nécessite l&amp;rsquo;installation de &lt;a href="https://developer.apple.com/xcode/">XCode (iOS)&lt;/a> ou &lt;a href="https://developer.android.com/studio">Android Studio&lt;/a> sur le machine de développement.&lt;/li>
&lt;li>Documentation : &lt;a href="https://docs.expo.io/workflow/ios-simulator/">iOS&lt;/a> | &lt;a href="https://docs.expo.io/workflow/android-studio-emulator/">Android&lt;/a>.&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="images/expo-emulator.png" alt="Expo emulator">&lt;/p>
&lt;hr>
&lt;h3 id="contenu-du-répertoire-créé" >Contenu du répertoire créé
&lt;span>
&lt;a href="#contenu-du-r%c3%a9pertoire-cr%c3%a9%c3%a9">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;p>&lt;img src="images/rn-app-structure.png" alt="Arborescence React Native">&lt;/p>
&lt;hr>
&lt;h3 id="le-fichier-de-configuration-appjson" >Le fichier de configuration app.json
&lt;span>
&lt;a href="#le-fichier-de-configuration-appjson">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">&amp;#34;expo&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">&amp;#34;name&amp;#34;&lt;/span>: &lt;span style="color:#0086d2">&amp;#34;HelloReactNative&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">&amp;#34;slug&amp;#34;&lt;/span>: &lt;span style="color:#0086d2">&amp;#34;HelloReactNative&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">&amp;#34;version&amp;#34;&lt;/span>: &lt;span style="color:#0086d2">&amp;#34;1.0.0&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">&amp;#34;orientation&amp;#34;&lt;/span>: &lt;span style="color:#0086d2">&amp;#34;portrait&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">&amp;#34;icon&amp;#34;&lt;/span>: &lt;span style="color:#0086d2">&amp;#34;./assets/icon.png&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">&amp;#34;userInterfaceStyle&amp;#34;&lt;/span>: &lt;span style="color:#0086d2">&amp;#34;light&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">&amp;#34;splash&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">&amp;#34;image&amp;#34;&lt;/span>: &lt;span style="color:#0086d2">&amp;#34;./assets/splash.png&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">&amp;#34;resizeMode&amp;#34;&lt;/span>: &lt;span style="color:#0086d2">&amp;#34;contain&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">&amp;#34;backgroundColor&amp;#34;&lt;/span>: &lt;span style="color:#0086d2">&amp;#34;#ffffff&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">&amp;#34;updates&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">&amp;#34;fallbackToCacheTimeout&amp;#34;&lt;/span>: &lt;span style="color:#0086f7;font-weight:bold">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">&amp;#34;assetBundlePatterns&amp;#34;&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#0086d2">&amp;#34;**/*&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">&amp;#34;ios&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">&amp;#34;supportsTablet&amp;#34;&lt;/span>: &lt;span style="color:#fb660a;font-weight:bold">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">&amp;#34;android&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">&amp;#34;adaptiveIcon&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">&amp;#34;foregroundImage&amp;#34;&lt;/span>: &lt;span style="color:#0086d2">&amp;#34;./assets/adaptive-icon.png&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">&amp;#34;backgroundColor&amp;#34;&lt;/span>: &lt;span style="color:#0086d2">&amp;#34;#FFFFFF&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">&amp;#34;web&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">&amp;#34;favicon&amp;#34;&lt;/span>: &lt;span style="color:#0086d2">&amp;#34;./assets/favicon.png&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="le-fichier-packagejson" >Le fichier package.json
&lt;span>
&lt;a href="#le-fichier-packagejson">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">&amp;#34;name&amp;#34;&lt;/span>: &lt;span style="color:#0086d2">&amp;#34;helloreactnative&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">&amp;#34;version&amp;#34;&lt;/span>: &lt;span style="color:#0086d2">&amp;#34;1.0.0&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">&amp;#34;main&amp;#34;&lt;/span>: &lt;span style="color:#0086d2">&amp;#34;node_modules/expo/AppEntry.js&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">&amp;#34;scripts&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">&amp;#34;start&amp;#34;&lt;/span>: &lt;span style="color:#0086d2">&amp;#34;expo start&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">&amp;#34;android&amp;#34;&lt;/span>: &lt;span style="color:#0086d2">&amp;#34;expo start --android&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">&amp;#34;ios&amp;#34;&lt;/span>: &lt;span style="color:#0086d2">&amp;#34;expo start --ios&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">&amp;#34;web&amp;#34;&lt;/span>: &lt;span style="color:#0086d2">&amp;#34;expo start --web&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">&amp;#34;dependencies&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">&amp;#34;expo&amp;#34;&lt;/span>: &lt;span style="color:#0086d2">&amp;#34;~47.0.9&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">&amp;#34;expo-status-bar&amp;#34;&lt;/span>: &lt;span style="color:#0086d2">&amp;#34;~1.4.2&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">&amp;#34;react&amp;#34;&lt;/span>: &lt;span style="color:#0086d2">&amp;#34;18.1.0&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">&amp;#34;react-native&amp;#34;&lt;/span>: &lt;span style="color:#0086d2">&amp;#34;0.70.5&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">&amp;#34;devDependencies&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">&amp;#34;@babel/core&amp;#34;&lt;/span>: &lt;span style="color:#0086d2">&amp;#34;^7.12.9&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">&amp;#34;private&amp;#34;&lt;/span>: &lt;span style="color:#fb660a;font-weight:bold">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="le-fichier-principal-appjs" >Le fichier principal App.js
&lt;span>
&lt;a href="#le-fichier-principal-appjs">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-jsx" data-lang="jsx">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> { StatusBar } from &lt;span style="color:#0086d2">&amp;#34;expo-status-bar&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> { StyleSheet, Text, View } from &lt;span style="color:#0086d2">&amp;#34;react-native&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">export&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">default&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">function&lt;/span> App() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">return&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">View&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">style&lt;/span>={styles.container}&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Text&lt;/span>&amp;gt;Open up App.js to start working on your app!&amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">Text&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">StatusBar&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">style&lt;/span>=&lt;span style="color:#0086d2">&amp;#34;auto&amp;#34;&lt;/span> /&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">View&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> );
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> styles = StyleSheet.create({
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> container: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> flex: &lt;span style="color:#0086f7;font-weight:bold">1&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> backgroundColor: &lt;span style="color:#0086d2">&amp;#34;#fff&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> alignItems: &lt;span style="color:#0086d2">&amp;#34;center&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> justifyContent: &lt;span style="color:#0086d2">&amp;#34;center&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>});
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="les-formats-jsx-et-tsx" >Les formats JSX et TSX
&lt;span>
&lt;a href="#les-formats-jsx-et-tsx">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;ul>
&lt;li>Syntaxe introduite pour le framework web &lt;a href="https://reactjs.org/">React&lt;/a>.&lt;/li>
&lt;li>Permet de décrire une UI en intégrant balisage et logique applicative.&lt;/li>
&lt;li>Les accolades &lt;code>{...}&lt;/code> permettent d&amp;rsquo;inclure du code JavaScript dans le code JSX (&lt;a href="https://beta.reactjs.org/learn/javascript-in-jsx-with-curly-braces">plus de détails&lt;/a>).&lt;/li>
&lt;li>TSX : équivalent de JSX pour TypeScript.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-jsx" data-lang="jsx">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// JSX for React (web)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> name = &lt;span style="color:#0086d2">&amp;#34;Clarisse Agbegnenou&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> element = &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">p&lt;/span>&amp;gt;Hello, {name}&amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">p&lt;/span>&amp;gt;;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-jsx" data-lang="jsx">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// JSX for React Native (mobile)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> name = &lt;span style="color:#0086d2">&amp;#34;Clarisse Agbegnenou&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> element = &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Text&lt;/span>&amp;gt;Hello, {name}&amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">Text&lt;/span>&amp;gt;;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h2 id="composants-react-native" >Composants React Native
&lt;span>
&lt;a href="#composants-react-native">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;hr>
&lt;h3 id="la-notion-de-composant" >La notion de composant
&lt;span>
&lt;a href="#la-notion-de-composant">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;ul>
&lt;li>
&lt;p>Les &lt;strong>composants&lt;/strong> sont les blocs de base d&amp;rsquo;une application React (Native).&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Ils permettent de créer une UI sous forme &lt;strong>déclarative&lt;/strong> par assemblage de composants inclus les uns dans les autres.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Ils doivent comporter une fonction qui définit leur rendu visuel.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Le fichier principal &lt;code>App.js&lt;/code> d&amp;rsquo;une application RN doit exporter un composant par défaut.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="composants-fonctions" >Composants fonctions
&lt;span>
&lt;a href="#composants-fonctions">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;ul>
&lt;li>La valeur de retour de la fonction définit leur rendu.&lt;/li>
&lt;li>Syntaxe standard, la plus concise.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-jsx" data-lang="jsx">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> React from &lt;span style="color:#0086d2">&amp;#39;react&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> { Text, View } from &lt;span style="color:#0086d2">&amp;#34;react-native&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// HelloWorldApp is a function component
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> HelloWorldApp = () =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">return&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">View&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff0086;font-weight:bold">style&lt;/span>={{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> flex: &lt;span style="color:#0086f7;font-weight:bold">1&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> justifyContent: &lt;span style="color:#0086d2">&amp;#34;center&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> alignItems: &lt;span style="color:#0086d2">&amp;#34;center&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Text&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">style&lt;/span>={{ fontSize: &lt;span style="color:#0086f7;font-weight:bold">24&lt;/span> }}&amp;gt;Hello from a &lt;span style="color:#fb660a;font-weight:bold">function&lt;/span> component!&amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">Text&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">View&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> );
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">export&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">default&lt;/span> HelloWorldApp;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="composants-classes" >Composants classes
&lt;span>
&lt;a href="#composants-classes">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;ul>
&lt;li>La méthode obligatoire &lt;code>render()&lt;/code> définit leur rendu.&lt;/li>
&lt;li>Syntaxe à privilégier pour les composants les plus complexes.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-jsx" data-lang="jsx">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> React, { Component } from &lt;span style="color:#0086d2">&amp;#34;react&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> { Text, View } from &lt;span style="color:#0086d2">&amp;#34;react-native&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// HelloWorldApp is a class component
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>&lt;span style="color:#fb660a;font-weight:bold">class&lt;/span> HelloWorldApp &lt;span style="color:#fb660a;font-weight:bold">extends&lt;/span> Component {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> render() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">return&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">View&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff0086;font-weight:bold">style&lt;/span>={{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> flex: &lt;span style="color:#0086f7;font-weight:bold">1&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> justifyContent: &lt;span style="color:#0086d2">&amp;#34;center&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> alignItems: &lt;span style="color:#0086d2">&amp;#34;center&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Text&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">style&lt;/span>={{ fontSize: &lt;span style="color:#0086f7;font-weight:bold">24&lt;/span> }}&amp;gt;Hello from a &lt;span style="color:#fb660a;font-weight:bold">class&lt;/span> component!&amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">Text&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">View&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> );
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">export&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">default&lt;/span> HelloWorldApp;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="composants-de-base" >Composants de base
&lt;span>
&lt;a href="#composants-de-base">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;p>Implémentés de manière native par RN sous Android et iOS afin d&amp;rsquo;obtenir un &lt;em>look&amp;rsquo;n&amp;rsquo;feel&lt;/em> et des performances optimaux.&lt;/p>
&lt;p>&lt;a href="https://reactnative.dev/docs/components-and-apis">&lt;img src="images/basic_components.png" alt="React Native core components">&lt;/a>&lt;/p>
&lt;hr>
&lt;h3 id="gestion-du-style" >Gestion du style
&lt;span>
&lt;a href="#gestion-du-style">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;ul>
&lt;li>Propriété &lt;code>style&lt;/code> disponible pour les composants de base.&lt;/li>
&lt;li>Semblable à CSS avec nommage &lt;em>camelCase&lt;/em>.&lt;/li>
&lt;li>En ligne ou externalisé sous forme d&amp;rsquo;un objet créé par la fonction &lt;code>StyleSheet.create&lt;/code>.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-jsx" data-lang="jsx">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> React from &lt;span style="color:#0086d2">&amp;#34;react&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> { StyleSheet, Text, View } from &lt;span style="color:#0086d2">&amp;#34;react-native&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">export&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">default&lt;/span> App = () =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">return&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">View&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">style&lt;/span>={styles.container}&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Text&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">style&lt;/span>={styles.red}&amp;gt;just red&amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">Text&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Text&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">style&lt;/span>={styles.bigblue}&amp;gt;just bigblue&amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">Text&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#080;background-color:#0f140f;font-style:italic">/* Using an array of styles: last element has precedence */&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Text&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">style&lt;/span>={[styles.bigblue, styles.red]}&amp;gt;bigblue, then red&amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">Text&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Text&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">style&lt;/span>={[styles.red, styles.bigblue]}&amp;gt;red, then bigblue&amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">Text&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">View&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> );
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> styles = StyleSheet.create({
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> container: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> flex: &lt;span style="color:#0086f7;font-weight:bold">1&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> alignItems: &lt;span style="color:#0086d2">&amp;#34;center&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> justifyContent: &lt;span style="color:#0086d2">&amp;#34;center&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> bigblue: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> color: &lt;span style="color:#0086d2">&amp;#34;blue&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> fontWeight: &lt;span style="color:#0086d2">&amp;#34;bold&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> fontSize: &lt;span style="color:#0086f7;font-weight:bold">30&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> red: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> color: &lt;span style="color:#0086d2">&amp;#34;red&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>});
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="composants-personnalisés" >Composants personnalisés
&lt;span>
&lt;a href="#composants-personnalis%c3%a9s">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;p>Ils permettent de créer une application par assemblage de composants élémentaires.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-jsx" data-lang="jsx">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> React from &lt;span style="color:#0086d2">&amp;#34;react&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> { StyleSheet, Text, View } from &lt;span style="color:#0086d2">&amp;#34;react-native&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> Cat = () =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">return&lt;/span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Text&lt;/span>&amp;gt;I am a cat!&amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">Text&lt;/span>&amp;gt;;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">export&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">default&lt;/span> App = () =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">return&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">View&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">style&lt;/span>={styles.container}&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Text&lt;/span>&amp;gt;Welcome!&amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">Text&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Cat&lt;/span> /&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Cat&lt;/span> /&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Cat&lt;/span> /&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">View&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> );
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> styles = StyleSheet.create({
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> container: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> flex: &lt;span style="color:#0086f7;font-weight:bold">1&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> alignItems: &lt;span style="color:#0086d2">&amp;#34;center&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> justifyContent: &lt;span style="color:#0086d2">&amp;#34;center&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>});
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="_props_-dun-composant" >&lt;em>Props&lt;/em> d&amp;rsquo;un composant
&lt;span>
&lt;a href="#_props_-dun-composant">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;ul>
&lt;li>Caractéristiques définies au moment de la création, modifiables uniquement par le composant parent.&lt;/li>
&lt;li>Objet composé de propriétés (paires nom/valeur).&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-jsx" data-lang="jsx">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> React from &lt;span style="color:#0086d2">&amp;#34;react&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> { StyleSheet, Text, View } from &lt;span style="color:#0086d2">&amp;#34;react-native&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// This component has two props: &amp;#34;name&amp;#34; and &amp;#34;age&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> Cat = ({ name, age }) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">return&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Text&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> I am {name} the {age} years old cat!
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">Text&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> );
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">export&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">default&lt;/span> App = () =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">return&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">View&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">style&lt;/span>={styles.container}&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Text&lt;/span>&amp;gt;Welcome!&amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">Text&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#080;background-color:#0f140f;font-style:italic">/* We define the values of the props for each cat */&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Cat&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">name&lt;/span>=&lt;span style="color:#0086d2">&amp;#34;Madchat&amp;#34;&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">age&lt;/span>=&lt;span style="color:#0086d2">&amp;#34;5&amp;#34;&lt;/span> /&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Cat&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">name&lt;/span>=&lt;span style="color:#0086d2">&amp;#34;Félicette&amp;#34;&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">age&lt;/span>=&lt;span style="color:#0086d2">&amp;#34;3&amp;#34;&lt;/span> /&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Cat&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">name&lt;/span>=&lt;span style="color:#0086d2">&amp;#34;Fritz&amp;#34;&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">age&lt;/span>=&lt;span style="color:#0086d2">&amp;#34;7&amp;#34;&lt;/span> /&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">View&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> );
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> styles = StyleSheet.create({
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> container: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> flex: &lt;span style="color:#0086f7;font-weight:bold">1&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> alignItems: &lt;span style="color:#0086d2">&amp;#34;center&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> justifyContent: &lt;span style="color:#0086d2">&amp;#34;center&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>});
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="_props_-et-déstructuration" >&lt;em>Props&lt;/em> et déstructuration
&lt;span>
&lt;a href="#_props_-et-d%c3%a9structuration">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;ul>
&lt;li>Les &lt;em>props&lt;/em> peuvent être passées de deux manières équivalentes à un composant function.&lt;/li>
&lt;li>La seconde, plus concise et explicite, est un exemple de &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment">déstructuration d&amp;rsquo;objet&lt;/a>.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-jsx" data-lang="jsx">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> Cat1 = (props) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> name = props.name;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> age = props.age;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> Cat2 = ({ name, age }) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>};
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="les-hooks" >Les hooks
&lt;span>
&lt;a href="#les-hooks">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;ul>
&lt;li>Introduits dans une version récente de React, les &lt;a href="https://reactjs.org/docs/hooks-overview.html">hooks&lt;/a> permettent d&amp;rsquo;écrire du code lié au cycle de vie des composants fonction.&lt;/li>
&lt;li>Exemple : le hook &lt;a href="https://reactjs.org/docs/hooks-state.html">useState&lt;/a> permet d&amp;rsquo;ajouter une variable d&amp;rsquo;état à un composant fonction.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> [&amp;lt;getter&amp;gt;, &amp;lt;setter&amp;gt;] = useState(&amp;lt;initialValue&amp;gt;);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="etat-_state_-dun-composant" >Etat (&lt;em>state&lt;/em>) d&amp;rsquo;un composant
&lt;span>
&lt;a href="#etat-_state_-dun-composant">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;ul>
&lt;li>Etat interne (mémoire), susceptible de changer au cours du temps (&lt;em>mutable&lt;/em>).&lt;/li>
&lt;li>Sa modification entraine une mise à jour de l&amp;rsquo;affichage du composant.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-jsx" data-lang="jsx">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> React, { useState } from &lt;span style="color:#0086d2">&amp;#34;react&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> { StyleSheet, Button, Text, View } from &lt;span style="color:#0086d2">&amp;#34;react-native&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> Counter = () =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Add a variable named &amp;#34;count&amp;#34; to the component state.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Its initial value is zero.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// The setCount function is used to update its value.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> [count, setCount] = useState(&lt;span style="color:#0086f7;font-weight:bold">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">return&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Adjacent JSX elements must be wrapped in an enclosing tag.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Fragments &amp;lt;&amp;gt; and &amp;lt;/&amp;gt; let you do that without using an unnecessary wrapping element like View.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> &amp;lt;&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Button&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff0086;font-weight:bold">title&lt;/span>=&lt;span style="color:#0086d2">&amp;#34;Click me!&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff0086;font-weight:bold">onPress&lt;/span>={() =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Update the state variable
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> setCount(count + &lt;span style="color:#0086f7;font-weight:bold">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;gt;&amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">Button&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#080;background-color:#0f140f;font-style:italic">/* Show the current value of the state variable */&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Text&lt;/span>&amp;gt;You clicked {count} times&amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">Text&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> );
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">export&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">default&lt;/span> App = () =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">return&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">View&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">style&lt;/span>={styles.container}&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Counter&lt;/span> /&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">View&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> );
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> styles = StyleSheet.create({
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> container: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> flex: &lt;span style="color:#0086f7;font-weight:bold">1&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> alignItems: &lt;span style="color:#0086d2">&amp;#34;center&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> justifyContent: &lt;span style="color:#0086d2">&amp;#34;center&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>});
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="cycle-de-vie-dun-composant" >Cycle de vie d&amp;rsquo;un composant
&lt;span>
&lt;a href="#cycle-de-vie-dun-composant">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;p>Les composants RN suivent un cycle de vie bien défini composé d&amp;rsquo;étapes : &lt;strong>montage&lt;/strong>, &lt;strong>rendu&lt;/strong>, &lt;strong>mise à jour&lt;/strong>, &lt;strong>démontage&lt;/strong> et &lt;strong>suppression&lt;/strong>.&lt;/p>
&lt;p>&lt;a href="http://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/">&lt;img src="images/react-lifecycle.png" alt="React lifecycle">&lt;/a>&lt;/p>
&lt;hr>
&lt;h2 id="gestion-de-lui" >Gestion de l&amp;rsquo;UI
&lt;span>
&lt;a href="#gestion-de-lui">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;hr>
&lt;h3 id="gestion-des-dimensions" >Gestion des dimensions
&lt;span>
&lt;a href="#gestion-des-dimensions">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;p>Deux possibilités pour définir la taille des composants :&lt;/p>
&lt;ul>
&lt;li>Dimensions fixes&lt;/li>
&lt;li>Dimensions flexibles&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="dimensions-fixes" >Dimensions fixes
&lt;span>
&lt;a href="#dimensions-fixes">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;p>Utile pour les composants qui doivent toujours être affichés à la même taille.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-jsx" data-lang="jsx">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> React from &lt;span style="color:#0086d2">&amp;#34;react&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> { View } from &lt;span style="color:#0086d2">&amp;#34;react-native&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">export&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">default&lt;/span> App = () =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">return&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">View&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">style&lt;/span>={{ width: &lt;span style="color:#0086f7;font-weight:bold">50&lt;/span>, height: &lt;span style="color:#0086f7;font-weight:bold">50&lt;/span>, backgroundColor: &lt;span style="color:#0086d2">&amp;#34;powderblue&amp;#34;&lt;/span> }} /&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">View&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">style&lt;/span>={{ width: &lt;span style="color:#0086f7;font-weight:bold">100&lt;/span>, height: &lt;span style="color:#0086f7;font-weight:bold">100&lt;/span>, backgroundColor: &lt;span style="color:#0086d2">&amp;#34;skyblue&amp;#34;&lt;/span> }} /&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">View&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">style&lt;/span>={{ width: &lt;span style="color:#0086f7;font-weight:bold">150&lt;/span>, height: &lt;span style="color:#0086f7;font-weight:bold">150&lt;/span>, backgroundColor: &lt;span style="color:#0086d2">&amp;#34;steelblue&amp;#34;&lt;/span> }} /&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> );
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="dimensions-flexibles" >Dimensions flexibles
&lt;span>
&lt;a href="#dimensions-flexibles">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;ul>
&lt;li>
&lt;p>&lt;code>flex:1&lt;/code> =&amp;gt; le composant prend tout l&amp;rsquo;espace disponible, partagé équitablement entre les autres composants d&amp;rsquo;un même parent.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Une valeur de &lt;code>flex&lt;/code> plus élevée donne plus d&amp;rsquo;espace à un composant par rapport aux autres.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-jsx" data-lang="jsx">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> React from &lt;span style="color:#0086d2">&amp;#34;react&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> { View } from &lt;span style="color:#0086d2">&amp;#34;react-native&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">export&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">default&lt;/span> App = () =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">return&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Try removing the `flex: 1` on the parent View.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// The parent will not have dimensions, so the children can&amp;#39;t expand.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// What if you add `height: 300` instead of `flex: 1`?
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">View&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">style&lt;/span>={{ flex: &lt;span style="color:#0086f7;font-weight:bold">1&lt;/span> }}&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#080;background-color:#0f140f;font-style:italic">/* Try changing the flex values to see how children views share the screen space */&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">View&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">style&lt;/span>={{ flex: &lt;span style="color:#0086f7;font-weight:bold">1&lt;/span>, backgroundColor: &lt;span style="color:#0086d2">&amp;#34;powderblue&amp;#34;&lt;/span> }} /&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">View&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">style&lt;/span>={{ flex: &lt;span style="color:#0086f7;font-weight:bold">2&lt;/span>, backgroundColor: &lt;span style="color:#0086d2">&amp;#34;skyblue&amp;#34;&lt;/span> }} /&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">View&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">style&lt;/span>={{ flex: &lt;span style="color:#0086f7;font-weight:bold">3&lt;/span>, backgroundColor: &lt;span style="color:#0086d2">&amp;#34;steelblue&amp;#34;&lt;/span> }} /&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">View&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> );
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="positionnement-avec-flexbox" >Positionnement avec Flexbox
&lt;span>
&lt;a href="#positionnement-avec-flexbox">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;ul>
&lt;li>Mode de mise en page pour les éléments situés à l&amp;rsquo;intérieur d&amp;rsquo;un conteneur.&lt;/li>
&lt;li>Objectif : répartir au mieux l&amp;rsquo;espace disponible.&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="images/flexbox_terminology.png" alt="Flexbox terminology">&lt;/p>
&lt;hr>
&lt;h3 id="flexdirection--flux-des-éléments" >&lt;code>flexDirection&lt;/code> : flux des éléments
&lt;span>
&lt;a href="#flexdirection--flux-des-%c3%a9l%c3%a9ments">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;p>&lt;code>column&lt;/code> (par défaut), &lt;code>row&lt;/code>, &lt;code>column-reverse&lt;/code>, &lt;code>row-reverse&lt;/code>.&lt;/p>
&lt;p>&lt;a href="https://css-tricks.com/snippets/css/a-guide-to-flexbox/">&lt;img src="images/flexbox_flex_direction.png" alt="Flex direction">&lt;/a>&lt;/p>
&lt;hr>
&lt;h3 id="justifycontent--axe-principal" >&lt;code>justifyContent&lt;/code> : axe principal
&lt;span>
&lt;a href="#justifycontent--axe-principal">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;p>&lt;a href="https://css-tricks.com/snippets/css/a-guide-to-flexbox/">&lt;img src="images/flexbox_justify_content.png" alt="Flexbox: justify content">&lt;/a>&lt;/p>
&lt;hr>
&lt;h3 id="alignitems--axe-secondaire" >&lt;code>alignItems&lt;/code> : axe secondaire
&lt;span>
&lt;a href="#alignitems--axe-secondaire">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;p>&lt;a href="https://css-tricks.com/snippets/css/a-guide-to-flexbox/">&lt;img src="images/flexbox_align_items.png" alt="Flexbox: align Items">&lt;/a>&lt;/p>
&lt;hr>
&lt;h3 id="flexbox-en-action" >Flexbox en action
&lt;span>
&lt;a href="#flexbox-en-action">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-jsx" data-lang="jsx">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> React from &lt;span style="color:#0086d2">&amp;#34;react&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> { View, StyleSheet } from &lt;span style="color:#0086d2">&amp;#34;react-native&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">export&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">default&lt;/span> App = () =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">return&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">View&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">style&lt;/span>={styles.container}&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#080;background-color:#0f140f;font-style:italic">/* Individual styles can be combined into an array */&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#080;background-color:#0f140f;font-style:italic">/* Thus, common style properties can be factorized */&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">View&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">style&lt;/span>={[styles.box, styles.box1]} /&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">View&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">style&lt;/span>={[styles.box, styles.box2]} /&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">View&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">style&lt;/span>={[styles.box, styles.box3]} /&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">View&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> );
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> styles = StyleSheet.create({
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> container: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> flex: &lt;span style="color:#0086f7;font-weight:bold">1&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Used to take into account the phone status bar at the top of the screen
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// marginTop: 48,
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> justifyContent: &lt;span style="color:#0086d2">&amp;#34;space-around&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> alignItems: &lt;span style="color:#0086d2">&amp;#34;center&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> box: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> width: &lt;span style="color:#0086f7;font-weight:bold">100&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> height: &lt;span style="color:#0086f7;font-weight:bold">100&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> box1: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> backgroundColor: &lt;span style="color:#0086d2">&amp;#34;powderblue&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> box2: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> backgroundColor: &lt;span style="color:#0086d2">&amp;#34;skyblue&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> box3: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> backgroundColor: &lt;span style="color:#0086d2">&amp;#34;steelblue&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>});
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="saisies-utilisateur" >Saisies utilisateur
&lt;span>
&lt;a href="#saisies-utilisateur">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;p>Le composant &lt;a href="https://reactnative.dev/docs/textinput">TextInput&lt;/a> permet la saisie de texte.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-jsx" data-lang="jsx">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> React, { useState } from &lt;span style="color:#0086d2">&amp;#34;react&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> { StyleSheet, Text, View, TextInput } from &lt;span style="color:#0086d2">&amp;#34;react-native&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">export&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">default&lt;/span> App = () =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Add character count to state
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> [charCount, setCharCount] = useState(&lt;span style="color:#0086f7;font-weight:bold">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">return&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">View&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">style&lt;/span>={styles.container}&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">TextInput&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff0086;font-weight:bold">style&lt;/span>={styles.text}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff0086;font-weight:bold">placeholder&lt;/span>=&lt;span style="color:#0086d2">&amp;#34;Enter some text&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff0086;font-weight:bold">onChangeText&lt;/span>={(text) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Update character count after input changes
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> setCharCount(text.length);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> /&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Text&lt;/span>&amp;gt;Character count: {charCount}&amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">Text&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">View&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> );
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> styles = StyleSheet.create({
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> container: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> flex: &lt;span style="color:#0086f7;font-weight:bold">1&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> alignItems: &lt;span style="color:#0086d2">&amp;#34;center&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> justifyContent: &lt;span style="color:#0086d2">&amp;#34;center&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> text: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> fontSize: &lt;span style="color:#0086f7;font-weight:bold">22&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> paddingBottom: &lt;span style="color:#0086f7;font-weight:bold">10&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>});
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h2 id="gestion-de-létat" >Gestion de l&amp;rsquo;état
&lt;span>
&lt;a href="#gestion-de-l%c3%a9tat">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;hr>
&lt;h3 id="rappels-sur-les-props" >Rappels sur les props
&lt;span>
&lt;a href="#rappels-sur-les-props">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;ul>
&lt;li>
&lt;p>&lt;strong>Props&lt;/strong> = caractéristiques définies au moment de la création du composant.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Les props d&amp;rsquo;un composant sont modifiables uniquement par son composant parent.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="rappels-sur-létat" >Rappels sur l&amp;rsquo;état
&lt;span>
&lt;a href="#rappels-sur-l%c3%a9tat">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;ul>
&lt;li>
&lt;p>&lt;strong>Etat (&lt;em>state&lt;/em>)&lt;/strong> = ensemble des données susceptibles d&amp;rsquo;être modifiées pendant l&amp;rsquo;exécution de l&amp;rsquo;application.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Chaque composant fonction React Native possède un état interne, géré via le hook &lt;code>useState&lt;/code>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Toute modification de l&amp;rsquo;état déclenche un nouveau rendu du composant.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="problématique" >Problématique
&lt;span>
&lt;a href="#probl%c3%a9matique">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;ul>
&lt;li>
&lt;p>La gestion locale de l&amp;rsquo;état devient insuffisante lorsqu&amp;rsquo;un composant doit &lt;strong>accéder à&lt;/strong> ou &lt;strong>modifier&lt;/strong> l&amp;rsquo;état d&amp;rsquo;un autre composant.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Nécessité de partager un &lt;strong>état commun&lt;/strong> entre certains composants.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="solution--_lifting-state-up_" >Solution : &lt;em>&amp;ldquo;lifting state up&amp;rdquo;&lt;/em>
&lt;span>
&lt;a href="#solution--_lifting-state-up_">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;ul>
&lt;li>Remonter l&amp;rsquo;état au niveau du plus proche composant parent commun.&lt;/li>
&lt;li>Définir les actions de modification dans ce composant parent.&lt;/li>
&lt;li>Dans les composants enfants :
&lt;ul>
&lt;li>Remplacer l&amp;rsquo;état local par des propriétés définies par le parent.&lt;/li>
&lt;li>Remplacer les actions locales par des appels aux actions définies dans le parent.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;a href="https://reactjs.org/docs/lifting-state-up.html">Lifting State Up (React)&lt;/a>&lt;/p>
&lt;hr>
&lt;h3 id="exemple-de-remontée-de-létat" >Exemple de remontée de l&amp;rsquo;état
&lt;span>
&lt;a href="#exemple-de-remont%c3%a9e-de-l%c3%a9tat">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;p>&lt;a href="https://github.com/ensc-mobi/TempConverter">https://github.com/ensc-mobi/TempConverter&lt;/a>&lt;/p>
&lt;p>&lt;img src="images/temp-converter.gif" alt="TempConverter demo">&lt;/p>
&lt;hr>
&lt;h3 id="mise-en-oeuvre" >Mise en oeuvre
&lt;span>
&lt;a href="#mise-en-oeuvre">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;p>L&amp;rsquo;état (température et échelle) commun aux deux composants de saisie est remonté dans &lt;code>App&lt;/code>, leur parent commun.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-jsx" data-lang="jsx">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> React, { useState } from &lt;span style="color:#0086d2">&amp;#34;react&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> { StyleSheet, View, Text, TextInput } from &lt;span style="color:#0086d2">&amp;#34;react-native&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Scale names used for display
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> scaleNames = { c: &lt;span style="color:#0086d2">&amp;#34;Celsius&amp;#34;&lt;/span>, f: &lt;span style="color:#0086d2">&amp;#34;Fahrenheit&amp;#34;&lt;/span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Celsius/Fahrenheit conversion functions
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>&lt;span style="color:#fb660a;font-weight:bold">function&lt;/span> toCelsius(fahrenheit) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">return&lt;/span> ((fahrenheit - &lt;span style="color:#0086f7;font-weight:bold">32&lt;/span>) * &lt;span style="color:#0086f7;font-weight:bold">5&lt;/span>) / &lt;span style="color:#0086f7;font-weight:bold">9&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">function&lt;/span> toFahrenheit(celsius) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">return&lt;/span> (celsius * &lt;span style="color:#0086f7;font-weight:bold">9&lt;/span>) / &lt;span style="color:#0086f7;font-weight:bold">5&lt;/span> + &lt;span style="color:#0086f7;font-weight:bold">32&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Component displaying if the water would boil or not, depending on the temperature
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// We choose the Celsius scale for easier comparison with the boiling temperature
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> BoilingResult = ({ tempCelsius }) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">let&lt;/span> message = &lt;span style="color:#0086d2">&amp;#34;&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">if&lt;/span> (!Number.isNaN(tempCelsius)) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> message =
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tempCelsius &amp;gt;= &lt;span style="color:#0086f7;font-weight:bold">100&lt;/span> ? &lt;span style="color:#0086d2">&amp;#34;The water would boil&amp;#34;&lt;/span> : &lt;span style="color:#0086d2">&amp;#34;The water would not boil&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">return&lt;/span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Text&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">style&lt;/span>={styles.text}&amp;gt;{message}&amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">Text&lt;/span>&amp;gt;;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Component for displaying and inputting a temperature in a specific scale
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> TemperatureInput = ({ value, scale, onChange }) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Accessing scaleNames properties through bracket notation
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Property_Accessors
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> placeholder = &lt;span style="color:#0086d2">`Enter temperature in &lt;/span>&lt;span style="color:#0086d2">${&lt;/span>scaleNames[scale]&lt;span style="color:#0086d2">}&lt;/span>&lt;span style="color:#0086d2">`&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">return&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">TextInput&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff0086;font-weight:bold">style&lt;/span>={styles.text}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff0086;font-weight:bold">placeholder&lt;/span>={placeholder}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff0086;font-weight:bold">onChangeText&lt;/span>={(text) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Call callback passed as component prop when input text changes
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> onChange(text);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff0086;font-weight:bold">value&lt;/span>={value}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> /&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> );
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Convert a temperature using a given conversion function
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>&lt;span style="color:#fb660a;font-weight:bold">function&lt;/span> tryConvert(temperature, convert) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> input = parseFloat(temperature);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">if&lt;/span> (Number.isNaN(input)) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">return&lt;/span> &lt;span style="color:#0086d2">&amp;#34;&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Call the conversion function on input
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> output = convert(input);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Keep the output rounded to the third decimal place
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> rounded = Math.round(output * &lt;span style="color:#0086f7;font-weight:bold">1000&lt;/span>) / &lt;span style="color:#0086f7;font-weight:bold">1000&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">return&lt;/span> rounded.toString();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Main component
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>&lt;span style="color:#fb660a;font-weight:bold">export&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">default&lt;/span> App = () =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Common state is lifted here because this component is the closest parent of TemperatureInput components.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// We store only the most recently changed input with its scale.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Temperature is stored as a string to handle missing values.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> [temperature, setTemperature] = useState(&lt;span style="color:#0086d2">&amp;#34;&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> [scale, setScale] = useState(&lt;span style="color:#0086d2">&amp;#34;c&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Compute temperatures in both scales
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> tempCelsius =
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> scale === &lt;span style="color:#0086d2">&amp;#34;f&amp;#34;&lt;/span> ? tryConvert(temperature, toCelsius) : temperature;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> tempFahrenheit =
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> scale === &lt;span style="color:#0086d2">&amp;#34;c&amp;#34;&lt;/span> ? tryConvert(temperature, toFahrenheit) : temperature;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">return&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">View&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">style&lt;/span>={styles.container}&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#080;background-color:#0f140f;font-style:italic">/* Display and input in Celsius degrees */&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">TemperatureInput&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff0086;font-weight:bold">value&lt;/span>={tempCelsius}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff0086;font-weight:bold">scale&lt;/span>=&lt;span style="color:#0086d2">&amp;#34;c&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff0086;font-weight:bold">onChange&lt;/span>={(newTemp) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> setTemperature(newTemp);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> setScale(&lt;span style="color:#0086d2">&amp;#34;c&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> /&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#080;background-color:#0f140f;font-style:italic">/* Display and input in Fahrenheit degrees */&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">TemperatureInput&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff0086;font-weight:bold">value&lt;/span>={tempFahrenheit}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff0086;font-weight:bold">scale&lt;/span>=&lt;span style="color:#0086d2">&amp;#34;f&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff0086;font-weight:bold">onChange&lt;/span>={(newTemp) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> setTemperature(newTemp);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> setScale(&lt;span style="color:#0086d2">&amp;#34;f&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> /&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">BoilingResult&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">tempCelsius&lt;/span>={parseFloat(tempCelsius)} /&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">View&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> );
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> styles = StyleSheet.create({
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> container: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> flex: &lt;span style="color:#0086f7;font-weight:bold">1&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> alignItems: &lt;span style="color:#0086d2">&amp;#34;center&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> justifyContent: &lt;span style="color:#0086d2">&amp;#34;center&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> text: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> fontSize: &lt;span style="color:#0086f7;font-weight:bold">22&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> paddingBottom: &lt;span style="color:#0086f7;font-weight:bold">10&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>});
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="restructuration-du-projet" >Restructuration du projet
&lt;span>
&lt;a href="#restructuration-du-projet">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;ul>
&lt;li>&lt;code>components/&lt;/code> rassemble les définitions des composants élémentaires.&lt;/li>
&lt;li>Ils sont importés par le composant racine défini dans &lt;code>App.js&lt;/code>.&lt;/li>
&lt;li>&lt;code>utils/&lt;/code> et &lt;code>theme/&lt;/code> factorisent les fonctions de conversion et les styles React Native communs.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-txt" data-lang="txt">&lt;span style="display:flex;">&lt;span>MyApp/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── components/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ ├── BoilingResult.js
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ ├── TemperatureInput.js
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── utils/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ ├── temperatureUtils.js
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── theme/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ ├── styles.js
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>└── App.js
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="définition-et-export-des-fonctions-de-conversion" >Définition et export des fonctions de conversion
&lt;span>
&lt;a href="#d%c3%a9finition-et-export-des-fonctions-de-conversion">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;p>Dans le fichier &lt;code>utils/temperatureUtils.js&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Scale names used for display
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>&lt;span style="color:#fb660a;font-weight:bold">export&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> scaleNames = { c: &lt;span style="color:#0086d2">&amp;#34;Celsius&amp;#34;&lt;/span>, f: &lt;span style="color:#0086d2">&amp;#34;Fahrenheit&amp;#34;&lt;/span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Celsius/Fahrenheit conversion functions
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>&lt;span style="color:#fb660a;font-weight:bold">export&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">function&lt;/span> toCelsius(fahrenheit) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">return&lt;/span> ((fahrenheit - &lt;span style="color:#0086f7;font-weight:bold">32&lt;/span>) * &lt;span style="color:#0086f7;font-weight:bold">5&lt;/span>) / &lt;span style="color:#0086f7;font-weight:bold">9&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">export&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">function&lt;/span> toFahrenheit(celsius) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">return&lt;/span> (celsius * &lt;span style="color:#0086f7;font-weight:bold">9&lt;/span>) / &lt;span style="color:#0086f7;font-weight:bold">5&lt;/span> + &lt;span style="color:#0086f7;font-weight:bold">32&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Convert a temperature using a given conversion function
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>&lt;span style="color:#fb660a;font-weight:bold">export&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">function&lt;/span> tryConvert(temperature, convert) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> input = parseFloat(temperature);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">if&lt;/span> (Number.isNaN(input)) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">return&lt;/span> &lt;span style="color:#0086d2">&amp;#34;&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Call the conversion function on input
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> output = convert(input);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Keep the output rounded to the third decimal place:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> rounded = Math.round(output * &lt;span style="color:#0086f7;font-weight:bold">1000&lt;/span>) / &lt;span style="color:#0086f7;font-weight:bold">1000&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">return&lt;/span> rounded.toString();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="définition-et-export-du-composant-de-saisie-de-température" >Définition et export du composant de saisie de température
&lt;span>
&lt;a href="#d%c3%a9finition-et-export-du-composant-de-saisie-de-temp%c3%a9rature">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;p>Dans le fichier &lt;code>components/TemperatureInput.js&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-jsx" data-lang="jsx">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> React from &lt;span style="color:#0086d2">&amp;#34;react&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> { TextInput } from &lt;span style="color:#0086d2">&amp;#34;react-native&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> { scaleNames } from &lt;span style="color:#0086d2">&amp;#34;../utils/temperatureUtils&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> styles from &lt;span style="color:#0086d2">&amp;#34;../theme/styles&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Component for displaying and inputting a temperature in a specific scale
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> TemperatureInput = ({ value, scale, onChange }) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">export&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">default&lt;/span> TemperatureInput;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="définition-du-composant-racine" >Définition du composant racine
&lt;span>
&lt;a href="#d%c3%a9finition-du-composant-racine">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;p>Dans le fichier &lt;code>App.js&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-jsx" data-lang="jsx">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> React, { useState } from &lt;span style="color:#0086d2">&amp;#34;react&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> { View } from &lt;span style="color:#0086d2">&amp;#34;react-native&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> BoilingResult from &lt;span style="color:#0086d2">&amp;#34;./components/BoilingResult&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> TemperatureInput from &lt;span style="color:#0086d2">&amp;#34;./components/TemperatureInput&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> { toCelsius, toFahrenheit, tryConvert } from &lt;span style="color:#0086d2">&amp;#34;./utils/temperatureUtils&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> styles from &lt;span style="color:#0086d2">&amp;#34;./theme/styles&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Main component
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>&lt;span style="color:#fb660a;font-weight:bold">export&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">default&lt;/span> App = () =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>};
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h2 id="applications-multi-écrans" >Applications multi-écrans
&lt;span>
&lt;a href="#applications-multi-%c3%a9crans">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;hr>
&lt;h3 id="react-navigation" >React Navigation
&lt;span>
&lt;a href="#react-navigation">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;ul>
&lt;li>Composant issu de la communauté des développeurs React Native.&lt;/li>
&lt;li>Devenu le standard pour les applications RN multi-vues.&lt;/li>
&lt;/ul>
&lt;p>&lt;a href="https://reactnavigation.org">&lt;img src="images/react_navigation_logo.png" alt="React Navigation logo">&lt;/a>&lt;/p>
&lt;hr>
&lt;h3 id="installation-de-react-navigation" >Installation de react-navigation
&lt;span>
&lt;a href="#installation-de-react-navigation">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;p>Utiliser &lt;code>npx expo install&lt;/code> au lieu de &lt;code>npm install&lt;/code> assure l&amp;rsquo;installation de versions compatibles avec celle d&amp;rsquo;Expo.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic"># Core components and common dependencies&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>npm install @react-navigation/native
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>npx expo install react-native-screens react-native-safe-area-context
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic"># If StackNavigator is used&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>npm install @react-navigation/native-stack
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic"># If BottomTabNavigator is used&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>npm install @react-navigation/bottom-tabs
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="exemple--navigation-par-piles-_stacks_" >Exemple : navigation par piles (&lt;em>stacks&lt;/em>)
&lt;span>
&lt;a href="#exemple--navigation-par-piles-_stacks_">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;p>&lt;a href="https://github.com/ensc-mobi/StackNavigatorDemo">https://github.com/ensc-mobi/StackNavigatorDemo&lt;/a>&lt;/p>
&lt;p>&lt;img src="images/stack-navigator-demo.png" alt="StackNavigator demo">&lt;/p>
&lt;hr>
&lt;h3 id="navigationcontainer" >NavigationContainer
&lt;span>
&lt;a href="#navigationcontainer">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;ul>
&lt;li>Composant racine nécessaire pour utiliser React Navigation.&lt;/li>
&lt;li>Ses descendants directs (composants enfants) sont appelés des &lt;strong>écrans&lt;/strong> (&lt;em>screens&lt;/em>).&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-jsx" data-lang="jsx">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> React from &lt;span style="color:#0086d2">&amp;#34;react&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> { NavigationContainer } from &lt;span style="color:#0086d2">&amp;#34;@react-navigation/native&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">export&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">default&lt;/span> App = () =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">return&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">NavigationContainer&lt;/span>&amp;gt;{&lt;span style="color:#080;background-color:#0f140f;font-style:italic">/* Rest of your app code */&lt;/span>}&amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">NavigationContainer&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> );
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="stacknavigator" >StackNavigator
&lt;span>
&lt;a href="#stacknavigator">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;p>Principe similaire au web : gestion d&amp;rsquo;une pile d&amp;rsquo;écrans avec possibilité de naviguer de l&amp;rsquo;un à l&amp;rsquo;autre.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-jsx" data-lang="jsx">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> React from &lt;span style="color:#0086d2">&amp;#34;react&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> { StyleSheet, View, Text } from &lt;span style="color:#0086d2">&amp;#34;react-native&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> { NavigationContainer } from &lt;span style="color:#0086d2">&amp;#34;@react-navigation/native&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> { createNativeStackNavigator } from &lt;span style="color:#0086d2">&amp;#34;@react-navigation/native-stack&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> HomeScreen = () =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">return&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">View&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">style&lt;/span>={styles.container}&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Text&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">style&lt;/span>={styles.text}&amp;gt;This is the home screen&amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">Text&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">View&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> );
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> Stack = createNativeStackNavigator();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">export&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">default&lt;/span> App = () =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">return&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">NavigationContainer&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Stack.Navigator&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Stack.Screen&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">name&lt;/span>=&lt;span style="color:#0086d2">&amp;#34;Home&amp;#34;&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">component&lt;/span>={HomeScreen} /&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">Stack.Navigator&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">NavigationContainer&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> );
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> styles = StyleSheet.create({
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> container: { flex: &lt;span style="color:#0086f7;font-weight:bold">1&lt;/span>, alignItems: &lt;span style="color:#0086d2">&amp;#34;center&amp;#34;&lt;/span>, justifyContent: &lt;span style="color:#0086d2">&amp;#34;center&amp;#34;&lt;/span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> text: { fontSize: &lt;span style="color:#0086f7;font-weight:bold">18&lt;/span>, paddingBottom: &lt;span style="color:#0086f7;font-weight:bold">10&lt;/span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>});
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="api-de-navigation" >API de navigation
&lt;span>
&lt;a href="#api-de-navigation">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;p>Passé comme &lt;em>prop&lt;/em> d&amp;rsquo;un composant écran, l&amp;rsquo;objet &lt;code>navigation&lt;/code> permet la gestion de la navigation:&lt;/p>
&lt;ul>
&lt;li>&lt;code>navigation.navigate(&amp;quot;RouteName&amp;quot;)&lt;/code> navigue vers un nouvel écran, sauf s&amp;rsquo;il est déjà l&amp;rsquo;écran actuel.&lt;/li>
&lt;li>&lt;code>navigation.push(&amp;quot;RouteName&amp;quot;)&lt;/code> navigue vers un nouvel écran même s&amp;rsquo;il est déjà l&amp;rsquo;écran actuel.&lt;/li>
&lt;li>&lt;code>navigation.goBack()&lt;/code> permet de revenir en arrière dans la navigation.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="exemple-de-navigation" >Exemple de navigation
&lt;span>
&lt;a href="#exemple-de-navigation">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-jsx" data-lang="jsx">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> React from &lt;span style="color:#0086d2">&amp;#34;react&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> { StyleSheet, View, Text, Button } from &lt;span style="color:#0086d2">&amp;#34;react-native&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> { NavigationContainer } from &lt;span style="color:#0086d2">&amp;#34;@react-navigation/native&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> { createNativeStackNavigator } from &lt;span style="color:#0086d2">&amp;#34;@react-navigation/native-stack&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> HomeScreen = ({ navigation }) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">return&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">View&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">style&lt;/span>={styles.container}&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Text&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">style&lt;/span>={styles.text}&amp;gt;This is the home screen&amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">Text&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Button&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff0086;font-weight:bold">title&lt;/span>=&lt;span style="color:#0086d2">&amp;#34;Go to Details&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff0086;font-weight:bold">onPress&lt;/span>={() =&amp;gt; navigation.navigate(&lt;span style="color:#0086d2">&amp;#34;Details&amp;#34;&lt;/span>)}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> /&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">View&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> );
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> DetailsScreen = ({ navigation }) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">return&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">View&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">style&lt;/span>={styles.container}&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Text&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">style&lt;/span>={styles.text}&amp;gt;This is the details screen&amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">Text&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Button&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff0086;font-weight:bold">title&lt;/span>=&lt;span style="color:#0086d2">&amp;#34;Go to Details... again&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff0086;font-weight:bold">onPress&lt;/span>={() =&amp;gt; navigation.push(&lt;span style="color:#0086d2">&amp;#34;Details&amp;#34;&lt;/span>)}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> /&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Button&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">title&lt;/span>=&lt;span style="color:#0086d2">&amp;#34;Go back&amp;#34;&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">onPress&lt;/span>={() =&amp;gt; navigation.goBack()} /&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Button&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">title&lt;/span>=&lt;span style="color:#0086d2">&amp;#34;Go to Home&amp;#34;&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">onPress&lt;/span>={() =&amp;gt; navigation.navigate(&lt;span style="color:#0086d2">&amp;#34;Home&amp;#34;&lt;/span>)} /&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">View&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> );
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> Stack = createNativeStackNavigator();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">export&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">default&lt;/span> App = () =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">return&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">NavigationContainer&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Stack.Navigator&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">initialRouteName&lt;/span>=&lt;span style="color:#0086d2">&amp;#34;Home&amp;#34;&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Stack.Screen&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">name&lt;/span>=&lt;span style="color:#0086d2">&amp;#34;Home&amp;#34;&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">component&lt;/span>={HomeScreen} /&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Stack.Screen&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">name&lt;/span>=&lt;span style="color:#0086d2">&amp;#34;Details&amp;#34;&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">component&lt;/span>={DetailsScreen} /&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">Stack.Navigator&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">NavigationContainer&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> );
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> styles = StyleSheet.create({
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> container: { flex: &lt;span style="color:#0086f7;font-weight:bold">1&lt;/span>, alignItems: &lt;span style="color:#0086d2">&amp;#34;center&amp;#34;&lt;/span>, justifyContent: &lt;span style="color:#0086d2">&amp;#34;center&amp;#34;&lt;/span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> text: { fontSize: &lt;span style="color:#0086f7;font-weight:bold">18&lt;/span>, paddingBottom: &lt;span style="color:#0086f7;font-weight:bold">10&lt;/span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>});
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="passage-de-paramètres-entre-écrans" >Passage de paramètres entre écrans
&lt;span>
&lt;a href="#passage-de-param%c3%a8tres-entre-%c3%a9crans">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;p>&lt;code>navigation.navigate&lt;/code> permet de transmettre des données d&amp;rsquo;un écran à l&amp;rsquo;autre sous la forme d&amp;rsquo;un objet JavaScript.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Navigate to &amp;#34;RouteName&amp;#34;, passing some parameters
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>navigation.navigate(&lt;span style="color:#0086d2">&amp;#34;RouteName&amp;#34;&lt;/span>, { &lt;span style="color:#080;background-color:#0f140f;font-style:italic">/* params go here */&lt;/span> })
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>L&amp;rsquo;écran d&amp;rsquo;arrivée peut lire les paramètres grâce à la propriété &lt;code>params&lt;/code> du &lt;em>prop&lt;/em> &lt;code>route&lt;/code>.&lt;/p>
&lt;p>Ces paramètres sont équivalents à ceux d&amp;rsquo;une URL. Ils ne doivent pas contenir les données métiers de l&amp;rsquo;application (plutôt gérés via l&amp;rsquo;état).&lt;/p>
&lt;hr>
&lt;h3 id="exemple-de-passage-de-paramètres" >Exemple de passage de paramètres
&lt;span>
&lt;a href="#exemple-de-passage-de-param%c3%a8tres">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-jsx" data-lang="jsx">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> React from &lt;span style="color:#0086d2">&amp;#34;react&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> { StyleSheet, View, Text, Button } from &lt;span style="color:#0086d2">&amp;#34;react-native&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> { NavigationContainer } from &lt;span style="color:#0086d2">&amp;#34;@react-navigation/native&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> { createNativeStackNavigator } from &lt;span style="color:#0086d2">&amp;#34;@react-navigation/native-stack&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> HomeScreen = ({ navigation }) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">return&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">View&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">style&lt;/span>={styles.container}&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Text&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">style&lt;/span>={styles.text}&amp;gt;This is the home screen&amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">Text&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Button&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff0086;font-weight:bold">title&lt;/span>=&lt;span style="color:#0086d2">&amp;#34;Go to Details&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff0086;font-weight:bold">onPress&lt;/span>={() =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Navigate to the Details route with 2 params
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> navigation.navigate(&lt;span style="color:#0086d2">&amp;#34;Details&amp;#34;&lt;/span>, {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> itemId: &lt;span style="color:#0086f7;font-weight:bold">86&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> otherParam: &lt;span style="color:#0086d2">&amp;#34;anything you want here&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> });
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> /&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">View&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> );
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> DetailsScreen = ({ navigation, route }) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Get the params
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> { itemId, otherParam } = route.params;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">return&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">View&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">style&lt;/span>={styles.container}&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Text&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">style&lt;/span>={styles.text}&amp;gt;This is the details screen&amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">Text&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#080;background-color:#0f140f;font-style:italic">/* Convert params to JSON strings before display */&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Text&lt;/span>&amp;gt;itemId: {JSON.stringify(itemId)}&amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">Text&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Text&lt;/span>&amp;gt;otherParam: {JSON.stringify(otherParam)}&amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">Text&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Button&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff0086;font-weight:bold">title&lt;/span>=&lt;span style="color:#0086d2">&amp;#34;Go to Details... again&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff0086;font-weight:bold">onPress&lt;/span>={() =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Navigate to Details again with one param
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> navigation.push(&lt;span style="color:#0086d2">&amp;#34;Details&amp;#34;&lt;/span>, {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> itemId: Math.floor(Math.random() * &lt;span style="color:#0086f7;font-weight:bold">100&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> });
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> /&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Button&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">title&lt;/span>=&lt;span style="color:#0086d2">&amp;#34;Go back&amp;#34;&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">onPress&lt;/span>={() =&amp;gt; navigation.goBack()} /&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Button&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">title&lt;/span>=&lt;span style="color:#0086d2">&amp;#34;Go to Home&amp;#34;&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">onPress&lt;/span>={() =&amp;gt; navigation.navigate(&lt;span style="color:#0086d2">&amp;#34;Home&amp;#34;&lt;/span>)} /&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">View&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> );
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> Stack = createNativeStackNavigator();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">export&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">default&lt;/span> App = () =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">return&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">NavigationContainer&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Stack.Navigator&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">initialRouteName&lt;/span>=&lt;span style="color:#0086d2">&amp;#34;Home&amp;#34;&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Stack.Screen&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">name&lt;/span>=&lt;span style="color:#0086d2">&amp;#34;Home&amp;#34;&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">component&lt;/span>={HomeScreen} /&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Stack.Screen&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">name&lt;/span>=&lt;span style="color:#0086d2">&amp;#34;Details&amp;#34;&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">component&lt;/span>={DetailsScreen} /&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">Stack.Navigator&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">NavigationContainer&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> );
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> styles = StyleSheet.create({
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> container: { flex: &lt;span style="color:#0086f7;font-weight:bold">1&lt;/span>, alignItems: &lt;span style="color:#0086d2">&amp;#34;center&amp;#34;&lt;/span>, justifyContent: &lt;span style="color:#0086d2">&amp;#34;center&amp;#34;&lt;/span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> text: { fontSize: &lt;span style="color:#0086f7;font-weight:bold">18&lt;/span>, paddingBottom: &lt;span style="color:#0086f7;font-weight:bold">10&lt;/span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>});
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="en-tête-des-écrans" >En-tête des écrans
&lt;span>
&lt;a href="#en-t%c3%aate-des-%c3%a9crans">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;p>La &lt;em>prop&lt;/em> &lt;code>screenOptions&lt;/code> de &lt;code>StackNavigator&lt;/code> permet de configurer l&amp;rsquo;en-tête commun à tous les écrans. La couleur de la barre de statut du téléphone peut être harmonisée grâce au composant &lt;a href="https://reactnavigation.org/docs/status-bar/">StatusBar&lt;/a>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-jsx" data-lang="jsx">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> React from &lt;span style="color:#0086d2">&amp;#34;react&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> { StyleSheet, View, Text, Button, StatusBar } from &lt;span style="color:#0086d2">&amp;#34;react-native&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> { NavigationContainer } from &lt;span style="color:#0086d2">&amp;#34;@react-navigation/native&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> { createNativeStackNavigator } from &lt;span style="color:#0086d2">&amp;#34;@react-navigation/native-stack&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// [...]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> Stack = createNativeStackNavigator();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">export&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">default&lt;/span> App = () =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">return&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">NavigationContainer&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">StatusBar&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">barStyle&lt;/span>=&lt;span style="color:#0086d2">&amp;#34;light-content&amp;#34;&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">backgroundColor&lt;/span>=&lt;span style="color:#0086d2">&amp;#34;#f4511e&amp;#34;&lt;/span> /&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Stack.Navigator&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff0086;font-weight:bold">initialRouteName&lt;/span>=&lt;span style="color:#0086d2">&amp;#34;Home&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff0086;font-weight:bold">screenOptions&lt;/span>={{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> headerStyle: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> backgroundColor: &lt;span style="color:#0086d2">&amp;#34;#f4511e&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> headerTintColor: &lt;span style="color:#0086d2">&amp;#34;#fff&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> headerTitleStyle: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> fontWeight: &lt;span style="color:#0086d2">&amp;#34;bold&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Stack.Screen&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff0086;font-weight:bold">name&lt;/span>=&lt;span style="color:#0086d2">&amp;#34;Home&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff0086;font-weight:bold">component&lt;/span>={HomeScreen}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff0086;font-weight:bold">options&lt;/span>={{ title: &lt;span style="color:#0086d2">&amp;#34;My home&amp;#34;&lt;/span> }}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> /&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Stack.Screen&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">name&lt;/span>=&lt;span style="color:#0086d2">&amp;#34;Details&amp;#34;&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">component&lt;/span>={DetailsScreen} /&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">Stack.Navigator&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">NavigationContainer&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> );
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> styles = StyleSheet.create({
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> container: { flex: &lt;span style="color:#0086f7;font-weight:bold">1&lt;/span>, alignItems: &lt;span style="color:#0086d2">&amp;#34;center&amp;#34;&lt;/span>, justifyContent: &lt;span style="color:#0086d2">&amp;#34;center&amp;#34;&lt;/span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> text: { fontSize: &lt;span style="color:#0086f7;font-weight:bold">18&lt;/span>, paddingBottom: &lt;span style="color:#0086f7;font-weight:bold">10&lt;/span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>});
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="restructuration-du-projet-1" >Restructuration du projet
&lt;span>
&lt;a href="#restructuration-du-projet-1">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;ul>
&lt;li>&lt;code>screens/&lt;/code> stocke les composants définissant chaque écran de l&amp;rsquo;application.&lt;/li>
&lt;li>&lt;code>navigation/&lt;/code> stocke les composants qui organisent la navigation entre les écrans.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-txt" data-lang="txt">&lt;span style="display:flex;">&lt;span>MyApp/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── screens/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ ├── DetailsScreen.js
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ ├── HomeScreen.js
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── navigation/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ ├── RootStackNavigator.js
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── theme/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ ├── colors.js
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ ├── styles.js
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>└── App.js
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="exemple--navigation-par-onglets" >Exemple : navigation par onglets
&lt;span>
&lt;a href="#exemple--navigation-par-onglets">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;p>&lt;a href="https://github.com/ensc-mobi/TabNavigatorDemo">https://github.com/ensc-mobi/TabNavigatorDemo&lt;/a>&lt;/p>
&lt;p>&lt;img src="images/tab-navigator-demo.png" alt="BottomTabNavigator demo">&lt;/p>
&lt;hr>
&lt;h3 id="tabnavigator" >TabNavigator
&lt;span>
&lt;a href="#tabnavigator">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;p>Affichage d&amp;rsquo;onglets en bas de l&amp;rsquo;écran.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-jsx" data-lang="jsx">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> React from &lt;span style="color:#0086d2">&amp;#34;react&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> { StyleSheet, Text, View } from &lt;span style="color:#0086d2">&amp;#34;react-native&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> Ionicons from &lt;span style="color:#0086d2">&amp;#34;react-native-vector-icons/Ionicons&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> { NavigationContainer } from &lt;span style="color:#0086d2">&amp;#34;@react-navigation/native&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> { createBottomTabNavigator } from &lt;span style="color:#0086d2">&amp;#34;@react-navigation/bottom-tabs&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> HomeScreen = () =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">return&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">View&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">style&lt;/span>={styles.container}&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Text&lt;/span>&amp;gt;This is the home screen&amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">Text&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">View&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> );
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> SettingsScreen = () =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">return&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">View&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">style&lt;/span>={styles.container}&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Text&lt;/span>&amp;gt;This is the settings screen&amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">Text&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">View&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> );
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> Tab = createBottomTabNavigator();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">export&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">default&lt;/span> App = () =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">return&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">NavigationContainer&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Tab.Navigator&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Tab.Screen&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">name&lt;/span>=&lt;span style="color:#0086d2">&amp;#34;Home&amp;#34;&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">component&lt;/span>={HomeScreen} /&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Tab.Screen&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">name&lt;/span>=&lt;span style="color:#0086d2">&amp;#34;Settings&amp;#34;&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">component&lt;/span>={SettingsScreen} /&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">Tab.Navigator&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">NavigationContainer&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> );
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> styles = StyleSheet.create({
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> container: { flex: &lt;span style="color:#0086f7;font-weight:bold">1&lt;/span>, justifyContent: &lt;span style="color:#0086d2">&amp;#34;center&amp;#34;&lt;/span>, alignItems: &lt;span style="color:#0086d2">&amp;#34;center&amp;#34;&lt;/span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>});
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="paramétrage-de-lapparence" >Paramétrage de l&amp;rsquo;apparence
&lt;span>
&lt;a href="#param%c3%a9trage-de-lapparence">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;p>Réalisé grâce à la &lt;em>prop&lt;/em> &lt;code>screenOptions&lt;/code> de &lt;code>TabNavigator&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-jsx" data-lang="jsx">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> React from &lt;span style="color:#0086d2">&amp;#34;react&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> { StyleSheet, Text, View, Button, StatusBar } from &lt;span style="color:#0086d2">&amp;#34;react-native&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> Ionicons from &lt;span style="color:#0086d2">&amp;#34;react-native-vector-icons/Ionicons&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> { NavigationContainer } from &lt;span style="color:#0086d2">&amp;#34;@react-navigation/native&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> { createBottomTabNavigator } from &lt;span style="color:#0086d2">&amp;#34;@react-navigation/bottom-tabs&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// [...]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> Tab = createBottomTabNavigator();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">export&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">default&lt;/span> App = () =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">return&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">NavigationContainer&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">StatusBar&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">barStyle&lt;/span>=&lt;span style="color:#0086d2">&amp;#34;light-content&amp;#34;&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">backgroundColor&lt;/span>=&lt;span style="color:#0086d2">&amp;#34;#f4511e&amp;#34;&lt;/span> /&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Tab.Navigator&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff0086;font-weight:bold">screenOptions&lt;/span>={({ route }) =&amp;gt; ({
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Icons will be different if the tab is focused
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> tabBarIcon: ({ focused, color, size }) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">let&lt;/span> iconName;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">if&lt;/span> (route.name === &lt;span style="color:#0086d2">&amp;#34;Home&amp;#34;&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> iconName = focused
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ? &lt;span style="color:#0086d2">&amp;#34;ios-information-circle&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> : &lt;span style="color:#0086d2">&amp;#34;ios-information-circle-outline&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#fb660a;font-weight:bold">else&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">if&lt;/span> (route.name === &lt;span style="color:#0086d2">&amp;#34;Settings&amp;#34;&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> iconName = focused ? &lt;span style="color:#0086d2">&amp;#34;ios-list&amp;#34;&lt;/span> : &lt;span style="color:#0086d2">&amp;#34;ios-list-outline&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// You can return any component that you like here!
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">return&lt;/span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Ionicons&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">name&lt;/span>={iconName} &lt;span style="color:#ff0086;font-weight:bold">size&lt;/span>={size} &lt;span style="color:#ff0086;font-weight:bold">color&lt;/span>={color} /&amp;gt;;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tabBarActiveTintColor: &lt;span style="color:#0086d2">&amp;#34;tomato&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tabBarInactiveTintColor: &lt;span style="color:#0086d2">&amp;#34;gray&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> headerStyle: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> backgroundColor: &lt;span style="color:#0086d2">&amp;#34;#f4511e&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> headerTintColor: &lt;span style="color:#0086d2">&amp;#34;#fff&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> headerTitleStyle: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> fontWeight: &lt;span style="color:#0086d2">&amp;#34;bold&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> })}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Tab.Screen&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">name&lt;/span>=&lt;span style="color:#0086d2">&amp;#34;Home&amp;#34;&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">component&lt;/span>={HomeScreen} /&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Tab.Screen&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">name&lt;/span>=&lt;span style="color:#0086d2">&amp;#34;Settings&amp;#34;&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">component&lt;/span>={SettingsScreen} /&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">Tab.Navigator&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">NavigationContainer&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> );
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> styles = StyleSheet.create({
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> container: { flex: &lt;span style="color:#0086f7;font-weight:bold">1&lt;/span>, justifyContent: &lt;span style="color:#0086d2">&amp;#34;center&amp;#34;&lt;/span>, alignItems: &lt;span style="color:#0086d2">&amp;#34;center&amp;#34;&lt;/span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> text: { fontSize: &lt;span style="color:#0086f7;font-weight:bold">18&lt;/span>, paddingBottom: &lt;span style="color:#0086f7;font-weight:bold">10&lt;/span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>});
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="navigation-entre-onglets" >Navigation entre onglets
&lt;span>
&lt;a href="#navigation-entre-onglets">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;ul>
&lt;li>API identique à la navigation entre les écrans d&amp;rsquo;un &lt;code>StackNavigator&lt;/code>.&lt;/li>
&lt;li>L&amp;rsquo;objet &lt;code>navigation&lt;/code> doit être passé comme &lt;em>prop&lt;/em> de l&amp;rsquo;écran.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-jsx" data-lang="jsx">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> React from &lt;span style="color:#0086d2">&amp;#34;react&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> { StyleSheet, Text, View, Button } from &lt;span style="color:#0086d2">&amp;#34;react-native&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> Ionicons from &lt;span style="color:#0086d2">&amp;#34;react-native-vector-icons/Ionicons&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> { NavigationContainer } from &lt;span style="color:#0086d2">&amp;#34;@react-navigation/native&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> { createBottomTabNavigator } from &lt;span style="color:#0086d2">&amp;#34;@react-navigation/bottom-tabs&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> HomeScreen = ({ navigation }) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">return&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">View&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">style&lt;/span>={styles.container}&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Text&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">style&lt;/span>={styles.text}&amp;gt;This is the home screen&amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">Text&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Button&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff0086;font-weight:bold">title&lt;/span>=&lt;span style="color:#0086d2">&amp;#34;Go to Settings&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff0086;font-weight:bold">onPress&lt;/span>={() =&amp;gt; navigation.navigate(&lt;span style="color:#0086d2">&amp;#34;Settings&amp;#34;&lt;/span>)}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> /&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">View&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> );
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> SettingsScreen = ({ navigation }) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">return&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">View&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">style&lt;/span>={styles.container}&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Text&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">style&lt;/span>={styles.text}&amp;gt;This is the settings screen&amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">Text&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Button&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">title&lt;/span>=&lt;span style="color:#0086d2">&amp;#34;Go to Home&amp;#34;&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">onPress&lt;/span>={() =&amp;gt; navigation.navigate(&lt;span style="color:#0086d2">&amp;#34;Home&amp;#34;&lt;/span>)} /&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">View&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> );
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> Tab = createBottomTabNavigator();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">export&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">default&lt;/span> App = () =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">return&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">NavigationContainer&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Tab.Navigator&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff0086;font-weight:bold">screenOptions&lt;/span>={({ route }) =&amp;gt; ({
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tabBarIcon: ({ focused, color, size }) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">let&lt;/span> iconName;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">if&lt;/span> (route.name === &lt;span style="color:#0086d2">&amp;#34;Home&amp;#34;&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> iconName = focused
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ? &lt;span style="color:#0086d2">&amp;#34;ios-information-circle&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> : &lt;span style="color:#0086d2">&amp;#34;ios-information-circle-outline&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#fb660a;font-weight:bold">else&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">if&lt;/span> (route.name === &lt;span style="color:#0086d2">&amp;#34;Settings&amp;#34;&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> iconName = focused ? &lt;span style="color:#0086d2">&amp;#34;ios-list&amp;#34;&lt;/span> : &lt;span style="color:#0086d2">&amp;#34;ios-list-outline&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// You can return any component that you like here!
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">return&lt;/span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Ionicons&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">name&lt;/span>={iconName} &lt;span style="color:#ff0086;font-weight:bold">size&lt;/span>={size} &lt;span style="color:#ff0086;font-weight:bold">color&lt;/span>={color} /&amp;gt;;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tabBarActiveTintColor: &lt;span style="color:#0086d2">&amp;#34;tomato&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tabBarInactiveTintColor: &lt;span style="color:#0086d2">&amp;#34;gray&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> })}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Tab.Screen&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">name&lt;/span>=&lt;span style="color:#0086d2">&amp;#34;Home&amp;#34;&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">component&lt;/span>={HomeScreen} /&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Tab.Screen&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">name&lt;/span>=&lt;span style="color:#0086d2">&amp;#34;Settings&amp;#34;&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">component&lt;/span>={SettingsScreen} /&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">Tab.Navigator&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">NavigationContainer&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> );
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> styles = StyleSheet.create({
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> container: { flex: &lt;span style="color:#0086f7;font-weight:bold">1&lt;/span>, justifyContent: &lt;span style="color:#0086d2">&amp;#34;center&amp;#34;&lt;/span>, alignItems: &lt;span style="color:#0086d2">&amp;#34;center&amp;#34;&lt;/span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> text: { fontSize: &lt;span style="color:#0086f7;font-weight:bold">18&lt;/span>, paddingBottom: &lt;span style="color:#0086f7;font-weight:bold">10&lt;/span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>});
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="affichage-de-piles-dans-les-onglets" >Affichage de piles dans les onglets
&lt;span>
&lt;a href="#affichage-de-piles-dans-les-onglets">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-jsx" data-lang="jsx">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> React from &lt;span style="color:#0086d2">&amp;#34;react&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> { StyleSheet, Text, View, Button, StatusBar } from &lt;span style="color:#0086d2">&amp;#34;react-native&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> Ionicons from &lt;span style="color:#0086d2">&amp;#34;react-native-vector-icons/Ionicons&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> { NavigationContainer } from &lt;span style="color:#0086d2">&amp;#34;@react-navigation/native&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> { createNativeStackNavigator } from &lt;span style="color:#0086d2">&amp;#34;@react-navigation/native-stack&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> { createBottomTabNavigator } from &lt;span style="color:#0086d2">&amp;#34;@react-navigation/bottom-tabs&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> HomeScreen = ({ navigation }) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">return&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">View&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">style&lt;/span>={styles.container}&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Text&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">style&lt;/span>={styles.text}&amp;gt;This is the home screen&amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">Text&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Button&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff0086;font-weight:bold">title&lt;/span>=&lt;span style="color:#0086d2">&amp;#34;Go to Details&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff0086;font-weight:bold">onPress&lt;/span>={() =&amp;gt; navigation.navigate(&lt;span style="color:#0086d2">&amp;#34;Details&amp;#34;&lt;/span>)}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> /&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">View&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> );
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> DetailsScreen = () =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">return&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">View&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">style&lt;/span>={styles.container}&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Text&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">style&lt;/span>={styles.text}&amp;gt;This is the details screen&amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">Text&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">View&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> );
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> SettingsScreen = () =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">return&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">View&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">style&lt;/span>={styles.container}&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Text&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">style&lt;/span>={styles.text}&amp;gt;This is the settings screen&amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">Text&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">View&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> );
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Screen stack for home tab
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> HomeStack = createNativeStackNavigator();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> HomeStackNavigator = () =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">return&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">HomeStack.Navigator&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">initialRouteName&lt;/span>=&lt;span style="color:#0086d2">&amp;#34;Home&amp;#34;&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">screenOptions&lt;/span>={screenOptions}&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">HomeStack.Screen&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff0086;font-weight:bold">name&lt;/span>=&lt;span style="color:#0086d2">&amp;#34;Home&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff0086;font-weight:bold">component&lt;/span>={HomeScreen}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff0086;font-weight:bold">options&lt;/span>={{ title: &lt;span style="color:#0086d2">&amp;#34;My home&amp;#34;&lt;/span> }}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> /&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">HomeStack.Screen&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">name&lt;/span>=&lt;span style="color:#0086d2">&amp;#34;Details&amp;#34;&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">component&lt;/span>={DetailsScreen} /&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">HomeStack.Navigator&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> );
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Screen stack for settings tab
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> SettingsStack = createNativeStackNavigator();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> SettingsStackNavigator = () =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">return&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">SettingsStack.Navigator&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff0086;font-weight:bold">initialRouteName&lt;/span>=&lt;span style="color:#0086d2">&amp;#34;Home&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff0086;font-weight:bold">screenOptions&lt;/span>={screenOptions}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">SettingsStack.Screen&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">name&lt;/span>=&lt;span style="color:#0086d2">&amp;#34;Settings&amp;#34;&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">component&lt;/span>={SettingsScreen} /&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">SettingsStack.Navigator&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> );
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> Tab = createBottomTabNavigator();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">export&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">default&lt;/span> App = () =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">return&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">NavigationContainer&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">StatusBar&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">barStyle&lt;/span>=&lt;span style="color:#0086d2">&amp;#34;light-content&amp;#34;&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">backgroundColor&lt;/span>=&lt;span style="color:#0086d2">&amp;#34;#f4511e&amp;#34;&lt;/span> /&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Tab.Navigator&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff0086;font-weight:bold">screenOptions&lt;/span>={({ route }) =&amp;gt; ({
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Icons will be different if the tab is focused
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> tabBarIcon: ({ focused, color, size }) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">let&lt;/span> iconName;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">if&lt;/span> (route.name === &lt;span style="color:#0086d2">&amp;#34;HomeStack&amp;#34;&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> iconName = focused
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ? &lt;span style="color:#0086d2">&amp;#34;ios-information-circle&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> : &lt;span style="color:#0086d2">&amp;#34;ios-information-circle-outline&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#fb660a;font-weight:bold">else&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">if&lt;/span> (route.name === &lt;span style="color:#0086d2">&amp;#34;SettingsStack&amp;#34;&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> iconName = focused ? &lt;span style="color:#0086d2">&amp;#34;ios-list&amp;#34;&lt;/span> : &lt;span style="color:#0086d2">&amp;#34;ios-list-outline&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// You can return any component that you like here!
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">return&lt;/span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Ionicons&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">name&lt;/span>={iconName} &lt;span style="color:#ff0086;font-weight:bold">size&lt;/span>={size} &lt;span style="color:#ff0086;font-weight:bold">color&lt;/span>={color} /&amp;gt;;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tabBarActiveTintColor: &lt;span style="color:#0086d2">&amp;#34;tomato&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tabBarInactiveTintColor: &lt;span style="color:#0086d2">&amp;#34;gray&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Hiding tab navigator header to show only stack header
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> headerShown: &lt;span style="color:#fb660a;font-weight:bold">false&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> })}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Tab.Screen&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">name&lt;/span>=&lt;span style="color:#0086d2">&amp;#34;HomeStack&amp;#34;&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">component&lt;/span>={HomeStackNavigator} /&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Tab.Screen&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">name&lt;/span>=&lt;span style="color:#0086d2">&amp;#34;SettingsStack&amp;#34;&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">component&lt;/span>={SettingsStackNavigator} /&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">Tab.Navigator&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">NavigationContainer&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> );
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> styles = StyleSheet.create({
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> container: { flex: &lt;span style="color:#0086f7;font-weight:bold">1&lt;/span>, justifyContent: &lt;span style="color:#0086d2">&amp;#34;center&amp;#34;&lt;/span>, alignItems: &lt;span style="color:#0086d2">&amp;#34;center&amp;#34;&lt;/span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> text: { fontSize: &lt;span style="color:#0086f7;font-weight:bold">18&lt;/span>, paddingBottom: &lt;span style="color:#0086f7;font-weight:bold">10&lt;/span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>});
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Common stack header options
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> screenOptions = {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> headerStyle: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> backgroundColor: &lt;span style="color:#0086d2">&amp;#34;#f4511e&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> headerTintColor: &lt;span style="color:#0086d2">&amp;#34;#fff&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> headerTitleStyle: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> fontWeight: &lt;span style="color:#0086d2">&amp;#34;bold&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="restructuration-du-projet-2" >Restructuration du projet
&lt;span>
&lt;a href="#restructuration-du-projet-2">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-txt" data-lang="txt">&lt;span style="display:flex;">&lt;span>MyApp/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── screens/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ ├── DetailsScreen.js
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ ├── HomeScreen.js
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ ├── SettingsScreen.js
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── navigation/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ ├── HomeStackNavigator.js
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ ├── SettingsStackNavigator.js
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ ├── RootTabNavigator.js
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── theme/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ ├── colors.js
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ ├── styles.js
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>└── App.js
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="autres-possibilités-de-react-navigation" >Autres possibilités de react-navigation
&lt;span>
&lt;a href="#autres-possibilit%c3%a9s-de-react-navigation">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;ul>
&lt;li>&lt;a href="https://reactnavigation.org/docs/drawer-based-navigation">Navigation par menu accordéon&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://reactnavigation.org/docs/modal">Ecran modal&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://reactnavigation.org/docs/auth-flow">Gestion de l&amp;rsquo;authentification&lt;/a>&lt;/li>
&lt;li>&amp;hellip;&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="utilisation-dapi-web" >Utilisation d&amp;rsquo;API web
&lt;span>
&lt;a href="#utilisation-dapi-web">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;hr>
&lt;h3 id="la-notion-dapi" >La notion d&amp;rsquo;API
&lt;span>
&lt;a href="#la-notion-dapi">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;p>Une &lt;strong>API&lt;/strong> (&lt;em>Application Programming Interface&lt;/em>) est un point d&amp;rsquo;entrée programmatique dans un système.&lt;/p>
&lt;p>Elle fournit un moyen d&amp;rsquo;interagir avec ce système.&lt;/p>
&lt;p>Les API permettent aux développeurs d&amp;rsquo;intégrer des services externes dans leurs applications.&lt;/p>
&lt;hr>
&lt;h3 id="spécificités-des-api-web" >Spécificités des API web
&lt;span>
&lt;a href="#sp%c3%a9cificit%c3%a9s-des-api-web">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;p>Une &lt;strong>API web&lt;/strong> (appelée parfois service web) est une API accessible via les technologies du web : HTTP ou HTTPS.&lt;/p>
&lt;p>Les API web utilisent le plus souvent le format de donnée &lt;strong>JSON&lt;/strong>.&lt;/p>
&lt;p>Certaines sont librement utilisables, d&amp;rsquo;autres nécessitent une authentification du client.&lt;/p>
&lt;hr>
&lt;h3 id="exemples-dapi-web" >Exemples d&amp;rsquo;API web
&lt;span>
&lt;a href="#exemples-dapi-web">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;ul>
&lt;li>&lt;a href="https://pokeapi.co/">PokéAPI&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://swapi.dev/">Star Wars API&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://en.wikipedia.org/w/api.php?">Wikipedia&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://developer.spotify.com/documentation/web-api/">Spotify&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.omdbapi.com/">OMDb API&lt;/a>&lt;/li>
&lt;li>&amp;hellip;&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="outils-pour-la-gestion-des-api-web" >Outils pour la gestion des API web
&lt;span>
&lt;a href="#outils-pour-la-gestion-des-api-web">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;ul>
&lt;li>&lt;a href="https://www.getpostman.com/">Postman&lt;/a>&lt;/li>
&lt;li>Extension &lt;a href="https://addons.mozilla.org/fr/firefox/addon/restclient/">RESTClient&lt;/a> pour Firefox&lt;/li>
&lt;li>&lt;a href="https://insomnia.rest/">Insomnia&lt;/a>&lt;/li>
&lt;li>&amp;hellip;&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="exemple-dutilisation-dune-api" >Exemple d&amp;rsquo;utilisation d&amp;rsquo;une API
&lt;span>
&lt;a href="#exemple-dutilisation-dune-api">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;p>&lt;a href="https://github.com/ensc-mobi/RandomBeer">https://github.com/ensc-mobi/RandomBeer&lt;/a>&lt;/p>
&lt;p>&lt;img src="images/random_beer.png" alt="Random Beer app">&lt;/p>
&lt;hr>
&lt;h3 id="appels-réseau-asynchrones-avec-fetch" >Appels réseau asynchrones avec &lt;code>fetch&lt;/code>
&lt;span>
&lt;a href="#appels-r%c3%a9seau-asynchrones-avec-fetch">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;p>Une &lt;a href="https://web.dev/promises/">promesse&lt;/a> (&lt;em>promise&lt;/em>) est un objet qui encapsule une opération dont le résultat n&amp;rsquo;est pas encore connu.&lt;/p>
&lt;p>La fonction JavaScript &lt;a href="https://developers.google.com/web/updates/2015/03/introduction-to-fetch">fetch()&lt;/a> exploite les possibilités des promesses.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Envoie une requête HTTP asynchrone vers l&amp;#39;URL spécifiée
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>fetch(url)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .then(() =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Code appelé ultérieurement si la requête réussit
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> })
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#fb660a;font-weight:bold">catch&lt;/span>(() =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Code appelé ultérieurement si la requête échoue
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> });
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="accès-à-une-ressource-distante" >Accès à une ressource distante
&lt;span>
&lt;a href="#acc%c3%a8s-%c3%a0-une-ressource-distante">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Envoi d&amp;#39;une requête HTTP asynchrone vers l&amp;#39;URL spécifiée
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// La réponse reçue ici contient des données JSON
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>fetch(&lt;span style="color:#0086d2">&amp;#34;http://my-api-url&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Accès au contenu JSON de la réponse
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> .then((response) =&amp;gt; response.json())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .then((content) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Utilisation du contenu de la réponse
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// `content` est un objet ou un tableau JavaScript
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> })
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#fb660a;font-weight:bold">catch&lt;/span>((error) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> console.error(error);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> });
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="mise-à-jour-dune-ressource-distante" >Mise à jour d&amp;rsquo;une ressource distante
&lt;span>
&lt;a href="#mise-%c3%a0-jour-dune-ressource-distante">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>fetch(&lt;span style="color:#0086d2">&amp;#34;https://mywebsite.com/endpoint/&amp;#34;&lt;/span>, {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> method: &lt;span style="color:#0086d2">&amp;#34;POST&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> headers: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Accept: &lt;span style="color:#0086d2">&amp;#34;application/json&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#0086d2">&amp;#34;Content-Type&amp;#34;&lt;/span>: &lt;span style="color:#0086d2">&amp;#34;application/json&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> body: JSON.stringify({
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> firstParam: &lt;span style="color:#0086d2">&amp;#34;yourValue&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> secondParam: &lt;span style="color:#0086d2">&amp;#34;yourOtherValue&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>});
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="appels-réseau-asynchrones-avec-asyncawait" >Appels réseau asynchrones avec &lt;code>async/await&lt;/code>
&lt;span>
&lt;a href="#appels-r%c3%a9seau-asynchrones-avec-asyncawait">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;p>Les fonctions utilisant &lt;code>await&lt;/code> doivent être déclarées avec le mot-clé &lt;code>async&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Cette fonction renvoie une promesse
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> fetchRemoteApi = &lt;span style="color:#fb660a;font-weight:bold">async&lt;/span> () =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">try&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Envoi d&amp;#39;une requête HTTP asynchrone vers l&amp;#39;URL spécifiée
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// La réponse reçue ici contient des données JSON
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> response = &lt;span style="color:#fb660a;font-weight:bold">await&lt;/span> fetch(&lt;span style="color:#0086d2">&amp;#34;http://my-api-url&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Accès au contenu JSON de la réponse
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> content = &lt;span style="color:#fb660a;font-weight:bold">await&lt;/span> response.json();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Utilisation du contenu de la réponse
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// `content` est un objet ou un tableau JavaScript
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> } &lt;span style="color:#fb660a;font-weight:bold">catch&lt;/span> (e) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Gestion de l&amp;#39;erreur
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>fetchRemoteApi();
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="exécution-de-code-à-linitialisation-dun-composant" >Exécution de code à l&amp;rsquo;initialisation d&amp;rsquo;un composant
&lt;span>
&lt;a href="#ex%c3%a9cution-de-code-%c3%a0-linitialisation-dun-composant">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;ul>
&lt;li>Le hook &lt;a href="https://reactjs.org/docs/hooks-effect.html">useEffect&lt;/a> permet de déclencher des traitements à certains moments du cycle de vie d&amp;rsquo;un composant.&lt;/li>
&lt;li>Par défaut, le code associé est appelé à chaque réaffichage du composant. On peut définir une liste des variables dont le changement déclenche une nouvelle exécution du code du &lt;code>hook&lt;/code>.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>useEffect(() =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Code exécuté uniquement au chargement (mounting) du composant
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>}, []);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="affichage-pendant-le-chargement" >Affichage pendant le chargement
&lt;span>
&lt;a href="#affichage-pendant-le-chargement">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;ul>
&lt;li>Le composant &lt;a href="https://reactnative.dev/docs/activityindicator">ActivityIndicator&lt;/a> permet d&amp;rsquo;afficher un &lt;em>spinner&lt;/em> pendant les actions potentiellement longues (chargements réseau, etc).&lt;/li>
&lt;li>Il est souvent associé à un booléen &lt;code>loading&lt;/code> ajouté à l&amp;rsquo;état du composant.&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="images/spinner.gif" alt="ActivityIndicator spinner">&lt;/p>
&lt;hr>
&lt;h3 id="mise-en-oeuvre-1" >Mise en oeuvre
&lt;span>
&lt;a href="#mise-en-oeuvre-1">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-jsx" data-lang="jsx">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> React, { useEffect } from &lt;span style="color:#0086d2">&amp;#34;react&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> { useState } from &lt;span style="color:#0086d2">&amp;#34;react&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> StyleSheet,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Text,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> View,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ActivityIndicator,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> TouchableOpacity,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>} from &lt;span style="color:#0086d2">&amp;#34;react-native&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// API endpoint
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> rootEndpoint = &lt;span style="color:#0086d2">&amp;#34;https://api.punkapi.com/v2&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// fetch API for a random beer
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> fetchRandomBeer = &lt;span style="color:#fb660a;font-weight:bold">async&lt;/span> () =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> response = &lt;span style="color:#fb660a;font-weight:bold">await&lt;/span> fetch(&lt;span style="color:#0086d2">`&lt;/span>&lt;span style="color:#0086d2">${&lt;/span>rootEndpoint&lt;span style="color:#0086d2">}&lt;/span>&lt;span style="color:#0086d2">/beers/random`&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> beers = &lt;span style="color:#fb660a;font-weight:bold">await&lt;/span> response.json();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Access first element of returned beer array
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">return&lt;/span> beers[&lt;span style="color:#0086f7;font-weight:bold">0&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">export&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">default&lt;/span> App = () =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Define state
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> [loading, setLoading] = useState(&lt;span style="color:#fb660a;font-weight:bold">true&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> [error, setError] = useState(&lt;span style="color:#fb660a;font-weight:bold">false&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> [beerName, setBeerName] = useState(&lt;span style="color:#0086d2">&amp;#34;&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> [beerDescription, setBeerDescription] = useState(&lt;span style="color:#0086d2">&amp;#34;&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Load a new beer
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> loadBeer = &lt;span style="color:#fb660a;font-weight:bold">async&lt;/span> () =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> setLoading(&lt;span style="color:#fb660a;font-weight:bold">true&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> setError(&lt;span style="color:#fb660a;font-weight:bold">false&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">try&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> beer = &lt;span style="color:#fb660a;font-weight:bold">await&lt;/span> fetchRandomBeer();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Update state
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> setBeerName(beer.name);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> setBeerDescription(beer.description);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#fb660a;font-weight:bold">catch&lt;/span> (e) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> setError(&lt;span style="color:#fb660a;font-weight:bold">true&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> setLoading(&lt;span style="color:#fb660a;font-weight:bold">false&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// The empty array [] prevents the effect from running at each re-render
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> useEffect(() =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// More details; https://www.robinwieruch.de/react-hooks-fetch-data/
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> loadBeer();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }, []);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">if&lt;/span> (loading) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">return&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">View&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">style&lt;/span>={styles.container}&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">ActivityIndicator&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">size&lt;/span>=&lt;span style="color:#0086d2">&amp;#34;large&amp;#34;&lt;/span> /&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">View&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> );
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">if&lt;/span> (error) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">return&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">View&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">style&lt;/span>={styles.container}&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Text&lt;/span>&amp;gt;Something went wrong :\&amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">Text&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">View&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> );
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">return&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">View&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">style&lt;/span>={styles.container}&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Text&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">style&lt;/span>={styles.name}&amp;gt;{beerName}&amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">Text&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Text&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">style&lt;/span>={styles.description}&amp;gt;{beerDescription}&amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">Text&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#080;background-color:#0f140f;font-style:italic">/* Add a button to fetch another beer */&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">TouchableOpacity&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff0086;font-weight:bold">style&lt;/span>={styles.button}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff0086;font-weight:bold">onPress&lt;/span>={() =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> loadBeer();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Text&lt;/span>&amp;gt;Grab a &lt;span style="color:#fb660a;font-weight:bold">new&lt;/span> beer!&amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">Text&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">TouchableOpacity&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">View&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> );
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> styles = StyleSheet.create({
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> container: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> flex: &lt;span style="color:#0086f7;font-weight:bold">1&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> justifyContent: &lt;span style="color:#0086d2">&amp;#34;center&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> margin: &lt;span style="color:#0086f7;font-weight:bold">30&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> fontSize: &lt;span style="color:#0086f7;font-weight:bold">18&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> fontWeight: &lt;span style="color:#0086d2">&amp;#34;700&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> marginBottom: &lt;span style="color:#0086f7;font-weight:bold">10&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> description: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> marginBottom: &lt;span style="color:#0086f7;font-weight:bold">10&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> button: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> borderWidth: &lt;span style="color:#0086f7;font-weight:bold">1&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> borderColor: &lt;span style="color:#0086d2">&amp;#34;black&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> borderRadius: &lt;span style="color:#0086f7;font-weight:bold">3&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> padding: &lt;span style="color:#0086f7;font-weight:bold">5&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> justifyContent: &lt;span style="color:#0086d2">&amp;#34;center&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> alignItems: &lt;span style="color:#0086d2">&amp;#34;center&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>});
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="restructuration-du-projet-3" >Restructuration du projet
&lt;span>
&lt;a href="#restructuration-du-projet-3">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;p>&lt;code>api/&lt;/code> rassemble les définitions des appels réseau asynchrones.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-txt" data-lang="txt">&lt;span style="display:flex;">&lt;span>MyApp/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── api/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ ├── punkapi.js
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── theme/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ ├── styles.js
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>└── App.js
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h2 id="persistance-locale" >Persistance locale
&lt;span>
&lt;a href="#persistance-locale">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;hr>
&lt;h3 id="besoin" >Besoin
&lt;span>
&lt;a href="#besoin">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;ul>
&lt;li>Les applications mobiles doivent souvent enregistrer une partie de leurs données (préférences utilisateurs, dernières informations consultées, etc) dans la mémoire de stockage du téléphone/tablette.&lt;/li>
&lt;li>Plusieurs solutions existent pour cela.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="exemple-de-stockage-local" >Exemple de stockage local
&lt;span>
&lt;a href="#exemple-de-stockage-local">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;p>&lt;a href="https://github.com/ensc-mobi/ShowerThoughts">https://github.com/ensc-mobi/ShowerThoughts&lt;/a>&lt;/p>
&lt;p>&lt;img src="images/showerthoughts.png" alt="Show thoughts">&lt;/p>
&lt;hr>
&lt;h3 id="stockage-local-avec-asyncstorage" >Stockage local avec &lt;code>AsyncStorage&lt;/code>
&lt;span>
&lt;a href="#stockage-local-avec-asyncstorage">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;ul>
&lt;li>Le composant &lt;a href="https://react-native-async-storage.github.io/async-storage/">AsyncStorage&lt;/a> permet de stocker localement des données sous forme de paires nom/valeur.&lt;/li>
&lt;li>Il gère des valeurs de type chaîne, ou objet après sérialisation JSON.&lt;/li>
&lt;li>Son API est basée sur les promesses et donc asynchrone.&lt;/li>
&lt;li>Il doit être ajouté au projet :&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>npx expo install @react-native-async-storage/async-storage
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="ecriture-de-données" >Ecriture de données
&lt;span>
&lt;a href="#ecriture-de-donn%c3%a9es">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;p>&lt;code>setItem&lt;/code> permet à la fois d&amp;rsquo;ajouter de nouveaux éléments et de modifier des éléments existants.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> AsyncStorage from &lt;span style="color:#0086d2">&amp;#34;@react-native-async-storage/async-storage&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> storeString = &lt;span style="color:#fb660a;font-weight:bold">async&lt;/span> (value) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">try&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">await&lt;/span> AsyncStorage.setItem(&lt;span style="color:#0086d2">&amp;#34;my_storage_key&amp;#34;&lt;/span>, value);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#fb660a;font-weight:bold">catch&lt;/span> (e) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Saving error
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> storeObject = &lt;span style="color:#fb660a;font-weight:bold">async&lt;/span> (value) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">try&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> jsonValue = JSON.stringify(value)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">await&lt;/span> AsyncStorage.setItem(&lt;span style="color:#0086d2">&amp;#34;my_storage_key&amp;#34;&lt;/span>, jsonValue)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#fb660a;font-weight:bold">catch&lt;/span> (e) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Saving error
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="lecture-de-données" >Lecture de données
&lt;span>
&lt;a href="#lecture-de-donn%c3%a9es">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;p>&lt;code>getItem&lt;/code> renvoie une promesse qui réussit si la valeur associée à la clé est trouvée, ou renvoie &lt;code>null&lt;/code> dans le cas contraire.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> AsyncStorage from &lt;span style="color:#0086d2">&amp;#34;@react-native-async-storage/async-storage&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> getString = &lt;span style="color:#fb660a;font-weight:bold">async&lt;/span> () =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">try&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> value = &lt;span style="color:#fb660a;font-weight:bold">await&lt;/span> AsyncStorage.getItem(&lt;span style="color:#0086d2">&amp;#34;my_storage_key&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">if&lt;/span> (value !== &lt;span style="color:#fb660a;font-weight:bold">null&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// value previously stored
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#fb660a;font-weight:bold">catch&lt;/span> (e) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Error reading value
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> getObject = &lt;span style="color:#fb660a;font-weight:bold">async&lt;/span> () =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">try&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> jsonValue = &lt;span style="color:#fb660a;font-weight:bold">await&lt;/span> AsyncStorage.getItem(&lt;span style="color:#0086d2">&amp;#34;my_storage_key&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">return&lt;/span> jsonValue != &lt;span style="color:#fb660a;font-weight:bold">null&lt;/span> ? JSON.parse(jsonValue) : &lt;span style="color:#fb660a;font-weight:bold">null&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#fb660a;font-weight:bold">catch&lt;/span> (e) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Error reading value
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="mise-en-oeuvre-2" >Mise en oeuvre
&lt;span>
&lt;a href="#mise-en-oeuvre-2">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;ul>
&lt;li>Les données sont chargées depuis le stockage local uniquement au démarrage de l&amp;rsquo;application.&lt;/li>
&lt;li>La validation de la saisie déclenche la sauvegarde locale, puis la mise à jour de l&amp;rsquo;état.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-jsx" data-lang="jsx">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> React, { useEffect, useState } from &lt;span style="color:#0086d2">&amp;#34;react&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> { StyleSheet, Text, View, TextInput, FlatList } from &lt;span style="color:#0086d2">&amp;#34;react-native&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">import&lt;/span> AsyncStorage from &lt;span style="color:#0086d2">&amp;#34;@react-native-async-storage/async-storage&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">// AsyncStorage key used for storing ideas
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> STORAGE_KEY = &lt;span style="color:#0086d2">&amp;#34;ASYNC_STORAGE_IDEAS&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">export&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">default&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">function&lt;/span> App() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Value of the text input
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> [input, setInput] = useState(&lt;span style="color:#0086d2">&amp;#34;&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Ideas list, initially empty
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> [ideas, setIdeas] = useState([]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Clear local storage
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> resetIdeas = &lt;span style="color:#fb660a;font-weight:bold">async&lt;/span> () =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> console.log(&lt;span style="color:#0086d2">&amp;#34;Removing ideas from local storage...&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">try&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">await&lt;/span> AsyncStorage.multiRemove([STORAGE_KEY]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#fb660a;font-weight:bold">catch&lt;/span> (e) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> console.error(&lt;span style="color:#0086d2">&amp;#34;Failed to clear ideas&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Save ideas array parameter to local storage
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> saveIdeas = &lt;span style="color:#fb660a;font-weight:bold">async&lt;/span> (newIdeas) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> console.log(&lt;span style="color:#0086d2">`Saving ideas [&lt;/span>&lt;span style="color:#0086d2">${&lt;/span>newIdeas&lt;span style="color:#0086d2">}&lt;/span>&lt;span style="color:#0086d2">] to local storage...`&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">try&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Turn ideas array into a JSON string
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> jsonIdeas = JSON.stringify(newIdeas);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Store ideas string
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">await&lt;/span> AsyncStorage.setItem(STORAGE_KEY, jsonIdeas);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#fb660a;font-weight:bold">catch&lt;/span> (e) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> console.error(&lt;span style="color:#0086d2">&amp;#34;Failed to save ideas&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Load ideas from local storage
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> loadIdeas = &lt;span style="color:#fb660a;font-weight:bold">async&lt;/span> () =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> console.log(&lt;span style="color:#0086d2">&amp;#34;Loading ideas from local storage...&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">try&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Load ideas string
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> jsonIdeas = &lt;span style="color:#fb660a;font-weight:bold">await&lt;/span> AsyncStorage.getItem(STORAGE_KEY);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">if&lt;/span> (jsonIdeas !== &lt;span style="color:#fb660a;font-weight:bold">null&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Turn stored JSON string into an array, and set it as ideas array
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> setIdeas(JSON.parse(jsonIdeas));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#fb660a;font-weight:bold">catch&lt;/span> (e) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> console.error(&lt;span style="color:#0086d2">&amp;#34;Failed to load ideas&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Load ideas only during initial component mounting
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> useEffect(() =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Uncomment to clear ideas from local storage
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// resetIdeas();
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> loadIdeas();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }, []);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">return&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">View&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">style&lt;/span>={styles.container}&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">TextInput&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff0086;font-weight:bold">style&lt;/span>={styles.input}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff0086;font-weight:bold">placeholder&lt;/span>=&lt;span style="color:#0086d2">&amp;#34;Enter your newest brilliant idea&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> // &lt;span style="color:#ff0086;font-weight:bold">Display&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">input&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">value&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff0086;font-weight:bold">value&lt;/span>={input}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff0086;font-weight:bold">onChangeText&lt;/span>={(text) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Update input value
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> setInput(text);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff0086;font-weight:bold">onSubmitEditing&lt;/span>={() =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fb660a;font-weight:bold">if&lt;/span> (!input) &lt;span style="color:#fb660a;font-weight:bold">return&lt;/span>; &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Don&amp;#39;t submit if empty
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Creating a new ideas array with input (new idea) at the end
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> &lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> newIdeas = [...ideas, input];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> saveIdeas(newIdeas);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Update state
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> setIdeas(newIdeas);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;background-color:#0f140f;font-style:italic">// Reset input value
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;background-color:#0f140f;font-style:italic">&lt;/span> setInput(&lt;span style="color:#0086d2">&amp;#34;&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> /&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">FlatList&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff0086;font-weight:bold">style&lt;/span>={styles.list}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff0086;font-weight:bold">data&lt;/span>={ideas}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff0086;font-weight:bold">renderItem&lt;/span>={({ item }) =&amp;gt; &amp;lt;&lt;span style="color:#fb660a;font-weight:bold">Text&lt;/span> &lt;span style="color:#ff0086;font-weight:bold">style&lt;/span>={styles.item}&amp;gt;- {item}&amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">Text&lt;/span>&amp;gt;}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff0086;font-weight:bold">keyExtractor&lt;/span>={(item) =&amp;gt; item}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;gt;&amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">FlatList&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#fb660a;font-weight:bold">View&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> );
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fb660a;font-weight:bold">const&lt;/span> styles = StyleSheet.create({
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> container: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> flex: &lt;span style="color:#0086f7;font-weight:bold">1&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> marginTop: &lt;span style="color:#0086f7;font-weight:bold">30&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> input: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> backgroundColor: &lt;span style="color:#0086d2">&amp;#34;whitesmoke&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> padding: &lt;span style="color:#0086f7;font-weight:bold">10&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> marginBottom: &lt;span style="color:#0086f7;font-weight:bold">10&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> list: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> marginLeft: &lt;span style="color:#0086f7;font-weight:bold">10&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> marginRight: &lt;span style="color:#0086f7;font-weight:bold">10&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> item: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> padding: &lt;span style="color:#0086f7;font-weight:bold">5&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>});
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="restructuration-du-projet-4" >Restructuration du projet
&lt;span>
&lt;a href="#restructuration-du-projet-4">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#fff;background-color:#111;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-txt" data-lang="txt">&lt;span style="display:flex;">&lt;span>MyApp/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── components/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ ├── Input.js
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── utils/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ ├── localStorage.js
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── theme/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ ├── styles.js
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>└── App.js
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item></channel></rss>